#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_MathUtil

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_MathUtil.MathUtil.abs
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_abs final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_abs) == 0x000004, "Wrong alignment on MathUtil_abs");
static_assert(sizeof(MathUtil_abs) == 0x000008, "Wrong size on MathUtil_abs");
static_assert(offsetof(MathUtil_abs, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_abs::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_abs, RetVal) == 0x000004, "Member 'MathUtil_abs::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.ceil
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_ceil final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_ceil) == 0x000004, "Wrong alignment on MathUtil_ceil");
static_assert(sizeof(MathUtil_ceil) == 0x000008, "Wrong size on MathUtil_ceil");
static_assert(offsetof(MathUtil_ceil, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_ceil::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_ceil, RetVal) == 0x000004, "Member 'MathUtil_ceil::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.clampFloat
// 0x0010 (0x0010 - 0x0000)
struct MathUtil_clampFloat final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x299075D9_min;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xDF83E27F_max;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_clampFloat) == 0x000004, "Wrong alignment on MathUtil_clampFloat");
static_assert(sizeof(MathUtil_clampFloat) == 0x000010, "Wrong size on MathUtil_clampFloat");
static_assert(offsetof(MathUtil_clampFloat, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_clampFloat::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_clampFloat, __verse_0x299075D9_min) == 0x000004, "Member 'MathUtil_clampFloat::__verse_0x299075D9_min' has a wrong offset!");
static_assert(offsetof(MathUtil_clampFloat, __verse_0xDF83E27F_max) == 0x000008, "Member 'MathUtil_clampFloat::__verse_0xDF83E27F_max' has a wrong offset!");
static_assert(offsetof(MathUtil_clampFloat, RetVal) == 0x00000C, "Member 'MathUtil_clampFloat::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.clampInt
// 0x0010 (0x0010 - 0x0000)
struct MathUtil_clampInt final
{
public:
	int32                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         __verse_0x299075D9_min;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         __verse_0xDF83E27F_max;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_clampInt) == 0x000004, "Wrong alignment on MathUtil_clampInt");
static_assert(sizeof(MathUtil_clampInt) == 0x000010, "Wrong size on MathUtil_clampInt");
static_assert(offsetof(MathUtil_clampInt, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_clampInt::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_clampInt, __verse_0x299075D9_min) == 0x000004, "Member 'MathUtil_clampInt::__verse_0x299075D9_min' has a wrong offset!");
static_assert(offsetof(MathUtil_clampInt, __verse_0xDF83E27F_max) == 0x000008, "Member 'MathUtil_clampInt::__verse_0xDF83E27F_max' has a wrong offset!");
static_assert(offsetof(MathUtil_clampInt, RetVal) == 0x00000C, "Member 'MathUtil_clampInt::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.convertToFloat
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_convertToFloat final
{
public:
	int32                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_convertToFloat) == 0x000004, "Wrong alignment on MathUtil_convertToFloat");
static_assert(sizeof(MathUtil_convertToFloat) == 0x000008, "Wrong size on MathUtil_convertToFloat");
static_assert(offsetof(MathUtil_convertToFloat, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_convertToFloat::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_convertToFloat, RetVal) == 0x000004, "Member 'MathUtil_convertToFloat::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Cos
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Cos final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Cos) == 0x000004, "Wrong alignment on MathUtil_Cos");
static_assert(sizeof(MathUtil_Cos) == 0x000008, "Wrong size on MathUtil_Cos");
static_assert(offsetof(MathUtil_Cos, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Cos::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Cos, RetVal) == 0x000004, "Member 'MathUtil_Cos::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Floor
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Floor final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Floor) == 0x000004, "Wrong alignment on MathUtil_Floor");
static_assert(sizeof(MathUtil_Floor) == 0x000008, "Wrong size on MathUtil_Floor");
static_assert(offsetof(MathUtil_Floor, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Floor::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Floor, RetVal) == 0x000004, "Member 'MathUtil_Floor::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Round
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Round final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Round) == 0x000004, "Wrong alignment on MathUtil_Round");
static_assert(sizeof(MathUtil_Round) == 0x000008, "Wrong size on MathUtil_Round");
static_assert(offsetof(MathUtil_Round, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Round::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Round, RetVal) == 0x000004, "Member 'MathUtil_Round::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Sin
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Sin final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Sin) == 0x000004, "Wrong alignment on MathUtil_Sin");
static_assert(sizeof(MathUtil_Sin) == 0x000008, "Wrong size on MathUtil_Sin");
static_assert(offsetof(MathUtil_Sin, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Sin::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Sin, RetVal) == 0x000004, "Member 'MathUtil_Sin::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Sqrt
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Sqrt final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Sqrt) == 0x000004, "Wrong alignment on MathUtil_Sqrt");
static_assert(sizeof(MathUtil_Sqrt) == 0x000008, "Wrong size on MathUtil_Sqrt");
static_assert(offsetof(MathUtil_Sqrt, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Sqrt::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Sqrt, RetVal) == 0x000004, "Member 'MathUtil_Sqrt::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Tan
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Tan final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Tan) == 0x000004, "Wrong alignment on MathUtil_Tan");
static_assert(sizeof(MathUtil_Tan) == 0x000008, "Wrong size on MathUtil_Tan");
static_assert(offsetof(MathUtil_Tan, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Tan::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Tan, RetVal) == 0x000004, "Member 'MathUtil_Tan::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.trunc
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_trunc final
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_trunc) == 0x000004, "Wrong alignment on MathUtil_trunc");
static_assert(sizeof(MathUtil_trunc) == 0x000008, "Wrong size on MathUtil_trunc");
static_assert(offsetof(MathUtil_trunc, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_trunc::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_trunc, RetVal) == 0x000004, "Member 'MathUtil_trunc::RetVal' has a wrong offset!");

}

