#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeInventoryInterface

#include "Basic.hpp"

#include "CreativeInventoryInterface_classes.hpp"
#include "CreativeInventoryInterface_parameters.hpp"


namespace SDK
{

// Function CreativeInventoryInterface.CreativeInventoryInterface_C.TabbedOff
// (Public, BlueprintCallable, BlueprintEvent)

void ICreativeInventoryInterface_C::TabbedOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("CreativeInventoryInterface_C", "TabbedOff");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function CreativeInventoryInterface.CreativeInventoryInterface_C.Setup Nav
// (Public, BlueprintCallable, BlueprintEvent)

void ICreativeInventoryInterface_C::Setup_Nav()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("CreativeInventoryInterface_C", "Setup Nav");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function CreativeInventoryInterface.CreativeInventoryInterface_C.Major Tab Changed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToHere                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ICreativeInventoryInterface_C::Major_Tab_Changed(bool bToHere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("CreativeInventoryInterface_C", "Major Tab Changed");

	Params::CreativeInventoryInterface_C_Major_Tab_Changed Parms{};

	Parms.bToHere = bToHere;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function CreativeInventoryInterface.CreativeInventoryInterface_C.InventoryClosed
// (Public, BlueprintCallable, BlueprintEvent)

void ICreativeInventoryInterface_C::InventoryClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("CreativeInventoryInterface_C", "InventoryClosed");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

