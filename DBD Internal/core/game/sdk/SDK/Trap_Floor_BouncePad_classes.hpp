#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Trap_Floor_BouncePad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Trap_Floor_BouncePad.Trap_Floor_BouncePad_C
// 0x01D0 (0x0E78 - 0x0CA8)
class ATrap_Floor_BouncePad_C final : public ABuildingTrapFloor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0CA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Trigger;                                           // 0x0CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BouncePadFX;                                       // 0x0CB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Place_Trap_Sound;                                  // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Active_Sound;                                 // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Explode_Sound;                                // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Fire_Sound;                                   // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Destroyed_Sound;                              // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OverlappedActor;                                   // 0x0CE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         Player_DestructionRange;                           // 0x0CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BouncePadTagMaxCount;                              // 0x0CF4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CFC[0x4];                                      // 0x0CFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        LaunchedPlayer;                                    // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_LowGravity;                                     // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_BounceTracker1;                                 // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_BounceTracker2;                                 // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         PlayerMaxLateralVelocity;                          // 0x0D20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerZVelocity;                                   // 0x0D48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerMaxVelocity;                                 // 0x0D70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleMassVelocityMultiplier;                     // 0x0D98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleMinLateralVelocity;                         // 0x0DC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleMaxLateralVelocity;                         // 0x0DE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IgnoreFallDamage;                                  // 0x0E10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E11[0x7];                                      // 0x0E11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_NoFX_LowGravity;                                // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SetIgnoreFallDamage;                               // 0x0E20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_LowGravityWithHopRocks;                         // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEnemyPawn_Parent_Deimos_C*             DeimosPawn;                                        // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PreventLaunchTag;                                  // 0x0E58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortVehicleInterface> LaunchedVehicleInterface;                          // 0x0E60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           Tag_CancelAbilityOnImpulse;                        // 0x0E70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Trap_Floor_BouncePad(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void GameplayCue_Abilities_Activation_Traps_ActivateTrap(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnFinishedBuilding();
	void OnPlaced();
	void UserConstructionScript();
	void PlayerLaunch(class AFortPlayerPawn* Player);
	void VehicleLaunch(TScriptInterface<class IFortVehicleInterface> VehicleInterface);
	void OnRep_Overlappedactor();
	void PlayerApplyGameplayEffects();
	void DeimosLaunch(class AEnemyPawn_Parent_Deimos_C* DeimosPawn_0);
	void DeimosApplyGameplayEffects();
	void BP_OnTrigger(const TArray<class AActor*>& TouchingActors, bool* bOutConsumeEvent);
	void PhysicsObjectLaunch(class AFortPhysicsPawnObject* PhysicsObject);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Trap_Floor_BouncePad_C">();
	}
	static class ATrap_Floor_BouncePad_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATrap_Floor_BouncePad_C>();
	}
};
static_assert(alignof(ATrap_Floor_BouncePad_C) == 0x000008, "Wrong alignment on ATrap_Floor_BouncePad_C");
static_assert(sizeof(ATrap_Floor_BouncePad_C) == 0x000E78, "Wrong size on ATrap_Floor_BouncePad_C");
static_assert(offsetof(ATrap_Floor_BouncePad_C, UberGraphFrame) == 0x000CA8, "Member 'ATrap_Floor_BouncePad_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Trigger) == 0x000CB0, "Member 'ATrap_Floor_BouncePad_C::Trigger' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, BouncePadFX) == 0x000CB8, "Member 'ATrap_Floor_BouncePad_C::BouncePadFX' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Place_Trap_Sound) == 0x000CC0, "Member 'ATrap_Floor_BouncePad_C::Place_Trap_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Trap_Active_Sound) == 0x000CC8, "Member 'ATrap_Floor_BouncePad_C::Trap_Active_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Trap_Explode_Sound) == 0x000CD0, "Member 'ATrap_Floor_BouncePad_C::Trap_Explode_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Trap_Fire_Sound) == 0x000CD8, "Member 'ATrap_Floor_BouncePad_C::Trap_Fire_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Trap_Destroyed_Sound) == 0x000CE0, "Member 'ATrap_Floor_BouncePad_C::Trap_Destroyed_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, OverlappedActor) == 0x000CE8, "Member 'ATrap_Floor_BouncePad_C::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Player_DestructionRange) == 0x000CF0, "Member 'ATrap_Floor_BouncePad_C::Player_DestructionRange' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, BouncePadTagMaxCount) == 0x000CF4, "Member 'ATrap_Floor_BouncePad_C::BouncePadTagMaxCount' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, LaunchedPlayer) == 0x000D00, "Member 'ATrap_Floor_BouncePad_C::LaunchedPlayer' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, GE_LowGravity) == 0x000D08, "Member 'ATrap_Floor_BouncePad_C::GE_LowGravity' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, GE_BounceTracker1) == 0x000D10, "Member 'ATrap_Floor_BouncePad_C::GE_BounceTracker1' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, GE_BounceTracker2) == 0x000D18, "Member 'ATrap_Floor_BouncePad_C::GE_BounceTracker2' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, PlayerMaxLateralVelocity) == 0x000D20, "Member 'ATrap_Floor_BouncePad_C::PlayerMaxLateralVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, PlayerZVelocity) == 0x000D48, "Member 'ATrap_Floor_BouncePad_C::PlayerZVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, PlayerMaxVelocity) == 0x000D70, "Member 'ATrap_Floor_BouncePad_C::PlayerMaxVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, VehicleMassVelocityMultiplier) == 0x000D98, "Member 'ATrap_Floor_BouncePad_C::VehicleMassVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, VehicleMinLateralVelocity) == 0x000DC0, "Member 'ATrap_Floor_BouncePad_C::VehicleMinLateralVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, VehicleMaxLateralVelocity) == 0x000DE8, "Member 'ATrap_Floor_BouncePad_C::VehicleMaxLateralVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, IgnoreFallDamage) == 0x000E10, "Member 'ATrap_Floor_BouncePad_C::IgnoreFallDamage' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, GE_NoFX_LowGravity) == 0x000E18, "Member 'ATrap_Floor_BouncePad_C::GE_NoFX_LowGravity' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, SetIgnoreFallDamage) == 0x000E20, "Member 'ATrap_Floor_BouncePad_C::SetIgnoreFallDamage' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, GE_LowGravityWithHopRocks) == 0x000E48, "Member 'ATrap_Floor_BouncePad_C::GE_LowGravityWithHopRocks' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, DeimosPawn) == 0x000E50, "Member 'ATrap_Floor_BouncePad_C::DeimosPawn' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, PreventLaunchTag) == 0x000E58, "Member 'ATrap_Floor_BouncePad_C::PreventLaunchTag' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, LaunchedVehicleInterface) == 0x000E60, "Member 'ATrap_Floor_BouncePad_C::LaunchedVehicleInterface' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_BouncePad_C, Tag_CancelAbilityOnImpulse) == 0x000E70, "Member 'ATrap_Floor_BouncePad_C::Tag_CancelAbilityOnImpulse' has a wrong offset!");

}

