#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NightmareRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class NightmareRuntime.FortNightmareGameCueNotifyLoop_Cloak
// 0x0028 (0x07E8 - 0x07C0)
class AFortNightmareGameCueNotifyLoop_Cloak : public AFortGameplayCueNotify_Loop
{
public:
	class AFortPlayerPawn*                        TargetPlayer;                                      // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisibilityLevel;                                   // 0x07C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StationaryVisMult;                                 // 0x07CC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeedVisMult;                                   // 0x07D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InteractVisMultAdd;                                // 0x07D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FriendlyVisMultMin;                                // 0x07D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerCurrentSpeed;                                // 0x07DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedForMaxVis;                                    // 0x07E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisibilityLevelChangeRate;                         // 0x07E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	float TickMovementOpacity(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNightmareGameCueNotifyLoop_Cloak">();
	}
	static class AFortNightmareGameCueNotifyLoop_Cloak* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortNightmareGameCueNotifyLoop_Cloak>();
	}
};
static_assert(alignof(AFortNightmareGameCueNotifyLoop_Cloak) == 0x000008, "Wrong alignment on AFortNightmareGameCueNotifyLoop_Cloak");
static_assert(sizeof(AFortNightmareGameCueNotifyLoop_Cloak) == 0x0007E8, "Wrong size on AFortNightmareGameCueNotifyLoop_Cloak");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, TargetPlayer) == 0x0007C0, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::TargetPlayer' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, VisibilityLevel) == 0x0007C8, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::VisibilityLevel' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, StationaryVisMult) == 0x0007CC, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::StationaryVisMult' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, MaxSpeedVisMult) == 0x0007D0, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::MaxSpeedVisMult' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, InteractVisMultAdd) == 0x0007D4, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::InteractVisMultAdd' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, FriendlyVisMultMin) == 0x0007D8, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::FriendlyVisMultMin' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, PlayerCurrentSpeed) == 0x0007DC, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::PlayerCurrentSpeed' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, SpeedForMaxVis) == 0x0007E0, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::SpeedForMaxVis' has a wrong offset!");
static_assert(offsetof(AFortNightmareGameCueNotifyLoop_Cloak, VisibilityLevelChangeRate) == 0x0007E4, "Member 'AFortNightmareGameCueNotifyLoop_Cloak::VisibilityLevelChangeRate' has a wrong offset!");

}

