#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_FireExtinguisher_Pickup

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BGA_HeldObject_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_FireExtinguisher_Pickup.BGA_FireExtinguisher_Pickup_C
// 0x02A0 (0x0C40 - 0x09A0)
class ABGA_FireExtinguisher_Pickup_C final : public ABGA_HeldObject_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_FireExtinguisher_Pickup_C;      // 0x09A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio_ReleaseSmoke;                                // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessParentShape;                            // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SmokeScreen_Sphere;                                // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SmokeVolumeMesh;                                   // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Athena_SmokeGrenade_OuterSmoke_01;               // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortItemEntryComponent*                FortItemEntry;                                     // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FireExtinguisher;                                  // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeSmokeTL_Float_CF905F0F47270980030E72B404D48CF0; // 0x09E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeSmokeTL__Direction_CF905F0F47270980030E72B404D48CF0; // 0x09EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9ED[0x3];                                      // 0x09ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeSmokeTL;                                       // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              ExplodeInstigator;                                 // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             LastHit;                                           // 0x0A10(0x008C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, ContainsInstancedReference)
	bool                                          FuseLit;                                           // 0x0A9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAttachedToWeapon;                                // 0x0A9D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dropped;                                           // 0x0A9E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldExplode;                                     // 0x0A9F(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           GC_Smoking;                                        // 0x0AA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ExplosionRadius;                                   // 0x0AA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         TargetedActors;                                    // 0x0AD0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UClass*>                         GE_ExplodeDamage;                                  // 0x0AE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectArray;                                       // 0x0AF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeVehicleDamage;                           // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodePlayerDamage;                            // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWeapon*                            WeaponAttachedTo;                                  // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedOfNoStickBounce;                           // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1C[0x4];                                      // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               WeaponItemDefinition;                              // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthIsZero;                                      // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldDie;                                        // 0x0B29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2A[0x2];                                      // 0x0B2A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ExplosionCUE;                                      // 0x0B2C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExplosionCUE_Water;                                // 0x0B34(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3C[0x4];                                      // 0x0B3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Radius;                                            // 0x0B40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                HitLocation;                                       // 0x0B68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterTraceRadius;                                  // 0x0B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      WaterTraceObjectTypes;                             // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortPlayerController*                  LastDamageInstigator;                              // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandscapeExtinguishRadius;                         // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuseDuration;                                      // 0x0B94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_FailedInteract_InventoryIsFull;                // 0x0B98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             FailedInteractSound;                               // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CurieActivated;                                    // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC1[0x7];                                      // 0x0BC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortInventoryOwnerInterface> HeldItemInventoryInterface;                 // 0x0BC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGuid                                  HeldItemGUID;                                      // 0x0BD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        EmitterOnDamage;                                   // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmitterScale;                                      // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF4[0x4];                                      // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             PreExplodeSound;                                   // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FuseTimerHandle;                                   // 0x0C00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeLifespan;                                     // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         SmokeDelayBeforeFadeIn;                            // 0x0C0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeFadeOutTime;                                  // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SmokeVolumeMeshMID;                                // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SmokeScreenMID;                                    // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeFadeValue;                                    // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeFadeInTime;                                   // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeRadius;                                       // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AfterSmokeDelay;                                   // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_FireExtinguisher_Pickup(int32 EntryPoint);
	void AfterSmoke();
	void SmokeFadeIn();
	void SmokeFadeOut();
	void SplashWater();
	void SetHeldItemInfo(TScriptInterface<class IFortInventoryOwnerInterface> InventoryInterface, const struct FGuid& Guid, class AFortWeapon* WeaponAttachedTo_0);
	void AllowInteractDelay();
	void ExplosionTrace();
	void BndEvt__FortProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void EventDestroyed();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ExplodeAndDie();
	void DropHeldItem();
	void SetFuseAndDrop();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void HideAndDestroy();
	void _ServerOnly__HideAndDestroy();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void ReceiveBeginPlay();
	void FadeSmokeTL__UpdateFunc();
	void FadeSmokeTL__FinishedFunc();
	void UserConstructionScript();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void ApplyWaterInRadiusIfCurieEnabled(const struct FHitResult& HitResult);
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn);
	void OnRep_LastHit();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_FireExtinguisher_Pickup_C">();
	}
	static class ABGA_FireExtinguisher_Pickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_FireExtinguisher_Pickup_C>();
	}
};
static_assert(alignof(ABGA_FireExtinguisher_Pickup_C) == 0x000010, "Wrong alignment on ABGA_FireExtinguisher_Pickup_C");
static_assert(sizeof(ABGA_FireExtinguisher_Pickup_C) == 0x000C40, "Wrong size on ABGA_FireExtinguisher_Pickup_C");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, UberGraphFrame_BGA_FireExtinguisher_Pickup_C) == 0x0009A0, "Member 'ABGA_FireExtinguisher_Pickup_C::UberGraphFrame_BGA_FireExtinguisher_Pickup_C' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, Audio_ReleaseSmoke) == 0x0009A8, "Member 'ABGA_FireExtinguisher_Pickup_C::Audio_ReleaseSmoke' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, PostProcessParentShape) == 0x0009B0, "Member 'ABGA_FireExtinguisher_Pickup_C::PostProcessParentShape' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeScreen_Sphere) == 0x0009B8, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeScreen_Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeVolumeMesh) == 0x0009C0, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeVolumeMesh' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, P_Athena_SmokeGrenade_OuterSmoke_01) == 0x0009C8, "Member 'ABGA_FireExtinguisher_Pickup_C::P_Athena_SmokeGrenade_OuterSmoke_01' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FortItemEntry) == 0x0009D0, "Member 'ABGA_FireExtinguisher_Pickup_C::FortItemEntry' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, Sphere) == 0x0009D8, "Member 'ABGA_FireExtinguisher_Pickup_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FireExtinguisher) == 0x0009E0, "Member 'ABGA_FireExtinguisher_Pickup_C::FireExtinguisher' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FadeSmokeTL_Float_CF905F0F47270980030E72B404D48CF0) == 0x0009E8, "Member 'ABGA_FireExtinguisher_Pickup_C::FadeSmokeTL_Float_CF905F0F47270980030E72B404D48CF0' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FadeSmokeTL__Direction_CF905F0F47270980030E72B404D48CF0) == 0x0009EC, "Member 'ABGA_FireExtinguisher_Pickup_C::FadeSmokeTL__Direction_CF905F0F47270980030E72B404D48CF0' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FadeSmokeTL) == 0x0009F0, "Member 'ABGA_FireExtinguisher_Pickup_C::FadeSmokeTL' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, PlayerPawn) == 0x0009F8, "Member 'ABGA_FireExtinguisher_Pickup_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, PlayerController) == 0x000A00, "Member 'ABGA_FireExtinguisher_Pickup_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, ExplodeInstigator) == 0x000A08, "Member 'ABGA_FireExtinguisher_Pickup_C::ExplodeInstigator' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, LastHit) == 0x000A10, "Member 'ABGA_FireExtinguisher_Pickup_C::LastHit' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FuseLit) == 0x000A9C, "Member 'ABGA_FireExtinguisher_Pickup_C::FuseLit' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, IsAttachedToWeapon) == 0x000A9D, "Member 'ABGA_FireExtinguisher_Pickup_C::IsAttachedToWeapon' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, Dropped) == 0x000A9E, "Member 'ABGA_FireExtinguisher_Pickup_C::Dropped' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, ShouldExplode) == 0x000A9F, "Member 'ABGA_FireExtinguisher_Pickup_C::ShouldExplode' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, GC_Smoking) == 0x000AA0, "Member 'ABGA_FireExtinguisher_Pickup_C::GC_Smoking' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, ExplosionRadius) == 0x000AA8, "Member 'ABGA_FireExtinguisher_Pickup_C::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, TargetedActors) == 0x000AD0, "Member 'ABGA_FireExtinguisher_Pickup_C::TargetedActors' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, GE_ExplodeDamage) == 0x000AE0, "Member 'ABGA_FireExtinguisher_Pickup_C::GE_ExplodeDamage' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, ObjectArray) == 0x000AF0, "Member 'ABGA_FireExtinguisher_Pickup_C::ObjectArray' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, GE_ExplodeVehicleDamage) == 0x000B00, "Member 'ABGA_FireExtinguisher_Pickup_C::GE_ExplodeVehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, GE_ExplodePlayerDamage) == 0x000B08, "Member 'ABGA_FireExtinguisher_Pickup_C::GE_ExplodePlayerDamage' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, WeaponAttachedTo) == 0x000B10, "Member 'ABGA_FireExtinguisher_Pickup_C::WeaponAttachedTo' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, MinSpeedOfNoStickBounce) == 0x000B18, "Member 'ABGA_FireExtinguisher_Pickup_C::MinSpeedOfNoStickBounce' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, WeaponItemDefinition) == 0x000B20, "Member 'ABGA_FireExtinguisher_Pickup_C::WeaponItemDefinition' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, HealthIsZero) == 0x000B28, "Member 'ABGA_FireExtinguisher_Pickup_C::HealthIsZero' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, bShouldDie) == 0x000B29, "Member 'ABGA_FireExtinguisher_Pickup_C::bShouldDie' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, ExplosionCUE) == 0x000B2C, "Member 'ABGA_FireExtinguisher_Pickup_C::ExplosionCUE' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, ExplosionCUE_Water) == 0x000B34, "Member 'ABGA_FireExtinguisher_Pickup_C::ExplosionCUE_Water' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, Radius) == 0x000B40, "Member 'ABGA_FireExtinguisher_Pickup_C::Radius' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, HitLocation) == 0x000B68, "Member 'ABGA_FireExtinguisher_Pickup_C::HitLocation' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, WaterTraceRadius) == 0x000B74, "Member 'ABGA_FireExtinguisher_Pickup_C::WaterTraceRadius' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, WaterTraceObjectTypes) == 0x000B78, "Member 'ABGA_FireExtinguisher_Pickup_C::WaterTraceObjectTypes' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, LastDamageInstigator) == 0x000B88, "Member 'ABGA_FireExtinguisher_Pickup_C::LastDamageInstigator' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, LandscapeExtinguishRadius) == 0x000B90, "Member 'ABGA_FireExtinguisher_Pickup_C::LandscapeExtinguishRadius' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FuseDuration) == 0x000B94, "Member 'ABGA_FireExtinguisher_Pickup_C::FuseDuration' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, Tag_FailedInteract_InventoryIsFull) == 0x000B98, "Member 'ABGA_FireExtinguisher_Pickup_C::Tag_FailedInteract_InventoryIsFull' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FailedInteractSound) == 0x000BB8, "Member 'ABGA_FireExtinguisher_Pickup_C::FailedInteractSound' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, CurieActivated) == 0x000BC0, "Member 'ABGA_FireExtinguisher_Pickup_C::CurieActivated' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, HeldItemInventoryInterface) == 0x000BC8, "Member 'ABGA_FireExtinguisher_Pickup_C::HeldItemInventoryInterface' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, HeldItemGUID) == 0x000BD8, "Member 'ABGA_FireExtinguisher_Pickup_C::HeldItemGUID' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, EmitterOnDamage) == 0x000BE8, "Member 'ABGA_FireExtinguisher_Pickup_C::EmitterOnDamage' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, EmitterScale) == 0x000BF0, "Member 'ABGA_FireExtinguisher_Pickup_C::EmitterScale' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, PreExplodeSound) == 0x000BF8, "Member 'ABGA_FireExtinguisher_Pickup_C::PreExplodeSound' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, FuseTimerHandle) == 0x000C00, "Member 'ABGA_FireExtinguisher_Pickup_C::FuseTimerHandle' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeLifespan) == 0x000C08, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeLifespan' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeDelayBeforeFadeIn) == 0x000C0C, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeDelayBeforeFadeIn' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeFadeOutTime) == 0x000C10, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeFadeOutTime' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeVolumeMeshMID) == 0x000C18, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeVolumeMeshMID' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeScreenMID) == 0x000C20, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeScreenMID' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeFadeValue) == 0x000C28, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeFadeValue' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeFadeInTime) == 0x000C2C, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeFadeInTime' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, SmokeRadius) == 0x000C30, "Member 'ABGA_FireExtinguisher_Pickup_C::SmokeRadius' has a wrong offset!");
static_assert(offsetof(ABGA_FireExtinguisher_Pickup_C, AfterSmokeDelay) == 0x000C34, "Member 'ABGA_FireExtinguisher_Pickup_C::AfterSmokeDelay' has a wrong offset!");

}

