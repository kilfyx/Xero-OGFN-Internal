#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_ActivePower_StandardActivation_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GA_Athena_ActivePower_Parent_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_ActivePower_StandardActivation_Parent.GA_Athena_ActivePower_StandardActivation_Parent_C
// 0x00F0 (0x0C80 - 0x0B90)
class UGA_Athena_ActivePower_StandardActivation_Parent_C : public UGA_Athena_ActivePower_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Athena_ActivePower_StandardActivation_Parent_C; // 0x0B90(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ActivatesOnRelease;                                // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlockMovementDuringHold;                           // 0x0B99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Charges;                                           // 0x0B9A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9B[0x1];                                      // 0x0B9B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeTime;                                        // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FScalableFloat                         Row_MaxChargeTime;                                 // 0x0BA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ChargePercent;                                     // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_BCC[0x4];                                      // 0x0BCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve_ChargeMultiplier;                            // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeMultiplier;                                  // 0x0BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargePercentMin;                                  // 0x0BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargePercentMax;                                  // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayCastOnActivate;                                // 0x0BE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnActivatedJumpToCastSection;                      // 0x0BE5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE6[0x2];                                      // 0x0BE6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CastSectionName;                                   // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HoverOnActivate;                                   // 0x0BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StopHoverOnRelease;                                // 0x0BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverlapPawnCollisionDuringAbility;                 // 0x0BF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EndOnWaterEnter;                                   // 0x0BF3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF4[0x4];                                      // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_ReachedMaxCharge;                            // 0x0BF8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_MaxCharge;                                      // 0x0C00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MaxChargeGCUsesParams;                             // 0x0C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C09[0x3];                                      // 0x0C09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_InputHeldLoop;                                  // 0x0C0C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          InputHeldLoopGCUsesParams;                         // 0x0C14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C15[0x3];                                      // 0x0C15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActivateCameraMode;                                // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClearsCameraModeOnRelease;                         // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReleaseFiresIfOnCooldown;                          // 0x0C21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RemoveEffectsOnPress;                              // 0x0C22(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RemoveEffectsOnRelease;                            // 0x0C23(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C24[0x4];                                      // 0x0C24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   GrantedTagsToRemove;                               // 0x0C28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   AssetTagsToRemove;                                 // 0x0C38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Charging;                                          // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C49[0x3];                                      // 0x0C49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag_DBNO;                                          // 0x0C4C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EndOnDBNO;                                         // 0x0C54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C55[0x3];                                      // 0x0C55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoverTimeLimit;                                    // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5C[0x4];                                      // 0x0C5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HoverTimer;                                        // 0x0C60(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TestAlreadyReleased;                               // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C69[0x3];                                      // 0x0C69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag_Knockback;                                     // 0x0C6C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EndOnKnockback;                                    // 0x0C74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C75[0x3];                                      // 0x0C75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag_CancelPower;                                   // 0x0C78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Athena_ActivePower_StandardActivation_Parent(int32 EntryPoint);
	void TurnOffHover();
	void SetupCancelBinds();
	void Released(float HoldTime);
	void ResetActivationReleaseDoOnce();
	void InitActivateOnRelease();
	void ReachedMaxCharge();
	void SetWaterBinding();
	void PlayerEnterWater(class AFortPlayerPawn* FortPlayerPawn);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnAbilityActivated();
	void Added_07BC1D794BE0002195A38CB4134458E6();
	void Added_801F31CD4D620EDDB68D17B410BDB787();
	void Added_E9914498452A35619843A98F9F1B9632();
	void OnRelease_018C747C4949783488106FB2DE06764D(float TimeHeld);
	void CalculateReleaseTime(float ReleaseTime);
	void CalculateCharge(float ChargeTime_0);
	struct FGameplayCueParameters MaxChargeGCParams();
	struct FGameplayCueParameters InputHeldLoopGCParams();
	void Set_Valid_Camera(class UClass* InputPin);
	void ClearReleaseCameraMode();
	void InitAbility();
	void RemoveSpecifiedEffects();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_ActivePower_StandardActivation_Parent_C">();
	}
	static class UGA_Athena_ActivePower_StandardActivation_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_ActivePower_StandardActivation_Parent_C>();
	}
};
static_assert(alignof(UGA_Athena_ActivePower_StandardActivation_Parent_C) == 0x000008, "Wrong alignment on UGA_Athena_ActivePower_StandardActivation_Parent_C");
static_assert(sizeof(UGA_Athena_ActivePower_StandardActivation_Parent_C) == 0x000C80, "Wrong size on UGA_Athena_ActivePower_StandardActivation_Parent_C");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, UberGraphFrame_GA_Athena_ActivePower_StandardActivation_Parent_C) == 0x000B90, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::UberGraphFrame_GA_Athena_ActivePower_StandardActivation_Parent_C' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ActivatesOnRelease) == 0x000B98, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ActivatesOnRelease' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, BlockMovementDuringHold) == 0x000B99, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::BlockMovementDuringHold' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Charges) == 0x000B9A, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Charges' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ChargeTime) == 0x000B9C, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ChargeTime' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Row_MaxChargeTime) == 0x000BA0, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Row_MaxChargeTime' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ChargePercent) == 0x000BC8, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ChargePercent' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Curve_ChargeMultiplier) == 0x000BD0, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Curve_ChargeMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ChargeMultiplier) == 0x000BD8, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ChargeMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ChargePercentMin) == 0x000BDC, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ChargePercentMin' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ChargePercentMax) == 0x000BE0, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ChargePercentMax' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, PlayCastOnActivate) == 0x000BE4, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::PlayCastOnActivate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, OnActivatedJumpToCastSection) == 0x000BE5, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::OnActivatedJumpToCastSection' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, CastSectionName) == 0x000BE8, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::CastSectionName' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, HoverOnActivate) == 0x000BF0, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::HoverOnActivate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, StopHoverOnRelease) == 0x000BF1, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::StopHoverOnRelease' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, OverlapPawnCollisionDuringAbility) == 0x000BF2, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::OverlapPawnCollisionDuringAbility' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, EndOnWaterEnter) == 0x000BF3, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::EndOnWaterEnter' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Timer_ReachedMaxCharge) == 0x000BF8, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Timer_ReachedMaxCharge' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, GC_MaxCharge) == 0x000C00, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::GC_MaxCharge' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, MaxChargeGCUsesParams) == 0x000C08, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::MaxChargeGCUsesParams' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, GC_InputHeldLoop) == 0x000C0C, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::GC_InputHeldLoop' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, InputHeldLoopGCUsesParams) == 0x000C14, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::InputHeldLoopGCUsesParams' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ActivateCameraMode) == 0x000C18, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ActivateCameraMode' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ClearsCameraModeOnRelease) == 0x000C20, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ClearsCameraModeOnRelease' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, ReleaseFiresIfOnCooldown) == 0x000C21, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::ReleaseFiresIfOnCooldown' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, RemoveEffectsOnPress) == 0x000C22, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::RemoveEffectsOnPress' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, RemoveEffectsOnRelease) == 0x000C23, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::RemoveEffectsOnRelease' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, GrantedTagsToRemove) == 0x000C28, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::GrantedTagsToRemove' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, AssetTagsToRemove) == 0x000C38, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::AssetTagsToRemove' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Charging) == 0x000C48, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Charging' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Tag_DBNO) == 0x000C4C, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Tag_DBNO' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, EndOnDBNO) == 0x000C54, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::EndOnDBNO' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, HoverTimeLimit) == 0x000C58, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::HoverTimeLimit' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, HoverTimer) == 0x000C60, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::HoverTimer' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, TestAlreadyReleased) == 0x000C68, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::TestAlreadyReleased' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Tag_Knockback) == 0x000C6C, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Tag_Knockback' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, EndOnKnockback) == 0x000C74, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::EndOnKnockback' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ActivePower_StandardActivation_Parent_C, Tag_CancelPower) == 0x000C78, "Member 'UGA_Athena_ActivePower_StandardActivation_Parent_C::Tag_CancelPower' has a wrong offset!");

}

