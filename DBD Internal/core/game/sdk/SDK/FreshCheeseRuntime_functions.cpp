#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreshCheeseRuntime

#include "Basic.hpp"

#include "FreshCheeseRuntime_classes.hpp"
#include "FreshCheeseRuntime_parameters.hpp"


namespace SDK
{

// Function FreshCheeseRuntime.FriendChestSpawner.LogSpawnerMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestSpawner::LogSpawnerMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestSpawner", "LogSpawnerMessage");

	Params::FriendChestSpawner_LogSpawnerMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestSpawner.NotifySpawnFailure
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             SquadId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestSpawner::NotifySpawnFailure(const class FString& Reason, const int32 SquadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestSpawner", "NotifySpawnFailure");

	Params::FriendChestSpawner_NotifySpawnFailure Parms{};

	Parms.Reason = std::move(Reason);
	Parms.SquadId = SquadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestSpawner.SendEndSpawnAnalytics
// (Final, Native, Public, BlueprintCallable)

void AFriendChestSpawner::SendEndSpawnAnalytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestSpawner", "SendEndSpawnAnalytics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestSpawner.TriggerFriendChestSpawn
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AFriendChestSpawner::TriggerFriendChestSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestSpawner", "TriggerFriendChestSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FreshCheeseRuntime.FortCheatManager_FreshCheese.FreshCheeseInstancedLoot
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// const class FName                       TierGroup                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumFriends                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_FreshCheese::FreshCheeseInstancedLoot(const class FName TierGroup, int32 NumFriends)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_FreshCheese", "FreshCheeseInstancedLoot");

	Params::FortCheatManager_FreshCheese_FreshCheeseInstancedLoot Parms{};

	Parms.TierGroup = TierGroup;
	Parms.NumFriends = NumFriends;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FortCheatManager_FreshCheese.SpawnFriendChests
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortCheatManager_FreshCheese::SpawnFriendChests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_FreshCheese", "SpawnFriendChests");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.ClearSimulatedDisconnects
// (Final, Native, Protected)

void AFriendChestNative::ClearSimulatedDisconnects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "ClearSimulatedDisconnects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.CreateIndicators
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void AFriendChestNative::CreateIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "CreateIndicators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.HandlePlayerDeadStateChanged
// (Final, Native, Private)
// Parameters:
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDead                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::HandlePlayerDeadStateChanged(class AFortPlayerStateAthena* PlayerState, bool bIsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "HandlePlayerDeadStateChanged");

	Params::FriendChestNative_HandlePlayerDeadStateChanged Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIsDead = bIsDead;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.OnPlayerEnter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class AFortPlayerStateAthena*     Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::OnPlayerEnter(const class AFortPlayerStateAthena* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnPlayerEnter");

	Params::FriendChestNative_OnPlayerEnter Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.OnPlayerHit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class AFortPlayerStateAthena*     Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bWasSuccessful                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::OnPlayerHit(const class AFortPlayerStateAthena* Player, const bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnPlayerHit");

	Params::FriendChestNative_OnPlayerHit Parms{};

	Parms.Player = Player;
	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.OnPlayerLeave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class AFortPlayerStateAthena*     Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::OnPlayerLeave(const class AFortPlayerStateAthena* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnPlayerLeave");

	Params::FriendChestNative_OnPlayerLeave Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.OnPlayerPawnDied
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  DeadPawn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::OnPlayerPawnDied(class AFortPlayerPawn* DeadPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnPlayerPawnDied");

	Params::FriendChestNative_OnPlayerPawnDied Parms{};

	Parms.DeadPawn = DeadPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FreshCheeseRuntime.FriendChestNative.OnPlayerTimeout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class AFortPlayerStateAthena*     Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::OnPlayerTimeout(const class AFortPlayerStateAthena* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnPlayerTimeout");

	Params::FriendChestNative_OnPlayerTimeout Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.OnTriggerComponentBeginOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFriendChestNative::OnTriggerComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnTriggerComponentBeginOverlap");

	Params::FriendChestNative_OnTriggerComponentBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.OnTriggerComponentEndOverlap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::OnTriggerComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnTriggerComponentEndOverlap");

	Params::FriendChestNative_OnTriggerComponentEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.OnXpEvent
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FXPEventInfo&              XPEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFriendChestNative::OnXpEvent(const struct FXPEventInfo& XPEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "OnXpEvent");

	Params::FriendChestNative_OnXpEvent Parms{};

	Parms.XPEvent = std::move(XPEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.PlayerAdded
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawnAthena*            Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::PlayerAdded(class AFortPlayerPawnAthena* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "PlayerAdded");

	Params::FriendChestNative_PlayerAdded Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FreshCheeseRuntime.FriendChestNative.PlayerRemoved
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawnAthena*            Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::PlayerRemoved(class AFortPlayerPawnAthena* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "PlayerRemoved");

	Params::FriendChestNative_PlayerRemoved Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FreshCheeseRuntime.FriendChestNative.RefreshChestState
// (Event, Public, BlueprintEvent)

void AFriendChestNative::RefreshChestState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "RefreshChestState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FreshCheeseRuntime.FriendChestNative.ResetLootTierForAssociatedSquad
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOnlyAlive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::ResetLootTierForAssociatedSquad(bool bOnlyAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "ResetLootTierForAssociatedSquad");

	Params::FriendChestNative_ResetLootTierForAssociatedSquad Parms{};

	Parms.bOnlyAlive = bOnlyAlive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.RollInstancedLootForSquadMembers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameModeBase*                    GameMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             SquadId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFriendChestNative::RollInstancedLootForSquadMembers(class AGameModeBase* GameMode, const uint8 SquadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "RollInstancedLootForSquadMembers");

	Params::FriendChestNative_RollInstancedLootForSquadMembers Parms{};

	Parms.GameMode = GameMode;
	Parms.SquadId = SquadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.SimulateDisconnect
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const TArray<class FString>&            SquadUserIds                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AFriendChestNative::SimulateDisconnect(const TArray<class FString>& SquadUserIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "SimulateDisconnect");

	Params::FriendChestNative_SimulateDisconnect Parms{};

	Parms.SquadUserIds = std::move(SquadUserIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreshCheeseRuntime.FriendChestNative.CalculatePlayerChangedAlpha
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const int32                             NumberInPosition                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Delta                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Alpha                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFriendChestNative::CalculatePlayerChangedAlpha(const int32 NumberInPosition, const int32 Delta, const float Alpha) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "CalculatePlayerChangedAlpha");

	Params::FriendChestNative_CalculatePlayerChangedAlpha Parms{};

	Parms.NumberInPosition = NumberInPosition;
	Parms.Delta = Delta;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreshCheeseRuntime.FriendChestNative.GetAssociatedSquadID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AFriendChestNative::GetAssociatedSquadID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "GetAssociatedSquadID");

	Params::FriendChestNative_GetAssociatedSquadID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreshCheeseRuntime.FriendChestNative.GetAssociatedSquadMembers
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// bool                                    bIncludeDead                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeResurectable                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeDisconnected                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AFortPlayerStateAthena*>*  OutSquadMembers                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AFriendChestNative::GetAssociatedSquadMembers(bool bIncludeDead, bool bIncludeResurectable, bool bIncludeDisconnected, TArray<class AFortPlayerStateAthena*>* OutSquadMembers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "GetAssociatedSquadMembers");

	Params::FriendChestNative_GetAssociatedSquadMembers Parms{};

	Parms.bIncludeDead = bIncludeDead;
	Parms.bIncludeResurectable = bIncludeResurectable;
	Parms.bIncludeDisconnected = bIncludeDisconnected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSquadMembers != nullptr)
		*OutSquadMembers = std::move(Parms.OutSquadMembers);
}


// Function FreshCheeseRuntime.FriendChestNative.GetNumTargetsForNextRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             SquadSize                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             RemainingTargets                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFriendChestNative::GetNumTargetsForNextRound(const int32 SquadSize, const int32 RemainingTargets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "GetNumTargetsForNextRound");

	Params::FriendChestNative_GetNumTargetsForNextRound Parms{};

	Parms.SquadSize = SquadSize;
	Parms.RemainingTargets = RemainingTargets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreshCheeseRuntime.FriendChestNative.GetWeakpointTransformForButtonID
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UInstancedStaticMeshComponent*InstancedStaticMesh                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InstanceIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WeakpointOffset                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform AFriendChestNative::GetWeakpointTransformForButtonID(const class UInstancedStaticMeshComponent* InstancedStaticMesh, const int32 InstanceIndex, const struct FVector& WeakpointOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendChestNative", "GetWeakpointTransformForButtonID");

	Params::FriendChestNative_GetWeakpointTransformForButtonID Parms{};

	Parms.InstancedStaticMesh = InstancedStaticMesh;
	Parms.InstanceIndex = InstanceIndex;
	Parms.WeakpointOffset = std::move(WeakpointOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreshCheeseRuntime.FriendChestLibrary.GetFilteredSquadMembers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   SquadId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeDead                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeResurectable                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeDisconnected                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AFortPlayerStateAthena*>*  OutSquadMembers                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFriendChestLibrary::GetFilteredSquadMembers(class UObject* WorldContextObject, uint8 SquadId, bool bIncludeDead, bool bIncludeResurectable, bool bIncludeDisconnected, TArray<class AFortPlayerStateAthena*>* OutSquadMembers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FriendChestLibrary", "GetFilteredSquadMembers");

	Params::FriendChestLibrary_GetFilteredSquadMembers Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SquadId = SquadId;
	Parms.bIncludeDead = bIncludeDead;
	Parms.bIncludeResurectable = bIncludeResurectable;
	Parms.bIncludeDisconnected = bIncludeDisconnected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSquadMembers != nullptr)
		*OutSquadMembers = std::move(Parms.OutSquadMembers);
}

}

