#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VendettaRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum VendettaRuntime.EVendettaHuntedStatus
// NumValues: 0x0004
enum class EVendettaHuntedStatus : uint8
{
	NotHunted                                = 0,
	Hunted_Far                               = 1,
	Hunted_Near                              = 2,
	EVendettaHuntedStatus_MAX                = 3,
};

// ScriptStruct VendettaRuntime.WaxPickupSpawnRequestData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FWaxPickupSpawnRequestData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaxPickupSpawnRequestData) == 0x000008, "Wrong alignment on FWaxPickupSpawnRequestData");
static_assert(sizeof(FWaxPickupSpawnRequestData) == 0x000010, "Wrong size on FWaxPickupSpawnRequestData");

// ScriptStruct VendettaRuntime.VendettaEQSQueryData
// 0x0030 (0x0030 - 0x0000)
struct FVendettaEQSQueryData final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ParameterValue;                                    // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaEQSQueryData) == 0x000008, "Wrong alignment on FVendettaEQSQueryData");
static_assert(sizeof(FVendettaEQSQueryData) == 0x000030, "Wrong size on FVendettaEQSQueryData");
static_assert(offsetof(FVendettaEQSQueryData, ParameterName) == 0x000000, "Member 'FVendettaEQSQueryData::ParameterName' has a wrong offset!");
static_assert(offsetof(FVendettaEQSQueryData, ParameterValue) == 0x000008, "Member 'FVendettaEQSQueryData::ParameterValue' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaReplicatedUIMessage
// 0x0020 (0x0020 - 0x0000)
struct FVendettaReplicatedUIMessage final
{
public:
	int32                                         IndexToUpdate;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextToDisplay;                                     // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaReplicatedUIMessage) == 0x000008, "Wrong alignment on FVendettaReplicatedUIMessage");
static_assert(sizeof(FVendettaReplicatedUIMessage) == 0x000020, "Wrong size on FVendettaReplicatedUIMessage");
static_assert(offsetof(FVendettaReplicatedUIMessage, IndexToUpdate) == 0x000000, "Member 'FVendettaReplicatedUIMessage::IndexToUpdate' has a wrong offset!");
static_assert(offsetof(FVendettaReplicatedUIMessage, TextToDisplay) == 0x000008, "Member 'FVendettaReplicatedUIMessage::TextToDisplay' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaBountyPuckTargetData
// 0x0034 (0x0040 - 0x000C)
struct FVendettaBountyPuckTargetData final : public FFastArraySerializerItem
{
public:
	struct FGuid                                  TrackerGuid;                                       // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 TargetPlayerState;                                 // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 OwnerPlayerState;                                  // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusReward;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   Rarity;                                            // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBountyPuckWeaponComponent*             BountyPuckWeaponComponent;                         // 0x0038(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaBountyPuckTargetData) == 0x000008, "Wrong alignment on FVendettaBountyPuckTargetData");
static_assert(sizeof(FVendettaBountyPuckTargetData) == 0x000040, "Wrong size on FVendettaBountyPuckTargetData");
static_assert(offsetof(FVendettaBountyPuckTargetData, TrackerGuid) == 0x00000C, "Member 'FVendettaBountyPuckTargetData::TrackerGuid' has a wrong offset!");
static_assert(offsetof(FVendettaBountyPuckTargetData, TargetPlayerState) == 0x000020, "Member 'FVendettaBountyPuckTargetData::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(FVendettaBountyPuckTargetData, OwnerPlayerState) == 0x000028, "Member 'FVendettaBountyPuckTargetData::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(FVendettaBountyPuckTargetData, BonusReward) == 0x000030, "Member 'FVendettaBountyPuckTargetData::BonusReward' has a wrong offset!");
static_assert(offsetof(FVendettaBountyPuckTargetData, Rarity) == 0x000034, "Member 'FVendettaBountyPuckTargetData::Rarity' has a wrong offset!");
static_assert(offsetof(FVendettaBountyPuckTargetData, BountyPuckWeaponComponent) == 0x000038, "Member 'FVendettaBountyPuckTargetData::BountyPuckWeaponComponent' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaBountyPuckTargetingDataArray
// 0x0010 (0x0118 - 0x0108)
struct FVendettaBountyPuckTargetingDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FVendettaBountyPuckTargetData>  Entries;                                           // 0x0108(0x0010)(ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaBountyPuckTargetingDataArray) == 0x000008, "Wrong alignment on FVendettaBountyPuckTargetingDataArray");
static_assert(sizeof(FVendettaBountyPuckTargetingDataArray) == 0x000118, "Wrong size on FVendettaBountyPuckTargetingDataArray");
static_assert(offsetof(FVendettaBountyPuckTargetingDataArray, Entries) == 0x000108, "Member 'FVendettaBountyPuckTargetingDataArray::Entries' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaBountyPuckRarityData
// 0x0058 (0x0058 - 0x0000)
struct FVendettaBountyPuckRarityData final
{
public:
	struct FScalableFloat                         MinRewardValue;                                    // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxRewardValue;                                    // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortRarity                                   Rarity;                                            // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVendettaBountyPuckRarityData) == 0x000008, "Wrong alignment on FVendettaBountyPuckRarityData");
static_assert(sizeof(FVendettaBountyPuckRarityData) == 0x000058, "Wrong size on FVendettaBountyPuckRarityData");
static_assert(offsetof(FVendettaBountyPuckRarityData, MinRewardValue) == 0x000000, "Member 'FVendettaBountyPuckRarityData::MinRewardValue' has a wrong offset!");
static_assert(offsetof(FVendettaBountyPuckRarityData, MaxRewardValue) == 0x000028, "Member 'FVendettaBountyPuckRarityData::MaxRewardValue' has a wrong offset!");
static_assert(offsetof(FVendettaBountyPuckRarityData, Rarity) == 0x000050, "Member 'FVendettaBountyPuckRarityData::Rarity' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaPlayerData
// 0x0010 (0x0010 - 0x0000)
struct FVendettaPlayerData final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastPlayerSpawnTime;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVendettaPlayerData) == 0x000008, "Wrong alignment on FVendettaPlayerData");
static_assert(sizeof(FVendettaPlayerData) == 0x000010, "Wrong size on FVendettaPlayerData");
static_assert(offsetof(FVendettaPlayerData, PlayerState) == 0x000000, "Member 'FVendettaPlayerData::PlayerState' has a wrong offset!");
static_assert(offsetof(FVendettaPlayerData, LastPlayerSpawnTime) == 0x000008, "Member 'FVendettaPlayerData::LastPlayerSpawnTime' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaActiveBountyTargetData
// 0x0014 (0x0020 - 0x000C)
struct FVendettaActiveBountyTargetData final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 BountyOwningPlayerState;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BountyTargetLocation2D;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaActiveBountyTargetData) == 0x000008, "Wrong alignment on FVendettaActiveBountyTargetData");
static_assert(sizeof(FVendettaActiveBountyTargetData) == 0x000020, "Wrong size on FVendettaActiveBountyTargetData");
static_assert(offsetof(FVendettaActiveBountyTargetData, BountyOwningPlayerState) == 0x000010, "Member 'FVendettaActiveBountyTargetData::BountyOwningPlayerState' has a wrong offset!");
static_assert(offsetof(FVendettaActiveBountyTargetData, BountyTargetLocation2D) == 0x000018, "Member 'FVendettaActiveBountyTargetData::BountyTargetLocation2D' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaActiveBountyTargetDataArray
// 0x0010 (0x0118 - 0x0108)
struct FVendettaActiveBountyTargetDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FVendettaActiveBountyTargetData> Entries;                                          // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaActiveBountyTargetDataArray) == 0x000008, "Wrong alignment on FVendettaActiveBountyTargetDataArray");
static_assert(sizeof(FVendettaActiveBountyTargetDataArray) == 0x000118, "Wrong size on FVendettaActiveBountyTargetDataArray");
static_assert(offsetof(FVendettaActiveBountyTargetDataArray, Entries) == 0x000108, "Member 'FVendettaActiveBountyTargetDataArray::Entries' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaTargetMarkedStatusData
// 0x0002 (0x0002 - 0x0000)
struct FVendettaTargetMarkedStatusData final
{
public:
	bool                                          bIsTargetMarked;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsResultOfScan;                                   // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaTargetMarkedStatusData) == 0x000001, "Wrong alignment on FVendettaTargetMarkedStatusData");
static_assert(sizeof(FVendettaTargetMarkedStatusData) == 0x000002, "Wrong size on FVendettaTargetMarkedStatusData");
static_assert(offsetof(FVendettaTargetMarkedStatusData, bIsTargetMarked) == 0x000000, "Member 'FVendettaTargetMarkedStatusData::bIsTargetMarked' has a wrong offset!");
static_assert(offsetof(FVendettaTargetMarkedStatusData, bIsResultOfScan) == 0x000001, "Member 'FVendettaTargetMarkedStatusData::bIsResultOfScan' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaPlayerHuntedStatus
// 0x0014 (0x0020 - 0x000C)
struct FVendettaPlayerHuntedStatus final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVendettaHuntedStatus                         HuntedStatusReplicated;                            // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVendettaHuntedStatus                         MasterHunterHuntedStatusReplicated;                // 0x0019(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVendettaHuntedStatus                         HuntedStatusLocal;                                 // 0x001A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVendettaHuntedStatus                         MasterHunterHuntedStatusLocal;                     // 0x001B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVendettaPlayerHuntedStatus) == 0x000008, "Wrong alignment on FVendettaPlayerHuntedStatus");
static_assert(sizeof(FVendettaPlayerHuntedStatus) == 0x000020, "Wrong size on FVendettaPlayerHuntedStatus");
static_assert(offsetof(FVendettaPlayerHuntedStatus, PlayerState) == 0x000010, "Member 'FVendettaPlayerHuntedStatus::PlayerState' has a wrong offset!");
static_assert(offsetof(FVendettaPlayerHuntedStatus, HuntedStatusReplicated) == 0x000018, "Member 'FVendettaPlayerHuntedStatus::HuntedStatusReplicated' has a wrong offset!");
static_assert(offsetof(FVendettaPlayerHuntedStatus, MasterHunterHuntedStatusReplicated) == 0x000019, "Member 'FVendettaPlayerHuntedStatus::MasterHunterHuntedStatusReplicated' has a wrong offset!");
static_assert(offsetof(FVendettaPlayerHuntedStatus, HuntedStatusLocal) == 0x00001A, "Member 'FVendettaPlayerHuntedStatus::HuntedStatusLocal' has a wrong offset!");
static_assert(offsetof(FVendettaPlayerHuntedStatus, MasterHunterHuntedStatusLocal) == 0x00001B, "Member 'FVendettaPlayerHuntedStatus::MasterHunterHuntedStatusLocal' has a wrong offset!");

// ScriptStruct VendettaRuntime.VendettaPlayerHuntedStatusArray
// 0x0010 (0x0118 - 0x0108)
struct FVendettaPlayerHuntedStatusArray final : public FFastArraySerializer
{
public:
	TArray<struct FVendettaPlayerHuntedStatus>    Entries;                                           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendettaPlayerHuntedStatusArray) == 0x000008, "Wrong alignment on FVendettaPlayerHuntedStatusArray");
static_assert(sizeof(FVendettaPlayerHuntedStatusArray) == 0x000118, "Wrong size on FVendettaPlayerHuntedStatusArray");
static_assert(offsetof(FVendettaPlayerHuntedStatusArray, Entries) == 0x000108, "Member 'FVendettaPlayerHuntedStatusArray::Entries' has a wrong offset!");

}

