#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Petrol_Pickup

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BGA_HeldObject_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Petrol_Pickup.BGA_Petrol_Pickup_C
// 0x0370 (0x0D10 - 0x09A0)
class ABGA_Petrol_Pickup_C final : public ABGA_HeldObject_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_Petrol_Pickup_C;                // 0x09A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortItemEntryComponent*                FortItemEntry;                                     // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PetrolCan;                                         // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldExplode;                                     // 0x09D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_9D1[0x7];                                      // 0x09D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ExplodeDamageGE;                                   // 0x09D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortPawn*                              ExplodeInstigator;                                 // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TargetedActors;                                    // 0x09F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 GE_Explode;                                        // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Explode;                                        // 0x0A08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectArray;                                       // 0x0A10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FScalableFloat                         SpawnedProjectileMinSpeed;                         // 0x0A20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SpawnedProjectileMaxSpeed;                         // 0x0A48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ConeHalfAngleInDegrees;                            // 0x0A70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 CurieBGAtoSpawn;                                   // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CurieFireballsToSpawn;                             // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FireBallsToSpawn;                                  // 0x0AA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortWorldItemDefinition*               WeaponItemDefinition;                              // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPickup*                            WeaponPickupToGrant;                               // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             LastHit;                                           // 0x0AE0(0x008C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_B6C[0x4];                                      // 0x0B6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FuseTimerHandle;                                   // 0x0B70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FuseMinDuration;                                   // 0x0B78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         FuseMaxDuration;                                   // 0x0BA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGuid                                  HeldItemGUID;                                      // 0x0BC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortInventoryOwnerInterface> HeldItemInventoryInterface;                 // 0x0BD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAttachedToWeapon;                                // 0x0BE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dropped;                                           // 0x0BE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BEA[0x2];                                      // 0x0BEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_OnFire;                                         // 0x0BEC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF4[0x4];                                      // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ExplosionRadius;                                   // 0x0BF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleDamage;                                     // 0x0C20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortWeapon*                            WeaponAttachedTo;                                  // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Refuel;                                         // 0x0C50(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      SpawnCollisionCheck_ObjectTypes;                   // 0x0C58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Max_Spawn_Z;                                       // 0x0C68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnCollisionBlocked;                             // 0x0C6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6D[0x3];                                      // 0x0C6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VelocityAfterVehicleOverlap;                       // 0x0C70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7C[0x4];                                      // 0x0C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HotfixExplodeVehicleImpulse;                       // 0x0C80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HotfixExplodeSpinThrust;                           // 0x0CA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_ExplodePlayerDamage;                            // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeVehicleDamage;                           // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FuseLit;                                           // 0x0CE0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE1[0x3];                                      // 0x0CE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeedOfNoStickBounce;                           // 0x0CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FailedInteractSound;                               // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_FailedInteract_InventoryIsFull;                // 0x0CF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BGA_Petrol_Pickup(int32 EntryPoint);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnCurieElementInteractBegun_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void OnCurieElementInteract_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void BndEvt__FortProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void ReceiveBeginPlay();
	void Refuel(int32 FuelToAdd);
	void _ServerOnly_HideAndDestroy();
	void HideAndDestroy();
	void DropHeldItem();
	void SetHeldItemInfo(TScriptInterface<class IFortInventoryOwnerInterface> InventoryInterface, const struct FGuid& Guid, class AFortWeapon* WeaponAttachedTo_0);
	void ExplodeAndDie();
	void SpawnFireBallsExplodeAndDie();
	void SetFuseAndDrop();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void SpawnCurieFireballs(class AFortPawn* ExplodeInstigator_0);
	void ReceiveDestroyed();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void OnRep_ShouldExplode();
	void OnRep_LastHit();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void CalcVehicleImpulse(class AActor* Vehicle, float Magnitude, struct FVector* Vector);
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn);

	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Petrol_Pickup_C">();
	}
	static class ABGA_Petrol_Pickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Petrol_Pickup_C>();
	}
};
static_assert(alignof(ABGA_Petrol_Pickup_C) == 0x000010, "Wrong alignment on ABGA_Petrol_Pickup_C");
static_assert(sizeof(ABGA_Petrol_Pickup_C) == 0x000D10, "Wrong size on ABGA_Petrol_Pickup_C");
static_assert(offsetof(ABGA_Petrol_Pickup_C, UberGraphFrame_BGA_Petrol_Pickup_C) == 0x0009A0, "Member 'ABGA_Petrol_Pickup_C::UberGraphFrame_BGA_Petrol_Pickup_C' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FortItemEntry) == 0x0009A8, "Member 'ABGA_Petrol_Pickup_C::FortItemEntry' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, PetrolCan) == 0x0009B0, "Member 'ABGA_Petrol_Pickup_C::PetrolCan' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Sphere) == 0x0009B8, "Member 'ABGA_Petrol_Pickup_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, PlayerPawn) == 0x0009C0, "Member 'ABGA_Petrol_Pickup_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, PlayerController) == 0x0009C8, "Member 'ABGA_Petrol_Pickup_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ShouldExplode) == 0x0009D0, "Member 'ABGA_Petrol_Pickup_C::ShouldExplode' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ExplodeDamageGE) == 0x0009D8, "Member 'ABGA_Petrol_Pickup_C::ExplodeDamageGE' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ExplodeInstigator) == 0x0009E8, "Member 'ABGA_Petrol_Pickup_C::ExplodeInstigator' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, TargetedActors) == 0x0009F0, "Member 'ABGA_Petrol_Pickup_C::TargetedActors' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GE_Explode) == 0x000A00, "Member 'ABGA_Petrol_Pickup_C::GE_Explode' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GC_Explode) == 0x000A08, "Member 'ABGA_Petrol_Pickup_C::GC_Explode' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ObjectArray) == 0x000A10, "Member 'ABGA_Petrol_Pickup_C::ObjectArray' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnedProjectileMinSpeed) == 0x000A20, "Member 'ABGA_Petrol_Pickup_C::SpawnedProjectileMinSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnedProjectileMaxSpeed) == 0x000A48, "Member 'ABGA_Petrol_Pickup_C::SpawnedProjectileMaxSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ConeHalfAngleInDegrees) == 0x000A70, "Member 'ABGA_Petrol_Pickup_C::ConeHalfAngleInDegrees' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, CurieBGAtoSpawn) == 0x000A98, "Member 'ABGA_Petrol_Pickup_C::CurieBGAtoSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, CurieFireballsToSpawn) == 0x000AA0, "Member 'ABGA_Petrol_Pickup_C::CurieFireballsToSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FireBallsToSpawn) == 0x000AA8, "Member 'ABGA_Petrol_Pickup_C::FireBallsToSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, WeaponItemDefinition) == 0x000AD0, "Member 'ABGA_Petrol_Pickup_C::WeaponItemDefinition' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, WeaponPickupToGrant) == 0x000AD8, "Member 'ABGA_Petrol_Pickup_C::WeaponPickupToGrant' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, LastHit) == 0x000AE0, "Member 'ABGA_Petrol_Pickup_C::LastHit' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseTimerHandle) == 0x000B70, "Member 'ABGA_Petrol_Pickup_C::FuseTimerHandle' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseMinDuration) == 0x000B78, "Member 'ABGA_Petrol_Pickup_C::FuseMinDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseMaxDuration) == 0x000BA0, "Member 'ABGA_Petrol_Pickup_C::FuseMaxDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HeldItemGUID) == 0x000BC8, "Member 'ABGA_Petrol_Pickup_C::HeldItemGUID' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HeldItemInventoryInterface) == 0x000BD8, "Member 'ABGA_Petrol_Pickup_C::HeldItemInventoryInterface' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, IsAttachedToWeapon) == 0x000BE8, "Member 'ABGA_Petrol_Pickup_C::IsAttachedToWeapon' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Dropped) == 0x000BE9, "Member 'ABGA_Petrol_Pickup_C::Dropped' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GC_OnFire) == 0x000BEC, "Member 'ABGA_Petrol_Pickup_C::GC_OnFire' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ExplosionRadius) == 0x000BF8, "Member 'ABGA_Petrol_Pickup_C::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, VehicleDamage) == 0x000C20, "Member 'ABGA_Petrol_Pickup_C::VehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, WeaponAttachedTo) == 0x000C48, "Member 'ABGA_Petrol_Pickup_C::WeaponAttachedTo' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GC_Refuel) == 0x000C50, "Member 'ABGA_Petrol_Pickup_C::GC_Refuel' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnCollisionCheck_ObjectTypes) == 0x000C58, "Member 'ABGA_Petrol_Pickup_C::SpawnCollisionCheck_ObjectTypes' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Max_Spawn_Z) == 0x000C68, "Member 'ABGA_Petrol_Pickup_C::Max_Spawn_Z' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnCollisionBlocked) == 0x000C6C, "Member 'ABGA_Petrol_Pickup_C::SpawnCollisionBlocked' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, VelocityAfterVehicleOverlap) == 0x000C70, "Member 'ABGA_Petrol_Pickup_C::VelocityAfterVehicleOverlap' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HotfixExplodeVehicleImpulse) == 0x000C80, "Member 'ABGA_Petrol_Pickup_C::HotfixExplodeVehicleImpulse' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HotfixExplodeSpinThrust) == 0x000CA8, "Member 'ABGA_Petrol_Pickup_C::HotfixExplodeSpinThrust' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GE_ExplodePlayerDamage) == 0x000CD0, "Member 'ABGA_Petrol_Pickup_C::GE_ExplodePlayerDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GE_ExplodeVehicleDamage) == 0x000CD8, "Member 'ABGA_Petrol_Pickup_C::GE_ExplodeVehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseLit) == 0x000CE0, "Member 'ABGA_Petrol_Pickup_C::FuseLit' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, MinSpeedOfNoStickBounce) == 0x000CE4, "Member 'ABGA_Petrol_Pickup_C::MinSpeedOfNoStickBounce' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FailedInteractSound) == 0x000CE8, "Member 'ABGA_Petrol_Pickup_C::FailedInteractSound' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Tag_FailedInteract_InventoryIsFull) == 0x000CF0, "Member 'ABGA_Petrol_Pickup_C::Tag_FailedInteract_InventoryIsFull' has a wrong offset!");

}

