#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotorcycleRuntime

#include "Basic.hpp"

#include "MotorcycleRuntime_classes.hpp"
#include "MotorcycleRuntime_parameters.hpp"


namespace SDK
{

// Function MotorcycleRuntime.FortMotorcycleVehicleAnimInstance.CollectConditionsFromDriver
// (Final, Native, Public, BlueprintCallable)

void UFortMotorcycleVehicleAnimInstance::CollectConditionsFromDriver()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CollectConditionsFromDriver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.AnimNotify_JumpEntered
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::AnimNotify_JumpEntered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AnimNotify_JumpEntered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.CalculateNoiseAlpha
// (Final, Native, Public, BlueprintCallable)

void UFortPlayerAnimInstance_MotorcycleRider::CalculateNoiseAlpha()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateNoiseAlpha");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.CollapsedAimYawSmoothed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerAnimInstance_MotorcycleRider::CollapsedAimYawSmoothed(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CollapsedAimYawSmoothed");

	Params::FortPlayerAnimInstance_MotorcycleRider_CollapsedAimYawSmoothed Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleCancelChargingJump
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::HandleCancelChargingJump()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleCancelChargingJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleChargingJump
// (Final, Native, Public)
// Parameters:
// float                                   InJumpChargeFactor                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerAnimInstance_MotorcycleRider::HandleChargingJump(const float InJumpChargeFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleChargingJump");

	Params::FortPlayerAnimInstance_MotorcycleRider_HandleChargingJump Parms{};

	Parms.InJumpChargeFactor = InJumpChargeFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleFinishAirTrick
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::HandleFinishAirTrick()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleFinishAirTrick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleJump
// (Final, Native, Public)
// Parameters:
// float                                   InJumpChargeFactor                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerAnimInstance_MotorcycleRider::HandleJump(const float InJumpChargeFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleJump");

	Params::FortPlayerAnimInstance_MotorcycleRider_HandleJump Parms{};

	Parms.InJumpChargeFactor = InJumpChargeFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleReleaseStoppie
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::HandleReleaseStoppie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleReleaseStoppie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleReleaseWheelie
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::HandleReleaseWheelie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleReleaseWheelie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleStartAirTrick
// (Final, Native, Public)
// Parameters:
// EFortMotorcycleAirTrickType             TrickType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerAnimInstance_MotorcycleRider::HandleStartAirTrick(const EFortMotorcycleAirTrickType TrickType)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleStartAirTrick");

	Params::FortPlayerAnimInstance_MotorcycleRider_HandleStartAirTrick Parms{};

	Parms.TrickType = TrickType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleStartChargingJump
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::HandleStartChargingJump()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleStartChargingJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleStartStoppie
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::HandleStartStoppie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleStartStoppie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider.HandleStartWheelie
// (Final, Native, Public)

void UFortPlayerAnimInstance_MotorcycleRider::HandleStartWheelie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleStartWheelie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnCancelChargingJump
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnCancelChargingJump()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnCancelChargingJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnChargingJump
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   JumpChargeFactor                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMotorcycleVehicle::BP_OnChargingJump(const float JumpChargeFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnChargingJump");

	Params::FortMotorcycleVehicle_BP_OnChargingJump Parms{};

	Parms.JumpChargeFactor = JumpChargeFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnFailWheelie
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnFailWheelie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnFailWheelie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnFinishAirTrick
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnFinishAirTrick()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnFinishAirTrick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnJump
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   JumpChargeFactor                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMotorcycleVehicle::BP_OnJump(const float JumpChargeFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnJump");

	Params::FortMotorcycleVehicle_BP_OnJump Parms{};

	Parms.JumpChargeFactor = JumpChargeFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnLandStoppie
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnLandStoppie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnLandStoppie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnLandWheelie
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnLandWheelie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnLandWheelie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnReleaseStoppie
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnReleaseStoppie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnReleaseStoppie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnReleaseWheelie
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnReleaseWheelie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnReleaseWheelie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnStartAirTrick
// (Event, Public, BlueprintEvent)
// Parameters:
// EFortMotorcycleAirTrickType             TrickType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMotorcycleVehicle::BP_OnStartAirTrick(const EFortMotorcycleAirTrickType TrickType)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStartAirTrick");

	Params::FortMotorcycleVehicle_BP_OnStartAirTrick Parms{};

	Parms.TrickType = TrickType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnStartChargingJump
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnStartChargingJump()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStartChargingJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnStartStoppie
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnStartStoppie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStartStoppie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.BP_OnStartWheelie
// (Event, Public, BlueprintEvent)

void AFortMotorcycleVehicle::BP_OnStartWheelie()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStartWheelie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.ChangeBoostAttackState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsBoostAttacking                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMotorcycleVehicle::ChangeBoostAttackState(const bool bNewIsBoostAttacking)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ChangeBoostAttackState");

	Params::FortMotorcycleVehicle_ChangeBoostAttackState Parms{};

	Parms.bNewIsBoostAttacking = bNewIsBoostAttacking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.OnInventoryModeToggled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsInInventoryMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMotorcycleVehicle::OnInventoryModeToggled(bool bIsInInventoryMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnInventoryModeToggled");

	Params::FortMotorcycleVehicle_OnInventoryModeToggled Parms{};

	Parms.bIsInInventoryMode = bIsInInventoryMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.OnPlayerWeaponChanged
// (Final, Native, Public)
// Parameters:
// class AFortWeapon*                      InNewWeapon                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      InPrevWeapon                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMotorcycleVehicle::OnPlayerWeaponChanged(class AFortWeapon* InNewWeapon, class AFortWeapon* InPrevWeapon)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPlayerWeaponChanged");

	Params::FortMotorcycleVehicle_OnPlayerWeaponChanged Parms{};

	Parms.InNewWeapon = InNewWeapon;
	Parms.InPrevWeapon = InPrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.OnRep_IsBoostAttacking
// (Final, Native, Protected)

void AFortMotorcycleVehicle::OnRep_IsBoostAttacking()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_IsBoostAttacking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.ServerEjectAllPlayers
// (Net, NetReliable, Native, Event, Public, NetServer)

void AFortMotorcycleVehicle::ServerEjectAllPlayers()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerEjectAllPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.GetAverageSpringNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AFortMotorcycleVehicle::GetAverageSpringNormal() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAverageSpringNormal");

	Params::FortMotorcycleVehicle_GetAverageSpringNormal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.GetLeanAngleDegrees
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFortMotorcycleVehicle::GetLeanAngleDegrees() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLeanAngleDegrees");

	Params::FortMotorcycleVehicle_GetLeanAngleDegrees Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.GetSurfaceTypeVehicleOn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPhysicalSurface                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPhysicalSurface AFortMotorcycleVehicle::GetSurfaceTypeVehicleOn() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSurfaceTypeVehicleOn");

	Params::FortMotorcycleVehicle_GetSurfaceTypeVehicleOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.IsInInventoryMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortMotorcycleVehicle::IsInInventoryMode() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsInInventoryMode");

	Params::FortMotorcycleVehicle_IsInInventoryMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.IsPowerSliding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortMotorcycleVehicle::IsPowerSliding() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPowerSliding");

	Params::FortMotorcycleVehicle_IsPowerSliding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MotorcycleRuntime.FortMotorcycleVehicle.IsSuperSliding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortMotorcycleVehicle::IsSuperSliding() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSuperSliding");

	Params::FortMotorcycleVehicle_IsSuperSliding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

