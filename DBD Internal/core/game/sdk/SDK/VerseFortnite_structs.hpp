#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseFortnite

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum VerseFortnite.EPlayerSettingStateInternal
// NumValues: 0x0004
enum class EPlayerSettingStateInternal : uint8
{
	PlayerUseDefault                         = 0,
	PlayerIsAllowed                          = 1,
	PlayerIsDisallowed                       = 2,
	EPlayerSettingStateInternal_MAX          = 3,
};

// ScriptStruct VerseFortnite.ActiveSoundInfo
// 0x0008 (0x0008 - 0x0000)
struct FActiveSoundInfo final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveSoundInfo) == 0x000004, "Wrong alignment on FActiveSoundInfo");
static_assert(sizeof(FActiveSoundInfo) == 0x000008, "Wrong size on FActiveSoundInfo");
static_assert(offsetof(FActiveSoundInfo, bActive) == 0x000000, "Member 'FActiveSoundInfo::bActive' has a wrong offset!");
static_assert(offsetof(FActiveSoundInfo, StartTime) == 0x000004, "Member 'FActiveSoundInfo::StartTime' has a wrong offset!");

// ScriptStruct VerseFortnite.DatastoreEntry
// 0x001C (0x0028 - 0x000C)
struct FDatastoreEntry final : public FFastArraySerializerItem
{
public:
	class FName                                   KeyName;                                           // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ValueData;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatastoreEntry) == 0x000008, "Wrong alignment on FDatastoreEntry");
static_assert(sizeof(FDatastoreEntry) == 0x000028, "Wrong size on FDatastoreEntry");
static_assert(offsetof(FDatastoreEntry, KeyName) == 0x00000C, "Member 'FDatastoreEntry::KeyName' has a wrong offset!");
static_assert(offsetof(FDatastoreEntry, ValueData) == 0x000018, "Member 'FDatastoreEntry::ValueData' has a wrong offset!");

// ScriptStruct VerseFortnite.DatastoreState
// 0x0020 (0x0128 - 0x0108)
struct FDatastoreState final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDatastoreEntry>                EntriesArray;                                      // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDatastoreComponentBase*                OwningComponent;                                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDatastoreState) == 0x000008, "Wrong alignment on FDatastoreState");
static_assert(sizeof(FDatastoreState) == 0x000128, "Wrong size on FDatastoreState");
static_assert(offsetof(FDatastoreState, EntriesArray) == 0x000110, "Member 'FDatastoreState::EntriesArray' has a wrong offset!");
static_assert(offsetof(FDatastoreState, OwningComponent) == 0x000120, "Member 'FDatastoreState::OwningComponent' has a wrong offset!");

// ScriptStruct VerseFortnite.PlayerScore
// 0x0038 (0x0038 - 0x0000)
struct FPlayerScore final
{
public:
	struct FUniqueNetIdRepl                       Player;                                            // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Eliminations;                                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Wins;                                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Points;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerScore) == 0x000008, "Wrong alignment on FPlayerScore");
static_assert(sizeof(FPlayerScore) == 0x000038, "Wrong size on FPlayerScore");
static_assert(offsetof(FPlayerScore, Player) == 0x000000, "Member 'FPlayerScore::Player' has a wrong offset!");
static_assert(offsetof(FPlayerScore, Eliminations) == 0x000028, "Member 'FPlayerScore::Eliminations' has a wrong offset!");
static_assert(offsetof(FPlayerScore, Wins) == 0x00002C, "Member 'FPlayerScore::Wins' has a wrong offset!");
static_assert(offsetof(FPlayerScore, Points) == 0x000030, "Member 'FPlayerScore::Points' has a wrong offset!");

// ScriptStruct VerseFortnite.VMessage
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FVMessage final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVMessage) == 0x000008, "Wrong alignment on FVMessage");
static_assert(sizeof(FVMessage) == 0x000018, "Wrong size on FVMessage");

// ScriptStruct VerseFortnite.VerseActionMapping
// 0x002C (0x0038 - 0x000C)
struct FVerseActionMapping final : public FFastArraySerializerItem
{
public:
	class FName                                   Name;                                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UIText;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Keys;                                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerseActionMapping) == 0x000008, "Wrong alignment on FVerseActionMapping");
static_assert(sizeof(FVerseActionMapping) == 0x000038, "Wrong size on FVerseActionMapping");
static_assert(offsetof(FVerseActionMapping, Name) == 0x00000C, "Member 'FVerseActionMapping::Name' has a wrong offset!");
static_assert(offsetof(FVerseActionMapping, UIText) == 0x000018, "Member 'FVerseActionMapping::UIText' has a wrong offset!");
static_assert(offsetof(FVerseActionMapping, Keys) == 0x000028, "Member 'FVerseActionMapping::Keys' has a wrong offset!");

// ScriptStruct VerseFortnite.VerseActionMappingArray
// 0x0018 (0x0120 - 0x0108)
struct FVerseActionMappingArray final : public FFastArraySerializer
{
public:
	TArray<struct FVerseActionMapping>            ActionMappingArray;                                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVerseFortniteInputComponentBase*       OwningComponent;                                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVerseActionMappingArray) == 0x000008, "Wrong alignment on FVerseActionMappingArray");
static_assert(sizeof(FVerseActionMappingArray) == 0x000120, "Wrong size on FVerseActionMappingArray");
static_assert(offsetof(FVerseActionMappingArray, ActionMappingArray) == 0x000108, "Member 'FVerseActionMappingArray::ActionMappingArray' has a wrong offset!");
static_assert(offsetof(FVerseActionMappingArray, OwningComponent) == 0x000118, "Member 'FVerseActionMappingArray::OwningComponent' has a wrong offset!");

}

