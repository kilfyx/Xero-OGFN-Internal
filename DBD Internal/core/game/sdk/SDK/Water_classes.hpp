#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Water

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Water_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "Niagara_classes.hpp"


namespace SDK
{

// Class Water.OceanCollisionComponent
// 0x0020 (0x0470 - 0x0450)
class UOceanCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_450[0x20];                                     // 0x0450(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanCollisionComponent">();
	}
	static class UOceanCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanCollisionComponent>();
	}
};
static_assert(alignof(UOceanCollisionComponent) == 0x000010, "Wrong alignment on UOceanCollisionComponent");
static_assert(sizeof(UOceanCollisionComponent) == 0x000470, "Wrong size on UOceanCollisionComponent");
static_assert(offsetof(UOceanCollisionComponent, CachedBodySetup) == 0x000448, "Member 'UOceanCollisionComponent::CachedBodySetup' has a wrong offset!");

// Class Water.LakeCollisionComponent
// 0x0010 (0x0460 - 0x0450)
class ULakeCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                BoxExtent;                                         // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeCollisionComponent">();
	}
	static class ULakeCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeCollisionComponent>();
	}
};
static_assert(alignof(ULakeCollisionComponent) == 0x000010, "Wrong alignment on ULakeCollisionComponent");
static_assert(sizeof(ULakeCollisionComponent) == 0x000460, "Wrong size on ULakeCollisionComponent");
static_assert(offsetof(ULakeCollisionComponent, CachedBodySetup) == 0x000448, "Member 'ULakeCollisionComponent::CachedBodySetup' has a wrong offset!");
static_assert(offsetof(ULakeCollisionComponent, BoxExtent) == 0x000450, "Member 'ULakeCollisionComponent::BoxExtent' has a wrong offset!");

// Class Water.BuoyancyComponent
// 0x0128 (0x01D8 - 0x00B0)
class UBuoyancyComponent : public UActorComponent
{
public:
	TArray<struct FSphericalPontoon>              Pontoons;                                          // 0x00B0(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSphericalPontoon& Pontoon)> OnEnteredWaterDelegate;  // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSphericalPontoon& Pontoon)> OnExitedWaterDelegate;   // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FBuoyancyData                          BuoyancyData;                                      // 0x00E0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class AWaterBody*>                     CurrentWaterBodies;                                // 0x0130(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    SimulatingComponent;                               // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_148[0x90];                                     // 0x0148(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetLastWaterSurfaceInfo(struct FVector* OutWaterPlaneLocation, struct FVector* OutWaterPlaneNormal, struct FVector* OutWaterSurfacePosition, float* OutWaterDepth, int32* OutWaterBodyIdx, struct FVector* OutWaterVelocity);
	void OnPontoonEnteredWater(const struct FSphericalPontoon& Pontoon);
	void OnPontoonExitedWater(const struct FSphericalPontoon& Pontoon);

	bool IsInWaterBody() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyComponent">();
	}
	static class UBuoyancyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyancyComponent>();
	}
};
static_assert(alignof(UBuoyancyComponent) == 0x000008, "Wrong alignment on UBuoyancyComponent");
static_assert(sizeof(UBuoyancyComponent) == 0x0001D8, "Wrong size on UBuoyancyComponent");
static_assert(offsetof(UBuoyancyComponent, Pontoons) == 0x0000B0, "Member 'UBuoyancyComponent::Pontoons' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, OnEnteredWaterDelegate) == 0x0000C0, "Member 'UBuoyancyComponent::OnEnteredWaterDelegate' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, OnExitedWaterDelegate) == 0x0000D0, "Member 'UBuoyancyComponent::OnExitedWaterDelegate' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, BuoyancyData) == 0x0000E0, "Member 'UBuoyancyComponent::BuoyancyData' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, CurrentWaterBodies) == 0x000130, "Member 'UBuoyancyComponent::CurrentWaterBodies' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, SimulatingComponent) == 0x000140, "Member 'UBuoyancyComponent::SimulatingComponent' has a wrong offset!");

// Class Water.BuoyancyManager
// 0x00B0 (0x02D0 - 0x0220)
class ABuoyancyManager final : public AActor
{
public:
	uint8                                         Pad_220[0x50];                                     // 0x0220(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBuoyancyComponent*>             BuoyancyComponents;                                // 0x0270(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x50];                                     // 0x0280(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool GetBuoyancyComponentManager(const class UObject* WorldContextObject, class ABuoyancyManager** Manager);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyManager">();
	}
	static class ABuoyancyManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuoyancyManager>();
	}
};
static_assert(alignof(ABuoyancyManager) == 0x000008, "Wrong alignment on ABuoyancyManager");
static_assert(sizeof(ABuoyancyManager) == 0x0002D0, "Wrong size on ABuoyancyManager");
static_assert(offsetof(ABuoyancyManager, BuoyancyComponents) == 0x000270, "Member 'ABuoyancyManager::BuoyancyComponents' has a wrong offset!");

// Class Water.EnvQueryTest_InsideWaterBody
// 0x0008 (0x0200 - 0x01F8)
class UEnvQueryTest_InsideWaterBody final : public UEnvQueryTest
{
public:
	bool                                          bIncludeWaves;                                     // 0x01F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimpleWaves;                                      // 0x01F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreExclusionVolumes;                           // 0x01FA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB[0x5];                                      // 0x01FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_InsideWaterBody">();
	}
	static class UEnvQueryTest_InsideWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_InsideWaterBody>();
	}
};
static_assert(alignof(UEnvQueryTest_InsideWaterBody) == 0x000008, "Wrong alignment on UEnvQueryTest_InsideWaterBody");
static_assert(sizeof(UEnvQueryTest_InsideWaterBody) == 0x000200, "Wrong size on UEnvQueryTest_InsideWaterBody");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bIncludeWaves) == 0x0001F8, "Member 'UEnvQueryTest_InsideWaterBody::bIncludeWaves' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bSimpleWaves) == 0x0001F9, "Member 'UEnvQueryTest_InsideWaterBody::bSimpleWaves' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bIgnoreExclusionVolumes) == 0x0001FA, "Member 'UEnvQueryTest_InsideWaterBody::bIgnoreExclusionVolumes' has a wrong offset!");

// Class Water.NiagaraDataInterfaceWater
// 0x0008 (0x0040 - 0x0038)
class UNiagaraDataInterfaceWater final : public UNiagaraDataInterface
{
public:
	class AWaterBody*                             SourceBody;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceWater">();
	}
	static class UNiagaraDataInterfaceWater* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceWater>();
	}
};
static_assert(alignof(UNiagaraDataInterfaceWater) == 0x000008, "Wrong alignment on UNiagaraDataInterfaceWater");
static_assert(sizeof(UNiagaraDataInterfaceWater) == 0x000040, "Wrong size on UNiagaraDataInterfaceWater");
static_assert(offsetof(UNiagaraDataInterfaceWater, SourceBody) == 0x000038, "Member 'UNiagaraDataInterfaceWater::SourceBody' has a wrong offset!");

// Class Water.NiagaraWaterFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNiagaraWaterFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetWaterBody(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, class AWaterBody* WaterBody);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraWaterFunctionLibrary">();
	}
	static class UNiagaraWaterFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraWaterFunctionLibrary>();
	}
};
static_assert(alignof(UNiagaraWaterFunctionLibrary) == 0x000008, "Wrong alignment on UNiagaraWaterFunctionLibrary");
static_assert(sizeof(UNiagaraWaterFunctionLibrary) == 0x000028, "Wrong size on UNiagaraWaterFunctionLibrary");

// Class Water.OceanBoxCollisionComponent
// 0x0000 (0x0470 - 0x0470)
class UOceanBoxCollisionComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanBoxCollisionComponent">();
	}
	static class UOceanBoxCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanBoxCollisionComponent>();
	}
};
static_assert(alignof(UOceanBoxCollisionComponent) == 0x000010, "Wrong alignment on UOceanBoxCollisionComponent");
static_assert(sizeof(UOceanBoxCollisionComponent) == 0x000470, "Wrong size on UOceanBoxCollisionComponent");

// Class Water.WaterBodyGenerator
// 0x0000 (0x0028 - 0x0028)
class UWaterBodyGenerator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyGenerator">();
	}
	static class UWaterBodyGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyGenerator>();
	}
};
static_assert(alignof(UWaterBodyGenerator) == 0x000008, "Wrong alignment on UWaterBodyGenerator");
static_assert(sizeof(UWaterBodyGenerator) == 0x000028, "Wrong size on UWaterBodyGenerator");

// Class Water.RiverGenerator
// 0x0038 (0x0060 - 0x0028)
class URiverGenerator final : public UWaterBodyGenerator
{
public:
	TArray<class USplineMeshComponent*>           SplineMeshComponents;                              // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UStaticMesh>             RiverMesh;                                         // 0x0038(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RiverGenerator">();
	}
	static class URiverGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiverGenerator>();
	}
};
static_assert(alignof(URiverGenerator) == 0x000008, "Wrong alignment on URiverGenerator");
static_assert(sizeof(URiverGenerator) == 0x000060, "Wrong size on URiverGenerator");
static_assert(offsetof(URiverGenerator, SplineMeshComponents) == 0x000028, "Member 'URiverGenerator::SplineMeshComponents' has a wrong offset!");
static_assert(offsetof(URiverGenerator, RiverMesh) == 0x000038, "Member 'URiverGenerator::RiverMesh' has a wrong offset!");

// Class Water.LakeGenerator
// 0x0040 (0x0068 - 0x0028)
class ULakeGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   LakeMeshComp;                                      // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                          LakeCollisionComp;                                 // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULakeCollisionComponent*                LakeCollision;                                     // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UStaticMesh>             LakeMesh;                                          // 0x0040(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeGenerator">();
	}
	static class ULakeGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeGenerator>();
	}
};
static_assert(alignof(ULakeGenerator) == 0x000008, "Wrong alignment on ULakeGenerator");
static_assert(sizeof(ULakeGenerator) == 0x000068, "Wrong size on ULakeGenerator");
static_assert(offsetof(ULakeGenerator, LakeMeshComp) == 0x000028, "Member 'ULakeGenerator::LakeMeshComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollisionComp) == 0x000030, "Member 'ULakeGenerator::LakeCollisionComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollision) == 0x000038, "Member 'ULakeGenerator::LakeCollision' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeMesh) == 0x000040, "Member 'ULakeGenerator::LakeMesh' has a wrong offset!");

// Class Water.OceanGenerator
// 0x0020 (0x0048 - 0x0028)
class UOceanGenerator final : public UWaterBodyGenerator
{
public:
	TArray<class UOceanBoxCollisionComponent*>    CollisionBoxes;                                    // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UOceanCollisionComponent*>       CollisionHullSets;                                 // 0x0038(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanGenerator">();
	}
	static class UOceanGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanGenerator>();
	}
};
static_assert(alignof(UOceanGenerator) == 0x000008, "Wrong alignment on UOceanGenerator");
static_assert(sizeof(UOceanGenerator) == 0x000048, "Wrong size on UOceanGenerator");
static_assert(offsetof(UOceanGenerator, CollisionBoxes) == 0x000028, "Member 'UOceanGenerator::CollisionBoxes' has a wrong offset!");
static_assert(offsetof(UOceanGenerator, CollisionHullSets) == 0x000038, "Member 'UOceanGenerator::CollisionHullSets' has a wrong offset!");

// Class Water.CustomMeshGenerator
// 0x0008 (0x0030 - 0x0028)
class UCustomMeshGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMeshGenerator">();
	}
	static class UCustomMeshGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMeshGenerator>();
	}
};
static_assert(alignof(UCustomMeshGenerator) == 0x000008, "Wrong alignment on UCustomMeshGenerator");
static_assert(sizeof(UCustomMeshGenerator) == 0x000030, "Wrong size on UCustomMeshGenerator");
static_assert(offsetof(UCustomMeshGenerator, MeshComp) == 0x000028, "Member 'UCustomMeshGenerator::MeshComp' has a wrong offset!");

// Class Water.WaterBody
// 0x0BF0 (0x0E10 - 0x0220)
class AWaterBody : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0228(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWaterWaveParams>               WaveParams;                                        // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveSpeedFactor;                                   // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetWaveMaskDepth;                               // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterBodyIndex;                                    // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveParamTextureOffset;                            // 0x024C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillCollisionUnderWaterBodiesForNavmesh;          // 0x0250(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0xF];                                      // 0x0251(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnderwaterPostProcessSettings         UnderwaterPostProcessSettings;                     // 0x0260(0x0570)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EWaterBodyType                                WaterBodyType;                                     // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D1[0x7];                                      // 0x07D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWaterCurveSettings                    CurveSettings;                                     // 0x07D8(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     WaterMaterial;                                     // 0x07F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     UnderwaterPostProcessMaterial;                     // 0x0800(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLandscape;                                 // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToOceanHeight;                                // 0x0809(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateCollisions;                               // 0x080A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideWaterMesh;                                // 0x080B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80C[0x4];                                      // 0x080C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            WaterMeshOverride;                                 // 0x0810(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     RiverToLakeTransitionMat;                          // 0x0818(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     RiverToOceanTransitionMat;                         // 0x0820(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OverlapMaterialPriority;                           // 0x0828(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWaveHeight;                                     // 0x082C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CollisionProfileName;                              // 0x0830(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                OceanCollisionExtents;                             // 0x0838(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_844[0x4];                                      // 0x0844(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterSplineComponent*                  SplineComp;                                        // 0x0848(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterBodyGenerator*                    Generator;                                         // 0x0850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterSplineMetadata*                   WaterSplineMetadata;                               // 0x0858(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               WaterMaterialInstance;                             // 0x0860(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               RiverToLakeTransitionMID;                          // 0x0868(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               RiverToOceanTransitionMID;                         // 0x0870(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               UnderwaterPostProcessMID;                          // 0x0878(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TLazyObjectPtr<class AWaterBodyIsland>> Islands;                                          // 0x0880(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TLazyObjectPtr<class AWaterBodyExclusionVolume>> ExclusionVolumes;                        // 0x0890(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALandscapeProxy>         Landscape;                                         // 0x08A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8A8[0x8];                                      // 0x08A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   CurrentPostProcessSettings;                        // 0x08B0(0x0550)(Transient, Protected, NativeAccessSpecifierProtected)
	float                                         OceanHeightOffset;                                 // 0x0E00(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanAffectNavigation;                              // 0x0E04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E05[0x3];                                      // 0x0E05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               WaterNavAreaClass;                                 // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMaterialInstanceDynamic* GetRiverToLakeTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetRiverToOceanTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetUnderwaterPostProcessMaterialInstance();
	class UMaterialInstanceDynamic* GetWaterMaterialInstance();
	void OnWaterBodyChanged(bool bShapeOrPositionChanged, bool bWeightmapSettingsChanged);
	void OnWaterBodyFinishedUpdating();

	TArray<class AWaterBodyExclusionVolume*> GetExclusionVolumes() const;
	TArray<class AWaterBodyIsland*> GetIslands() const;
	TArray<class UStaticMeshComponent*> GetWaterMeshComponents() const;
	class UWaterSplineComponent* GetWaterSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBody">();
	}
	static class AWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBody>();
	}
};
static_assert(alignof(AWaterBody) == 0x000010, "Wrong alignment on AWaterBody");
static_assert(sizeof(AWaterBody) == 0x000E10, "Wrong size on AWaterBody");
static_assert(offsetof(AWaterBody, PhysicalMaterial) == 0x000228, "Member 'AWaterBody::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaveParams) == 0x000230, "Member 'AWaterBody::WaveParams' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaveSpeedFactor) == 0x000240, "Member 'AWaterBody::WaveSpeedFactor' has a wrong offset!");
static_assert(offsetof(AWaterBody, TargetWaveMaskDepth) == 0x000244, "Member 'AWaterBody::TargetWaveMaskDepth' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyIndex) == 0x000248, "Member 'AWaterBody::WaterBodyIndex' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaveParamTextureOffset) == 0x00024C, "Member 'AWaterBody::WaveParamTextureOffset' has a wrong offset!");
static_assert(offsetof(AWaterBody, bFillCollisionUnderWaterBodiesForNavmesh) == 0x000250, "Member 'AWaterBody::bFillCollisionUnderWaterBodiesForNavmesh' has a wrong offset!");
static_assert(offsetof(AWaterBody, UnderwaterPostProcessSettings) == 0x000260, "Member 'AWaterBody::UnderwaterPostProcessSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyType) == 0x0007D0, "Member 'AWaterBody::WaterBodyType' has a wrong offset!");
static_assert(offsetof(AWaterBody, CurveSettings) == 0x0007D8, "Member 'AWaterBody::CurveSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMaterial) == 0x0007F8, "Member 'AWaterBody::WaterMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, UnderwaterPostProcessMaterial) == 0x000800, "Member 'AWaterBody::UnderwaterPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, bAffectsLandscape) == 0x000808, "Member 'AWaterBody::bAffectsLandscape' has a wrong offset!");
static_assert(offsetof(AWaterBody, bSnapToOceanHeight) == 0x000809, "Member 'AWaterBody::bSnapToOceanHeight' has a wrong offset!");
static_assert(offsetof(AWaterBody, bGenerateCollisions) == 0x00080A, "Member 'AWaterBody::bGenerateCollisions' has a wrong offset!");
static_assert(offsetof(AWaterBody, bOverrideWaterMesh) == 0x00080B, "Member 'AWaterBody::bOverrideWaterMesh' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMeshOverride) == 0x000810, "Member 'AWaterBody::WaterMeshOverride' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToLakeTransitionMat) == 0x000818, "Member 'AWaterBody::RiverToLakeTransitionMat' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToOceanTransitionMat) == 0x000820, "Member 'AWaterBody::RiverToOceanTransitionMat' has a wrong offset!");
static_assert(offsetof(AWaterBody, OverlapMaterialPriority) == 0x000828, "Member 'AWaterBody::OverlapMaterialPriority' has a wrong offset!");
static_assert(offsetof(AWaterBody, MaxWaveHeight) == 0x00082C, "Member 'AWaterBody::MaxWaveHeight' has a wrong offset!");
static_assert(offsetof(AWaterBody, CollisionProfileName) == 0x000830, "Member 'AWaterBody::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(AWaterBody, OceanCollisionExtents) == 0x000838, "Member 'AWaterBody::OceanCollisionExtents' has a wrong offset!");
static_assert(offsetof(AWaterBody, SplineComp) == 0x000848, "Member 'AWaterBody::SplineComp' has a wrong offset!");
static_assert(offsetof(AWaterBody, Generator) == 0x000850, "Member 'AWaterBody::Generator' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterSplineMetadata) == 0x000858, "Member 'AWaterBody::WaterSplineMetadata' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMaterialInstance) == 0x000860, "Member 'AWaterBody::WaterMaterialInstance' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToLakeTransitionMID) == 0x000868, "Member 'AWaterBody::RiverToLakeTransitionMID' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToOceanTransitionMID) == 0x000870, "Member 'AWaterBody::RiverToOceanTransitionMID' has a wrong offset!");
static_assert(offsetof(AWaterBody, UnderwaterPostProcessMID) == 0x000878, "Member 'AWaterBody::UnderwaterPostProcessMID' has a wrong offset!");
static_assert(offsetof(AWaterBody, Islands) == 0x000880, "Member 'AWaterBody::Islands' has a wrong offset!");
static_assert(offsetof(AWaterBody, ExclusionVolumes) == 0x000890, "Member 'AWaterBody::ExclusionVolumes' has a wrong offset!");
static_assert(offsetof(AWaterBody, Landscape) == 0x0008A0, "Member 'AWaterBody::Landscape' has a wrong offset!");
static_assert(offsetof(AWaterBody, CurrentPostProcessSettings) == 0x0008B0, "Member 'AWaterBody::CurrentPostProcessSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, OceanHeightOffset) == 0x000E00, "Member 'AWaterBody::OceanHeightOffset' has a wrong offset!");
static_assert(offsetof(AWaterBody, bCanAffectNavigation) == 0x000E04, "Member 'AWaterBody::bCanAffectNavigation' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterNavAreaClass) == 0x000E08, "Member 'AWaterBody::WaterNavAreaClass' has a wrong offset!");

// Class Water.WaterBodyExclusionVolume
// 0x0018 (0x0280 - 0x0268)
class AWaterBodyExclusionVolume : public APhysicsVolume
{
public:
	bool                                          bIgnoreAllOverlappingWaterBodies;                  // 0x0268(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWaterBody*>                     WaterBodiesToIgnore;                               // 0x0270(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyExclusionVolume">();
	}
	static class AWaterBodyExclusionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyExclusionVolume>();
	}
};
static_assert(alignof(AWaterBodyExclusionVolume) == 0x000008, "Wrong alignment on AWaterBodyExclusionVolume");
static_assert(sizeof(AWaterBodyExclusionVolume) == 0x000280, "Wrong size on AWaterBodyExclusionVolume");
static_assert(offsetof(AWaterBodyExclusionVolume, bIgnoreAllOverlappingWaterBodies) == 0x000268, "Member 'AWaterBodyExclusionVolume::bIgnoreAllOverlappingWaterBodies' has a wrong offset!");
static_assert(offsetof(AWaterBodyExclusionVolume, WaterBodiesToIgnore) == 0x000270, "Member 'AWaterBodyExclusionVolume::WaterBodiesToIgnore' has a wrong offset!");

// Class Water.WaterBodyIsland
// 0x0008 (0x0228 - 0x0220)
class AWaterBodyIsland : public AActor
{
public:
	class UWaterSplineComponent*                  SplineComp;                                        // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWaterSplineComponent* GetWaterSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyIsland">();
	}
	static class AWaterBodyIsland* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyIsland>();
	}
};
static_assert(alignof(AWaterBodyIsland) == 0x000008, "Wrong alignment on AWaterBodyIsland");
static_assert(sizeof(AWaterBodyIsland) == 0x000228, "Wrong size on AWaterBodyIsland");
static_assert(offsetof(AWaterBodyIsland, SplineComp) == 0x000220, "Member 'AWaterBodyIsland::SplineComp' has a wrong offset!");

// Class Water.WaterBodyProxy
// 0x0000 (0x0220 - 0x0220)
class AWaterBodyProxy final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyProxy">();
	}
	static class AWaterBodyProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyProxy>();
	}
};
static_assert(alignof(AWaterBodyProxy) == 0x000008, "Wrong alignment on AWaterBodyProxy");
static_assert(sizeof(AWaterBodyProxy) == 0x000220, "Wrong size on AWaterBodyProxy");

// Class Water.WaterMeshActor
// 0x0010 (0x0230 - 0x0220)
class AWaterMeshActor final : public AActor
{
public:
	class UTexture2D*                             WaterVelocityTexture;                              // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWaterMeshComponent*                    WaterMesh;                                         // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMeshActor">();
	}
	static class AWaterMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterMeshActor>();
	}
};
static_assert(alignof(AWaterMeshActor) == 0x000008, "Wrong alignment on AWaterMeshActor");
static_assert(sizeof(AWaterMeshActor) == 0x000230, "Wrong size on AWaterMeshActor");
static_assert(offsetof(AWaterMeshActor, WaterVelocityTexture) == 0x000220, "Member 'AWaterMeshActor::WaterVelocityTexture' has a wrong offset!");
static_assert(offsetof(AWaterMeshActor, WaterMesh) == 0x000228, "Member 'AWaterMeshActor::WaterMesh' has a wrong offset!");

// Class Water.WaterMeshComponent
// 0x0110 (0x0580 - 0x0470)
class UWaterMeshComponent final : public UMeshComponent
{
public:
	int32                                         ForceCollapseDensityLevel;                         // 0x0470(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x0474(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ExtentInTiles;                                     // 0x0478(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FarDistanceMaterial;                               // 0x0480(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarDistanceMeshExtent;                             // 0x0488(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0xE4];                                     // 0x048C(0x00E4)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TessellationFactor;                                // 0x0570(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LODScale;                                          // 0x0574(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_578[0x8];                                      // 0x0578(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMeshComponent">();
	}
	static class UWaterMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterMeshComponent>();
	}
};
static_assert(alignof(UWaterMeshComponent) == 0x000010, "Wrong alignment on UWaterMeshComponent");
static_assert(sizeof(UWaterMeshComponent) == 0x000580, "Wrong size on UWaterMeshComponent");
static_assert(offsetof(UWaterMeshComponent, ForceCollapseDensityLevel) == 0x000470, "Member 'UWaterMeshComponent::ForceCollapseDensityLevel' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TileSize) == 0x000474, "Member 'UWaterMeshComponent::TileSize' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, ExtentInTiles) == 0x000478, "Member 'UWaterMeshComponent::ExtentInTiles' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMaterial) == 0x000480, "Member 'UWaterMeshComponent::FarDistanceMaterial' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMeshExtent) == 0x000488, "Member 'UWaterMeshComponent::FarDistanceMeshExtent' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TessellationFactor) == 0x000570, "Member 'UWaterMeshComponent::TessellationFactor' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, LODScale) == 0x000574, "Member 'UWaterMeshComponent::LODScale' has a wrong offset!");

// Class Water.WaterRuntimeSettings
// 0x0008 (0x0040 - 0x0038)
class UWaterRuntimeSettings final : public UDeveloperSettings
{
public:
	ECollisionChannel                             CollisionChannelForWaterTraces;                    // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterRuntimeSettings">();
	}
	static class UWaterRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterRuntimeSettings>();
	}
};
static_assert(alignof(UWaterRuntimeSettings) == 0x000008, "Wrong alignment on UWaterRuntimeSettings");
static_assert(sizeof(UWaterRuntimeSettings) == 0x000040, "Wrong size on UWaterRuntimeSettings");
static_assert(offsetof(UWaterRuntimeSettings, CollisionChannelForWaterTraces) == 0x000038, "Member 'UWaterRuntimeSettings::CollisionChannelForWaterTraces' has a wrong offset!");

// Class Water.WaterSplineComponent
// 0x0020 (0x0560 - 0x0540)
class UWaterSplineComponent final : public USplineComponent
{
public:
	struct FWaterSplineCurveDefaults              WaterSplineDefaults;                               // 0x0538(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterSplineCurveDefaults              PreviousWaterSplineDefaults;                       // 0x054C(0x0014)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineComponent">();
	}
	static class UWaterSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineComponent>();
	}
};
static_assert(alignof(UWaterSplineComponent) == 0x000010, "Wrong alignment on UWaterSplineComponent");
static_assert(sizeof(UWaterSplineComponent) == 0x000560, "Wrong size on UWaterSplineComponent");
static_assert(offsetof(UWaterSplineComponent, WaterSplineDefaults) == 0x000538, "Member 'UWaterSplineComponent::WaterSplineDefaults' has a wrong offset!");
static_assert(offsetof(UWaterSplineComponent, PreviousWaterSplineDefaults) == 0x00054C, "Member 'UWaterSplineComponent::PreviousWaterSplineDefaults' has a wrong offset!");

// Class Water.WaterSplineMetadata
// 0x0090 (0x00B8 - 0x0028)
class UWaterSplineMetadata final : public USplineMetadata
{
public:
	struct FInterpCurveFloat                      Depth;                                             // 0x0028(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      WaterVelocityScalar;                               // 0x0040(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      ShorelineWidth;                                    // 0x0058(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      RiverWidth;                                        // 0x0070(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      AudioIntensity;                                    // 0x0088(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     WaterVelocity;                                     // 0x00A0(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineMetadata">();
	}
	static class UWaterSplineMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineMetadata>();
	}
};
static_assert(alignof(UWaterSplineMetadata) == 0x000008, "Wrong alignment on UWaterSplineMetadata");
static_assert(sizeof(UWaterSplineMetadata) == 0x0000B8, "Wrong size on UWaterSplineMetadata");
static_assert(offsetof(UWaterSplineMetadata, Depth) == 0x000028, "Member 'UWaterSplineMetadata::Depth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocityScalar) == 0x000040, "Member 'UWaterSplineMetadata::WaterVelocityScalar' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, ShorelineWidth) == 0x000058, "Member 'UWaterSplineMetadata::ShorelineWidth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, RiverWidth) == 0x000070, "Member 'UWaterSplineMetadata::RiverWidth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, AudioIntensity) == 0x000088, "Member 'UWaterSplineMetadata::AudioIntensity' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocity) == 0x0000A0, "Member 'UWaterSplineMetadata::WaterVelocity' has a wrong offset!");

// Class Water.WaterSubsystem
// 0x0088 (0x00B8 - 0x0030)
class UWaterSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsUnderWater, float DepthUnderwater)> OnCameraUnderwaterStateChanged; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ABuoyancyManager*                       BuoyancyManager;                                   // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWaterScalabilityChanged;                         // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AWaterMeshActor*                        WaterMeshActor;                                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           MaterialParameterCollection;                       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x20];                                      // 0x0098(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetShallowWaterMaxDynamicForces();
	static int32 GetShallowWaterMaxImpulseForces();
	static int32 GetShallowWaterSimulationRenderTargetSize();

	void PrintToWaterLog(const class FString& Message, bool bWarning);
	void SetOceanFloodHeight(float InFloodHeight);

	float GetCameraUnderwaterDepth() const;
	float GetOceanBaseHeight() const;
	float GetOceanFloodHeight() const;
	float GetOceanTotalHeight() const;
	float GetSmoothedWorldTimeSeconds() const;
	bool IsShallowWaterSimulationEnabled() const;
	bool IsUnderwaterPostProcessEnabled() const;
	bool IsWaterRenderingEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSubsystem">();
	}
	static class UWaterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSubsystem>();
	}
};
static_assert(alignof(UWaterSubsystem) == 0x000008, "Wrong alignment on UWaterSubsystem");
static_assert(sizeof(UWaterSubsystem) == 0x0000B8, "Wrong size on UWaterSubsystem");
static_assert(offsetof(UWaterSubsystem, OnCameraUnderwaterStateChanged) == 0x000038, "Member 'UWaterSubsystem::OnCameraUnderwaterStateChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, BuoyancyManager) == 0x000048, "Member 'UWaterSubsystem::BuoyancyManager' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, OnWaterScalabilityChanged) == 0x000050, "Member 'UWaterSubsystem::OnWaterScalabilityChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, WaterMeshActor) == 0x000060, "Member 'UWaterSubsystem::WaterMeshActor' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, MaterialParameterCollection) == 0x000090, "Member 'UWaterSubsystem::MaterialParameterCollection' has a wrong offset!");

}

