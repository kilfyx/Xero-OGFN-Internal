#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioClustersRuntime

#include "Basic.hpp"

#include "AudioClustersRuntime_classes.hpp"
#include "AudioClustersRuntime_parameters.hpp"


namespace SDK
{

// Function AudioClustersRuntime.AudioClusterBehavior.OnActorAdded
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioClusterBehavior::OnActorAdded(class AActor* Actor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnActorAdded");

	Params::AudioClusterBehavior_OnActorAdded Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioClustersRuntime.AudioClusterBehavior.OnActorRemoved
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioClusterBehavior::OnActorRemoved(class AActor* Actor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnActorRemoved");

	Params::AudioClusterBehavior_OnActorRemoved Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioClustersRuntime.AudioClusterBehavior.OnPositionUpdated
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioClusterBehavior::OnPositionUpdated(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPositionUpdated");

	Params::AudioClusterBehavior_OnPositionUpdated Parms{};

	Parms.Position = std::move(Position);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioClustersRuntime.AudioClusterBehavior.OnSizeUpdated
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioClusterBehavior::OnSizeUpdated(int32 Size)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSizeUpdated");

	Params::AudioClusterBehavior_OnSizeUpdated Parms{};

	Parms.Size = Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioClustersRuntime.AudioClusterBehavior.OnStart
// (Native, Event, Protected, BlueprintEvent)

void UAudioClusterBehavior::OnStart()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AudioClustersRuntime.AudioClusterBehavior.OnStop
// (Native, Event, Protected, BlueprintEvent)

void UAudioClusterBehavior::OnStop()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AudioClustersRuntime.AudioClustersSubsystem.AddConfigMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAudioClusterConfigMap*           Map                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioClustersSubsystem::AddConfigMap(class UAudioClusterConfigMap* Map)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddConfigMap");

	Params::AudioClustersSubsystem_AddConfigMap Parms{};

	Parms.Map = Map;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AudioClustersRuntime.AudioClustersSubsystem.Register
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAudioClusterActorInfo           ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioClustersSubsystem::Register(const struct FAudioClusterActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Register");

	Params::AudioClustersSubsystem_Register Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AudioClustersRuntime.AudioClustersSubsystem.RegisterOneShot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAudioClusterOneShotInfo         OneShotInfo                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioClustersSubsystem::RegisterOneShot(const struct FAudioClusterOneShotInfo& OneShotInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterOneShot");

	Params::AudioClustersSubsystem_RegisterOneShot Parms{};

	Parms.OneShotInfo = std::move(OneShotInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AudioClustersRuntime.AudioClustersSubsystem.RemoveConfigMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAudioClusterConfigMap*           Map                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioClustersSubsystem::RemoveConfigMap(class UAudioClusterConfigMap* Map)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveConfigMap");

	Params::AudioClustersSubsystem_RemoveConfigMap Parms{};

	Parms.Map = Map;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AudioClustersRuntime.AudioClustersSubsystem.SetListenerPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InListenerPosition                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioClustersSubsystem::SetListenerPosition(const struct FVector& InListenerPosition)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetListenerPosition");

	Params::AudioClustersSubsystem_SetListenerPosition Parms{};

	Parms.InListenerPosition = std::move(InListenerPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioClustersRuntime.AudioClustersSubsystem.SetParam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioClustersSubsystem::SetParam(const struct FGameplayTag& tag, double Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetParam");

	Params::AudioClustersSubsystem_SetParam Parms{};

	Parms.tag = std::move(tag);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AudioClustersRuntime.AudioClustersSubsystem.Unregister
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAudioClusterActorInfo           ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioClustersSubsystem::Unregister(const struct FAudioClusterActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Unregister");

	Params::AudioClustersSubsystem_Unregister Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AudioClustersRuntime.AudioClustersSubsystem.UpdateClusters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTimeSeconds                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioClustersSubsystem::UpdateClusters(float DeltaTimeSeconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateClusters");

	Params::AudioClustersSubsystem_UpdateClusters Parms{};

	Parms.DeltaTimeSeconds = DeltaTimeSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

