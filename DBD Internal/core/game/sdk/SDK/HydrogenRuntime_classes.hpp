#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HydrogenRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "HydrogenRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class HydrogenRuntime.FortAthenaMutator_Hydrogen
// 0x0540 (0x0910 - 0x03D0)
class AFortAthenaMutator_Hydrogen final : public AFortAthenaMutator_GameModeBase
{
public:
	uint8                                         Pad_3D0[0x8];                                      // 0x03D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInitialized;                                      // 0x03D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWinnerDeclared;                                   // 0x03D9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         VictoryPointImbalanceRespawnTimeMultiplier;        // 0x03E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HighVictoryPointImbalanceRespawnTimeMultiplier;    // 0x0408(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinRespawnTime;                                    // 0x0430(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTeamPointsEntry>               HydrogenTeamPoints;                                // 0x0458(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnHydrogenTeamPointsChanged;                       // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         WinningTeam;                                       // 0x0478(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WinningScore;                                      // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AHydrogenObjectiveActor*>        CapturePointActors;                                // 0x0480(0x0010)(Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         NonCapturePointActorsForPath;                      // 0x0490(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SafeZoneRadius;                                    // 0x04A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AircraftOffsetFromRadius;                          // 0x04C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bShouldDropSupplyDropsBetweenCurrentAndNextSafeZones; // 0x04F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SupplyDropPercentDistanceToNextPathLocation;       // 0x0518(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SupplyDropPercentSafeZoneRadius;                   // 0x0540(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           MinimapMaterialParameterCollection;                // 0x0568(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinRespawnHeightAboveGround;                       // 0x0570(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   DefaultRespawnLabelText;                           // 0x0598(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             DefaultRespawnTexture;                             // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DefaultRespawnDisplayPriority;                     // 0x05B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     DefaultRespawnCameraActorClass;                    // 0x05C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C8[0x10];                                     // 0x05C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HydrogenCapturePointsPathsIndex;                   // 0x05D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHydrogenPathNames>             HydrogenCapturePointsPaths;                        // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HydrogenCapturePointsPathSpeedToNextNode;          // 0x0610(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         TickHydrogenStormShield_TimeBetweenTicks;          // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HydrogenCompassIconOverlap;                        // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStormActive;                                      // 0x0640(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_641[0x3];                                      // 0x0641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsTilStormActivation;                         // 0x0644(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_648[0x28];                                     // 0x0648(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bAllowCheckWinnerWithOneTeamLeft;                  // 0x0670(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ObjectiveAccoladeTag;                              // 0x0698(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EOMBonusAccoladeTag;                               // 0x06A0(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bOnlyCapturePointsInsideSafeZoneCount;             // 0x06A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bAwardVictoryPointsWhenFullyCaptured;              // 0x06D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BonusVictoryPointsAwardedForCapturingPoint;        // 0x06F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BonusVictoryPointsAwardedForLockedCapturedPoint;   // 0x0720(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         HydrogenVictoryPointCheckTime;                     // 0x0748(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HydrogenVictoryPointGoal;                          // 0x0750(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HydrogenCloseToVictoryPointGoal;                   // 0x0778(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         HydrogenTotalTimeForOneCapturePoint;               // 0x07A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HydrogenMaxCapturePoints;                          // 0x07A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HydrogenTotalTimeForMaxCapturePoints;              // 0x07A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7AC[0x4];                                      // 0x07AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HydrogenVictoryPointIncreaseReducedRate;           // 0x07B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HydrogenVictoryPointIncrease;                      // 0x07D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HydrogenVictoryPointRateIncreasePerPoint;          // 0x0800(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         HydrogenVictoryPointCheckTimePassed;               // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_82C[0xC];                                      // 0x082C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SafeZoneCameraActor;                               // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_840[0x4];                                      // 0x0840(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HydrogenCapturePointsPathsIndexToUse;              // 0x0844(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StormHeadingYawReplicated;                         // 0x0848(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PathGameplayTagToUse;                              // 0x084C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_854[0x4];                                      // 0x0854(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnInitialized;                                     // 0x0858(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(uint8 TheWinningTeam)> OnWinningTeamDeclared;                      // 0x0868(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InventoryItemTagsToCount;                          // 0x0878(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 MatchEndAnalyticsEventName;                        // 0x0898(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EarlyExitAnalyticsEventName;                       // 0x08A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B8[0x58];                                     // 0x08B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateTheStormShield();
	void AddBonusVictoryPointsForLockedCapturePoints(uint8 InTeam);
	void CheckVictoryPoints(float TimePassed);
	void EndGame(uint8 Winner);
	struct FVector GetActorOnPathLocation(int32 InPathIndex);
	struct FVector GetNextActorOnPathLocation(int32 InPathIndex);
	int32 GetOwnedCapturePointCount(int32 InIndex);
	float GetTimeToNextNode();
	void GiveEOMBonusAccolade();
	void GiveObjectiveAccolade(class AFortPlayerControllerAthena* FortController);
	void GotoNextStormShieldNode();
	void OnRep_HydrogenTeamPointsChanged();
	void OnRep_WinningTeam();
	void OwningTeamChange(class AHydrogenObjectiveActor* Objective, uint8 NewTeam, uint8 OldTeam);
	void PositionHydrogenStormShield();
	void SetupSafeZoneRoute(const struct FVector& StartVector, const struct FVector& EndVector);
	bool TickHydrogenStormShield(float DeltaSeconds);
	void UpdateCapturePointsCounted();

	bool bHasStormStarted() const;
	bool bHasWinnerBeenDeclared() const;
	const TArray<class AHydrogenObjectiveActor*> GetAllCapturePoints() const;
	void GetSortedActivePointIndices(TArray<int32>* OutSortedIndices) const;
	float GetStormSpeed() const;
	bool IsInStormShield(const struct FVector& TestLocation) const;
	void SetCapturePointFillAmount(class AHydrogenObjectiveActor* InCapturePointActor, uint8 InPlayerTeam) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_Hydrogen">();
	}
	static class AFortAthenaMutator_Hydrogen* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_Hydrogen>();
	}
};
static_assert(alignof(AFortAthenaMutator_Hydrogen) == 0x000008, "Wrong alignment on AFortAthenaMutator_Hydrogen");
static_assert(sizeof(AFortAthenaMutator_Hydrogen) == 0x000910, "Wrong size on AFortAthenaMutator_Hydrogen");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, bInitialized) == 0x0003D8, "Member 'AFortAthenaMutator_Hydrogen::bInitialized' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, bWinnerDeclared) == 0x0003D9, "Member 'AFortAthenaMutator_Hydrogen::bWinnerDeclared' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, VictoryPointImbalanceRespawnTimeMultiplier) == 0x0003E0, "Member 'AFortAthenaMutator_Hydrogen::VictoryPointImbalanceRespawnTimeMultiplier' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HighVictoryPointImbalanceRespawnTimeMultiplier) == 0x000408, "Member 'AFortAthenaMutator_Hydrogen::HighVictoryPointImbalanceRespawnTimeMultiplier' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, MinRespawnTime) == 0x000430, "Member 'AFortAthenaMutator_Hydrogen::MinRespawnTime' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenTeamPoints) == 0x000458, "Member 'AFortAthenaMutator_Hydrogen::HydrogenTeamPoints' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, OnHydrogenTeamPointsChanged) == 0x000468, "Member 'AFortAthenaMutator_Hydrogen::OnHydrogenTeamPointsChanged' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, WinningTeam) == 0x000478, "Member 'AFortAthenaMutator_Hydrogen::WinningTeam' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, WinningScore) == 0x00047C, "Member 'AFortAthenaMutator_Hydrogen::WinningScore' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, CapturePointActors) == 0x000480, "Member 'AFortAthenaMutator_Hydrogen::CapturePointActors' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, NonCapturePointActorsForPath) == 0x000490, "Member 'AFortAthenaMutator_Hydrogen::NonCapturePointActorsForPath' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, SafeZoneRadius) == 0x0004A0, "Member 'AFortAthenaMutator_Hydrogen::SafeZoneRadius' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, AircraftOffsetFromRadius) == 0x0004C8, "Member 'AFortAthenaMutator_Hydrogen::AircraftOffsetFromRadius' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, bShouldDropSupplyDropsBetweenCurrentAndNextSafeZones) == 0x0004F0, "Member 'AFortAthenaMutator_Hydrogen::bShouldDropSupplyDropsBetweenCurrentAndNextSafeZones' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, SupplyDropPercentDistanceToNextPathLocation) == 0x000518, "Member 'AFortAthenaMutator_Hydrogen::SupplyDropPercentDistanceToNextPathLocation' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, SupplyDropPercentSafeZoneRadius) == 0x000540, "Member 'AFortAthenaMutator_Hydrogen::SupplyDropPercentSafeZoneRadius' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, MinimapMaterialParameterCollection) == 0x000568, "Member 'AFortAthenaMutator_Hydrogen::MinimapMaterialParameterCollection' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, MinRespawnHeightAboveGround) == 0x000570, "Member 'AFortAthenaMutator_Hydrogen::MinRespawnHeightAboveGround' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, DefaultRespawnLabelText) == 0x000598, "Member 'AFortAthenaMutator_Hydrogen::DefaultRespawnLabelText' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, DefaultRespawnTexture) == 0x0005B0, "Member 'AFortAthenaMutator_Hydrogen::DefaultRespawnTexture' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, DefaultRespawnDisplayPriority) == 0x0005B8, "Member 'AFortAthenaMutator_Hydrogen::DefaultRespawnDisplayPriority' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, DefaultRespawnCameraActorClass) == 0x0005C0, "Member 'AFortAthenaMutator_Hydrogen::DefaultRespawnCameraActorClass' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenCapturePointsPathsIndex) == 0x0005D8, "Member 'AFortAthenaMutator_Hydrogen::HydrogenCapturePointsPathsIndex' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenCapturePointsPaths) == 0x000600, "Member 'AFortAthenaMutator_Hydrogen::HydrogenCapturePointsPaths' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenCapturePointsPathSpeedToNextNode) == 0x000610, "Member 'AFortAthenaMutator_Hydrogen::HydrogenCapturePointsPathSpeedToNextNode' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, TickHydrogenStormShield_TimeBetweenTicks) == 0x000638, "Member 'AFortAthenaMutator_Hydrogen::TickHydrogenStormShield_TimeBetweenTicks' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenCompassIconOverlap) == 0x00063C, "Member 'AFortAthenaMutator_Hydrogen::HydrogenCompassIconOverlap' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, bStormActive) == 0x000640, "Member 'AFortAthenaMutator_Hydrogen::bStormActive' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, SecondsTilStormActivation) == 0x000644, "Member 'AFortAthenaMutator_Hydrogen::SecondsTilStormActivation' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, bAllowCheckWinnerWithOneTeamLeft) == 0x000670, "Member 'AFortAthenaMutator_Hydrogen::bAllowCheckWinnerWithOneTeamLeft' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, ObjectiveAccoladeTag) == 0x000698, "Member 'AFortAthenaMutator_Hydrogen::ObjectiveAccoladeTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, EOMBonusAccoladeTag) == 0x0006A0, "Member 'AFortAthenaMutator_Hydrogen::EOMBonusAccoladeTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, bOnlyCapturePointsInsideSafeZoneCount) == 0x0006A8, "Member 'AFortAthenaMutator_Hydrogen::bOnlyCapturePointsInsideSafeZoneCount' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, bAwardVictoryPointsWhenFullyCaptured) == 0x0006D0, "Member 'AFortAthenaMutator_Hydrogen::bAwardVictoryPointsWhenFullyCaptured' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, BonusVictoryPointsAwardedForCapturingPoint) == 0x0006F8, "Member 'AFortAthenaMutator_Hydrogen::BonusVictoryPointsAwardedForCapturingPoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, BonusVictoryPointsAwardedForLockedCapturedPoint) == 0x000720, "Member 'AFortAthenaMutator_Hydrogen::BonusVictoryPointsAwardedForLockedCapturedPoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenVictoryPointCheckTime) == 0x000748, "Member 'AFortAthenaMutator_Hydrogen::HydrogenVictoryPointCheckTime' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenVictoryPointGoal) == 0x000750, "Member 'AFortAthenaMutator_Hydrogen::HydrogenVictoryPointGoal' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenCloseToVictoryPointGoal) == 0x000778, "Member 'AFortAthenaMutator_Hydrogen::HydrogenCloseToVictoryPointGoal' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenTotalTimeForOneCapturePoint) == 0x0007A0, "Member 'AFortAthenaMutator_Hydrogen::HydrogenTotalTimeForOneCapturePoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenMaxCapturePoints) == 0x0007A4, "Member 'AFortAthenaMutator_Hydrogen::HydrogenMaxCapturePoints' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenTotalTimeForMaxCapturePoints) == 0x0007A8, "Member 'AFortAthenaMutator_Hydrogen::HydrogenTotalTimeForMaxCapturePoints' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenVictoryPointIncreaseReducedRate) == 0x0007B0, "Member 'AFortAthenaMutator_Hydrogen::HydrogenVictoryPointIncreaseReducedRate' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenVictoryPointIncrease) == 0x0007D8, "Member 'AFortAthenaMutator_Hydrogen::HydrogenVictoryPointIncrease' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenVictoryPointRateIncreasePerPoint) == 0x000800, "Member 'AFortAthenaMutator_Hydrogen::HydrogenVictoryPointRateIncreasePerPoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenVictoryPointCheckTimePassed) == 0x000828, "Member 'AFortAthenaMutator_Hydrogen::HydrogenVictoryPointCheckTimePassed' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, SafeZoneCameraActor) == 0x000838, "Member 'AFortAthenaMutator_Hydrogen::SafeZoneCameraActor' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, HydrogenCapturePointsPathsIndexToUse) == 0x000844, "Member 'AFortAthenaMutator_Hydrogen::HydrogenCapturePointsPathsIndexToUse' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, StormHeadingYawReplicated) == 0x000848, "Member 'AFortAthenaMutator_Hydrogen::StormHeadingYawReplicated' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, PathGameplayTagToUse) == 0x00084C, "Member 'AFortAthenaMutator_Hydrogen::PathGameplayTagToUse' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, OnInitialized) == 0x000858, "Member 'AFortAthenaMutator_Hydrogen::OnInitialized' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, OnWinningTeamDeclared) == 0x000868, "Member 'AFortAthenaMutator_Hydrogen::OnWinningTeamDeclared' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, InventoryItemTagsToCount) == 0x000878, "Member 'AFortAthenaMutator_Hydrogen::InventoryItemTagsToCount' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, MatchEndAnalyticsEventName) == 0x000898, "Member 'AFortAthenaMutator_Hydrogen::MatchEndAnalyticsEventName' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Hydrogen, EarlyExitAnalyticsEventName) == 0x0008A8, "Member 'AFortAthenaMutator_Hydrogen::EarlyExitAnalyticsEventName' has a wrong offset!");

// Class HydrogenRuntime.HydrogenObjectiveActor
// 0x05B8 (0x0B58 - 0x05A0)
class AHydrogenObjectiveActor final : public ABuildingActor
{
public:
	uint8                                         Pad_5A0[0x8];                                      // 0x05A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 TeamsOnPoint;                                      // 0x05A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CaptureProgress;                                   // 0x05B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CapturingTeam;                                     // 0x05BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwningTeam;                                        // 0x05BD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeenCaptured;                                     // 0x05BE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5BF[0x1];                                      // 0x05BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bContested)> OnContestedChange;                               // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FTeamPlayerCountEntry>& TeamsOnCapturePoint)> OnTeamsOnPointChange; // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCapturePointChange;                              // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AHydrogenObjectiveActor* Objective, uint8 NewTeam, uint8 OldTeam)> OnOwningTeamChange; // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStormIsNear;                                     // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         PreviousOwningTeam;                                // 0x0610(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydrogenCaptureStateEnum                     HydrogenCaptureStateEnum;                          // 0x0611(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_612[0x2];                                      // 0x0612(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfPlayersOnPoint;                            // 0x0614(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTeamsOnPoint;                              // 0x0618(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTeamPlayerCountEntry>          TeamsOnCapturePoint;                               // 0x0620(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CaptureProgressAdditionalPlayersMultiplier;        // 0x0630(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AmountOfGainEveryLoop;                             // 0x0658(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CaptureProgressGoal;                               // 0x0680(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerMultiplier;                               // 0x06A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateTime;                                        // 0x06AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnActivePointsChanged;                             // 0x06B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PathGameplayTags;                                  // 0x06C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   CaptureCollisionName;                              // 0x06E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CapturePointLetter;                                // 0x06E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Locked_MapIconBrush;                               // 0x0700(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              LockedMinimapIconScale;                            // 0x0788(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Contested_MapIconBrush;                            // 0x0790(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ContestedMinimapIconScale;                         // 0x0818(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ContestedIconLinearColor;                          // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ContestedLetterTextLinearColor;                    // 0x0830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EnemyCapturing_MapIconBrush;                       // 0x0840(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            AllyCapturing_MapIconBrush;                        // 0x08C8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EnemyCap_MapIconBrush;                             // 0x0950(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            AllyCap_MapIconBrush;                              // 0x09D8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   FillAmountName;                                    // 0x0A60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MiniMapIconScale;                                  // 0x0A68(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0A70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompassIconScale;                                  // 0x0A74(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompassMaxPawnDistanceForScaling;                  // 0x0A7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompassYOffset;                                    // 0x0A80(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A84[0x4];                                      // 0x0A84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         LetterFontInfo;                                    // 0x0A88(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               EnemyCapturing_DrawBrushMID;                       // 0x0AD8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               AllyCapturing_DrawBrushMID;                        // 0x0AE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInStormShield;                                  // 0x0AE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AE9[0x17];                                     // 0x0AE9(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     IconFlashTimeline;                                 // 0x0B00(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            IconFlashCurve;                                    // 0x0B08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B10[0x10];                                     // 0x0B10(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckForStormTimerHandle;                          // 0x0B20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CheckForStormRate;                                 // 0x0B28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B2C[0x4];                                      // 0x0B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x0B30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortAthenaMutator_Hydrogen*            CachedMutator;                                     // 0x0B38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsActive;                                         // 0x0B40(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B41[0x7];                                      // 0x0B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UShapeComponent*                        CaptureCollisionComponent;                         // 0x0B48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B50[0x8];                                      // 0x0B50(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckForStorm();
	void FlashIcon();
	void OnComponentBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnMutatorAvailable();
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_bIsActive();
	void OnRep_HydrogenCaptureStateEnum();
	void OnRep_OwningTeam();
	void OnRep_TeamsOnCapturePoint();
	void OnTimelineFlashing(float IconOpacity);
	void PlayContestedMapTimeline();
	void ProcessOverlap(class AActor* OtherActor);
	void SetActive(bool bInIsActive);
	void SetUpMaterialInstanceDynamic(struct FSlateBrush* MapIconBrush, class UMaterialInstanceDynamic** DrawBrushMID);
	void WaitForMutator();

	bool GetIsActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HydrogenObjectiveActor">();
	}
	static class AHydrogenObjectiveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHydrogenObjectiveActor>();
	}
};
static_assert(alignof(AHydrogenObjectiveActor) == 0x000008, "Wrong alignment on AHydrogenObjectiveActor");
static_assert(sizeof(AHydrogenObjectiveActor) == 0x000B58, "Wrong size on AHydrogenObjectiveActor");
static_assert(offsetof(AHydrogenObjectiveActor, TeamsOnPoint) == 0x0005A8, "Member 'AHydrogenObjectiveActor::TeamsOnPoint' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CaptureProgress) == 0x0005B8, "Member 'AHydrogenObjectiveActor::CaptureProgress' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CapturingTeam) == 0x0005BC, "Member 'AHydrogenObjectiveActor::CapturingTeam' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, OwningTeam) == 0x0005BD, "Member 'AHydrogenObjectiveActor::OwningTeam' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, bBeenCaptured) == 0x0005BE, "Member 'AHydrogenObjectiveActor::bBeenCaptured' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, OnContestedChange) == 0x0005C0, "Member 'AHydrogenObjectiveActor::OnContestedChange' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, OnTeamsOnPointChange) == 0x0005D0, "Member 'AHydrogenObjectiveActor::OnTeamsOnPointChange' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, OnCapturePointChange) == 0x0005E0, "Member 'AHydrogenObjectiveActor::OnCapturePointChange' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, OnOwningTeamChange) == 0x0005F0, "Member 'AHydrogenObjectiveActor::OnOwningTeamChange' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, OnStormIsNear) == 0x000600, "Member 'AHydrogenObjectiveActor::OnStormIsNear' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, PreviousOwningTeam) == 0x000610, "Member 'AHydrogenObjectiveActor::PreviousOwningTeam' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, HydrogenCaptureStateEnum) == 0x000611, "Member 'AHydrogenObjectiveActor::HydrogenCaptureStateEnum' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, NumberOfPlayersOnPoint) == 0x000614, "Member 'AHydrogenObjectiveActor::NumberOfPlayersOnPoint' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, NumberOfTeamsOnPoint) == 0x000618, "Member 'AHydrogenObjectiveActor::NumberOfTeamsOnPoint' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, TeamsOnCapturePoint) == 0x000620, "Member 'AHydrogenObjectiveActor::TeamsOnCapturePoint' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CaptureProgressAdditionalPlayersMultiplier) == 0x000630, "Member 'AHydrogenObjectiveActor::CaptureProgressAdditionalPlayersMultiplier' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, AmountOfGainEveryLoop) == 0x000658, "Member 'AHydrogenObjectiveActor::AmountOfGainEveryLoop' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CaptureProgressGoal) == 0x000680, "Member 'AHydrogenObjectiveActor::CaptureProgressGoal' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, MaxPlayerMultiplier) == 0x0006A8, "Member 'AHydrogenObjectiveActor::MaxPlayerMultiplier' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, UpdateTime) == 0x0006AC, "Member 'AHydrogenObjectiveActor::UpdateTime' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, OnActivePointsChanged) == 0x0006B0, "Member 'AHydrogenObjectiveActor::OnActivePointsChanged' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, PathGameplayTags) == 0x0006C0, "Member 'AHydrogenObjectiveActor::PathGameplayTags' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CaptureCollisionName) == 0x0006E0, "Member 'AHydrogenObjectiveActor::CaptureCollisionName' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CapturePointLetter) == 0x0006E8, "Member 'AHydrogenObjectiveActor::CapturePointLetter' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, Locked_MapIconBrush) == 0x000700, "Member 'AHydrogenObjectiveActor::Locked_MapIconBrush' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, LockedMinimapIconScale) == 0x000788, "Member 'AHydrogenObjectiveActor::LockedMinimapIconScale' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, Contested_MapIconBrush) == 0x000790, "Member 'AHydrogenObjectiveActor::Contested_MapIconBrush' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, ContestedMinimapIconScale) == 0x000818, "Member 'AHydrogenObjectiveActor::ContestedMinimapIconScale' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, ContestedIconLinearColor) == 0x000820, "Member 'AHydrogenObjectiveActor::ContestedIconLinearColor' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, ContestedLetterTextLinearColor) == 0x000830, "Member 'AHydrogenObjectiveActor::ContestedLetterTextLinearColor' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, EnemyCapturing_MapIconBrush) == 0x000840, "Member 'AHydrogenObjectiveActor::EnemyCapturing_MapIconBrush' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, AllyCapturing_MapIconBrush) == 0x0008C8, "Member 'AHydrogenObjectiveActor::AllyCapturing_MapIconBrush' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, EnemyCap_MapIconBrush) == 0x000950, "Member 'AHydrogenObjectiveActor::EnemyCap_MapIconBrush' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, AllyCap_MapIconBrush) == 0x0009D8, "Member 'AHydrogenObjectiveActor::AllyCap_MapIconBrush' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, FillAmountName) == 0x000A60, "Member 'AHydrogenObjectiveActor::FillAmountName' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, MiniMapIconScale) == 0x000A68, "Member 'AHydrogenObjectiveActor::MiniMapIconScale' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, TextScale) == 0x000A70, "Member 'AHydrogenObjectiveActor::TextScale' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CompassIconScale) == 0x000A74, "Member 'AHydrogenObjectiveActor::CompassIconScale' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CompassMaxPawnDistanceForScaling) == 0x000A7C, "Member 'AHydrogenObjectiveActor::CompassMaxPawnDistanceForScaling' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CompassYOffset) == 0x000A80, "Member 'AHydrogenObjectiveActor::CompassYOffset' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, LetterFontInfo) == 0x000A88, "Member 'AHydrogenObjectiveActor::LetterFontInfo' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, EnemyCapturing_DrawBrushMID) == 0x000AD8, "Member 'AHydrogenObjectiveActor::EnemyCapturing_DrawBrushMID' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, AllyCapturing_DrawBrushMID) == 0x000AE0, "Member 'AHydrogenObjectiveActor::AllyCapturing_DrawBrushMID' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, bIsInStormShield) == 0x000AE8, "Member 'AHydrogenObjectiveActor::bIsInStormShield' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, IconFlashTimeline) == 0x000B00, "Member 'AHydrogenObjectiveActor::IconFlashTimeline' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, IconFlashCurve) == 0x000B08, "Member 'AHydrogenObjectiveActor::IconFlashCurve' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CheckForStormTimerHandle) == 0x000B20, "Member 'AHydrogenObjectiveActor::CheckForStormTimerHandle' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CheckForStormRate) == 0x000B28, "Member 'AHydrogenObjectiveActor::CheckForStormRate' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CachedGameState) == 0x000B30, "Member 'AHydrogenObjectiveActor::CachedGameState' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CachedMutator) == 0x000B38, "Member 'AHydrogenObjectiveActor::CachedMutator' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, bIsActive) == 0x000B40, "Member 'AHydrogenObjectiveActor::bIsActive' has a wrong offset!");
static_assert(offsetof(AHydrogenObjectiveActor, CaptureCollisionComponent) == 0x000B48, "Member 'AHydrogenObjectiveActor::CaptureCollisionComponent' has a wrong offset!");

// Class HydrogenRuntime.HydrogenPathActor
// 0x0028 (0x0248 - 0x0220)
class AHydrogenPathActor final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PathGameplayTags;                                  // 0x0228(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HydrogenPathActor">();
	}
	static class AHydrogenPathActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHydrogenPathActor>();
	}
};
static_assert(alignof(AHydrogenPathActor) == 0x000008, "Wrong alignment on AHydrogenPathActor");
static_assert(sizeof(AHydrogenPathActor) == 0x000248, "Wrong size on AHydrogenPathActor");
static_assert(offsetof(AHydrogenPathActor, PathGameplayTags) == 0x000228, "Member 'AHydrogenPathActor::PathGameplayTags' has a wrong offset!");

}

