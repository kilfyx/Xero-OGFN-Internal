#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpecialEventGameplayRuntime

#include "Basic.hpp"

#include "SpecialEventGameplayRuntime_classes.hpp"
#include "SpecialEventGameplayRuntime_parameters.hpp"


namespace SDK
{

// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.OnMovementModeChanged
// (Final, Native, Private)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PreviousMovementMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCharacterMovementMutatorComponent::OnMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "OnMovementModeChanged");

	Params::FortCharacterMovementMutatorComponent_OnMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PreviousMovementMode = PreviousMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.OnRep_BuffetBubblesFollowActor
// (Final, Native, Protected)

void UFortCharacterMovementMutatorComponent::OnRep_BuffetBubblesFollowActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "OnRep_BuffetBubblesFollowActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.OnRep_BuffetFlyingRicochetReplicatedData
// (Final, Native, Private)

void UFortCharacterMovementMutatorComponent::OnRep_BuffetFlyingRicochetReplicatedData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "OnRep_BuffetFlyingRicochetReplicatedData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.OverrideBuffetFlyingMaxSpeed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bAsMultiplier                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InterpSpeed                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCharacterMovementMutatorComponent::OverrideBuffetFlyingMaxSpeed(const float Value, const bool bAsMultiplier, const float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "OverrideBuffetFlyingMaxSpeed");

	Params::FortCharacterMovementMutatorComponent_OverrideBuffetFlyingMaxSpeed Parms{};

	Parms.Value = Value;
	Parms.bAsMultiplier = bAsMultiplier;
	Parms.InterpSpeed = InterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.OverrideBuffetFlyingVelocityDirectionInterpSpeed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bAsMultiplier                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCharacterMovementMutatorComponent::OverrideBuffetFlyingVelocityDirectionInterpSpeed(const float Value, const bool bAsMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "OverrideBuffetFlyingVelocityDirectionInterpSpeed");

	Params::FortCharacterMovementMutatorComponent_OverrideBuffetFlyingVelocityDirectionInterpSpeed Parms{};

	Parms.Value = Value;
	Parms.bAsMultiplier = bAsMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.SetBuffetBubblesFollowActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCharacterMovementMutatorComponent::SetBuffetBubblesFollowActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "SetBuffetBubblesFollowActor");

	Params::FortCharacterMovementMutatorComponent_SetBuffetBubblesFollowActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.SetBuffetBubblesInitialFollowBoxOffsetPercent
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   BoxOffsetPercent                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCharacterMovementMutatorComponent::SetBuffetBubblesInitialFollowBoxOffsetPercent(const struct FVector& BoxOffsetPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "SetBuffetBubblesInitialFollowBoxOffsetPercent");

	Params::FortCharacterMovementMutatorComponent_SetBuffetBubblesInitialFollowBoxOffsetPercent Parms{};

	Parms.BoxOffsetPercent = std::move(BoxOffsetPercent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent.SetBuffetBubblesIntroTargetTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFortCharacterMovementMutatorComponent::SetBuffetBubblesIntroTargetTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutatorComponent", "SetBuffetBubblesIntroTargetTransform");

	Params::FortCharacterMovementMutatorComponent_SetBuffetBubblesIntroTargetTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_FakeKillRelevancy.FakeKillRelevancyDebug
// (Final, Exec, Native, Public)
// Parameters:
// const float                             TextScale                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_FakeKillRelevancy::FakeKillRelevancyDebug(const float TextScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_FakeKillRelevancy", "FakeKillRelevancyDebug");

	Params::FortCheatManager_FakeKillRelevancy_FakeKillRelevancyDebug Parms{};

	Parms.TextScale = TextScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_FakeKillRelevancy.FakeKillRelevancyReset
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortCheatManager_FakeKillRelevancy::FakeKillRelevancyReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_FakeKillRelevancy", "FakeKillRelevancyReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_FakeKillRelevancy.FakeKillRelevancySetUpPhase
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// const int32                             MaxPlayersRemaining                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ReasonGameplayTagString                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NumWaves                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelevancyDelay                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_FakeKillRelevancy::FakeKillRelevancySetUpPhase(const int32 MaxPlayersRemaining, const class FString& ReasonGameplayTagString, const int32 NumWaves, const float RelevancyDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_FakeKillRelevancy", "FakeKillRelevancySetUpPhase");

	Params::FortCheatManager_FakeKillRelevancy_FakeKillRelevancySetUpPhase Parms{};

	Parms.MaxPlayersRemaining = MaxPlayersRemaining;
	Parms.ReasonGameplayTagString = std::move(ReasonGameplayTagString);
	Parms.NumWaves = NumWaves;
	Parms.RelevancyDelay = RelevancyDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_FakeKillRelevancy.FakeKillRelevancyStartNextWave
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortCheatManager_FakeKillRelevancy::FakeKillRelevancyStartNextWave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_FakeKillRelevancy", "FakeKillRelevancyStartNextWave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_FakeKillRelevancy.FakeKillRelevancyTestAlgorithm
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// const int32                             NumPlayers                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MaxPlayersRemainingAfterPhases                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MinSquadSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MaxSquadSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Iterations                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             LogVerbosity                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_FakeKillRelevancy::FakeKillRelevancyTestAlgorithm(const int32 NumPlayers, const class FString& MaxPlayersRemainingAfterPhases, const int32 MinSquadSize, const int32 MaxSquadSize, const int32 Iterations, const int32 LogVerbosity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_FakeKillRelevancy", "FakeKillRelevancyTestAlgorithm");

	Params::FortCheatManager_FakeKillRelevancy_FakeKillRelevancyTestAlgorithm Parms{};

	Parms.NumPlayers = NumPlayers;
	Parms.MaxPlayersRemainingAfterPhases = std::move(MaxPlayersRemainingAfterPhases);
	Parms.MinSquadSize = MinSquadSize;
	Parms.MaxSquadSize = MaxSquadSize;
	Parms.Iterations = Iterations;
	Parms.LogVerbosity = LogVerbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy.CancelKillEffectsOnClient
// (BlueprintCosmetic, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class AFortPlayerStateAthena*>&PlayerStates                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortControllerComponent_FakeKillRelevancy::CancelKillEffectsOnClient(const TArray<class AFortPlayerStateAthena*>& PlayerStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_FakeKillRelevancy", "CancelKillEffectsOnClient");

	Params::FortControllerComponent_FakeKillRelevancy_CancelKillEffectsOnClient Parms{};

	Parms.PlayerStates = std::move(PlayerStates);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy.CancelKillEffectsOnServer
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)

void UFortControllerComponent_FakeKillRelevancy::CancelKillEffectsOnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_FakeKillRelevancy", "CancelKillEffectsOnServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy.OnKillEffectsPlayed
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// const class AFortPlayerStateAthena*     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_FakeKillRelevancy::OnKillEffectsPlayed(const class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_FakeKillRelevancy", "OnKillEffectsPlayed");

	Params::FortControllerComponent_FakeKillRelevancy_OnKillEffectsPlayed Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy.OnRep_ResetCounter
// (Final, Native, Private)

void UFortControllerComponent_FakeKillRelevancy::OnRep_ResetCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_FakeKillRelevancy", "OnRep_ResetCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy.PlayKillEffects
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FFakeKillRelevancyPlayerDataEntry&FakeKillData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const float                             RelevancyDelay                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_FakeKillRelevancy::PlayKillEffects(const struct FFakeKillRelevancyPlayerDataEntry& FakeKillData, const float RelevancyDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_FakeKillRelevancy", "PlayKillEffects");

	Params::FortControllerComponent_FakeKillRelevancy_PlayKillEffects Parms{};

	Parms.FakeKillData = std::move(FakeKillData);
	Parms.RelevancyDelay = RelevancyDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy.ResetRelevancy
// (Final, BlueprintAuthorityOnly, Native, Protected)

void UFortControllerComponent_FakeKillRelevancy::ResetRelevancy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_FakeKillRelevancy", "ResetRelevancy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy.GetDeathLocation
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AFortPlayerStateAthena*     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UFortControllerComponent_FakeKillRelevancy::GetDeathLocation(const class AFortPlayerStateAthena* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_FakeKillRelevancy", "GetDeathLocation");

	Params::FortControllerComponent_FakeKillRelevancy_GetDeathLocation Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_FakeKillRelevancy.EndWave
// (Final, Native, Private)
// Parameters:
// const int32                             EndPhaseNum                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             WaveNum                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_FakeKillRelevancy::EndWave(const int32 EndPhaseNum, const int32 WaveNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_FakeKillRelevancy", "EndWave");

	Params::FortAthenaMutator_FakeKillRelevancy_EndWave Parms{};

	Parms.EndPhaseNum = EndPhaseNum;
	Parms.WaveNum = WaveNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_FakeKillRelevancy.ResetRelevancy
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_FakeKillRelevancy::ResetRelevancy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_FakeKillRelevancy", "ResetRelevancy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_FakeKillRelevancy.SetUpKillPhase
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32                             MaxPlayersRemaining                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Reason                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NumWaves                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelevancyDelay                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_FakeKillRelevancy::SetUpKillPhase(const int32 MaxPlayersRemaining, const struct FGameplayTag& Reason, const int32 NumWaves, const float RelevancyDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_FakeKillRelevancy", "SetUpKillPhase");

	Params::FortAthenaMutator_FakeKillRelevancy_SetUpKillPhase Parms{};

	Parms.MaxPlayersRemaining = MaxPlayersRemaining;
	Parms.Reason = std::move(Reason);
	Parms.NumWaves = NumWaves;
	Parms.RelevancyDelay = RelevancyDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_FakeKillRelevancy.StartNextKillWave
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_FakeKillRelevancy::StartNextKillWave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_FakeKillRelevancy", "StartNextKillWave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_LoadGameFeature.OnPlaylistDataReady
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class AFortGameStateAthena*             GameState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortPlaylist*              Playlist                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaMutator_LoadGameFeature::OnPlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_LoadGameFeature", "OnPlaylistDataReady");

	Params::FortAthenaMutator_LoadGameFeature_OnPlaylistDataReady Parms{};

	Parms.GameState = GameState;
	Parms.Playlist = Playlist;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_RemoveGameFeatures.OnPlaylistDataReady
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class AFortGameStateAthena*             GameState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortPlaylist*              Playlist                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaMutator_RemoveGameFeatures::OnPlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_RemoveGameFeatures", "OnPlaylistDataReady");

	Params::FortAthenaMutator_RemoveGameFeatures_OnPlaylistDataReady Parms{};

	Parms.GameState = GameState;
	Parms.Playlist = Playlist;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.AddCSVEvent
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// const class FString&                    CSVEventName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::AddCSVEvent(const class FString& CSVEventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "AddCSVEvent");

	Params::FortCheatManager_SpecialEvent_AddCSVEvent Parms{};

	Parms.CSVEventName = std::move(CSVEventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.AutobalanceTargetScore
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::AutobalanceTargetScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "AutobalanceTargetScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ChangeWinCondition
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   NewGoalScore                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::ChangeWinCondition(float NewGoalScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ChangeWinCondition");

	Params::FortCheatManager_SpecialEvent_ChangeWinCondition Parms{};

	Parms.NewGoalScore = NewGoalScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.CloseParachutes
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::CloseParachutes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "CloseParachutes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.PauseWinCondition
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bLockScores                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::PauseWinCondition(bool bLockScores)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "PauseWinCondition");

	Params::FortCheatManager_SpecialEvent_PauseWinCondition Parms{};

	Parms.bLockScores = bLockScores;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.PlacePlayersInAircraft
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::PlacePlayersInAircraft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "PlacePlayersInAircraft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ResetMatchTimeToPrevious
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::ResetMatchTimeToPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ResetMatchTimeToPrevious");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ResetSpecialEventAircraft
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::ResetSpecialEventAircraft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ResetSpecialEventAircraft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ResetWinCondition
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::ResetWinCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ResetWinCondition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ResetWinConditionProgressToZero
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::ResetWinConditionProgressToZero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ResetWinConditionProgressToZero");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ResumeWinCondition
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::ResumeWinCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ResumeWinCondition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SendToNightNight
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::SendToNightNight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SendToNightNight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SetDestroyVehiclesInStorm
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bDestroyVehiclesInStorm                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::SetDestroyVehiclesInStorm(bool bDestroyVehiclesInStorm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SetDestroyVehiclesInStorm");

	Params::FortCheatManager_SpecialEvent_SetDestroyVehiclesInStorm Parms{};

	Parms.bDestroyVehiclesInStorm = bDestroyVehiclesInStorm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SetIsSimulatingDamage
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bIsSimulating                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::SetIsSimulatingDamage(bool bIsSimulating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SetIsSimulatingDamage");

	Params::FortCheatManager_SpecialEvent_SetIsSimulatingDamage Parms{};

	Parms.bIsSimulating = bIsSimulating;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SetLockingOnFocalPoint
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bInLockingOnFocalPoint                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::SetLockingOnFocalPoint(bool bInLockingOnFocalPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SetLockingOnFocalPoint");

	Params::FortCheatManager_SpecialEvent_SetLockingOnFocalPoint Parms{};

	Parms.bInLockingOnFocalPoint = bInLockingOnFocalPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SetMatchTime
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   NewMatchTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::SetMatchTime(int32 NewMatchTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SetMatchTime");

	Params::FortCheatManager_SpecialEvent_SetMatchTime Parms{};

	Parms.NewMatchTime = NewMatchTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SetReturnToMainMenuDelay
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   MinDelayReturnToMainMenu                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDelayReturnToMainMenu                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::SetReturnToMainMenuDelay(float MinDelayReturnToMainMenu, float MaxDelayReturnToMainMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SetReturnToMainMenuDelay");

	Params::FortCheatManager_SpecialEvent_SetReturnToMainMenuDelay Parms{};

	Parms.MinDelayReturnToMainMenu = MinDelayReturnToMainMenu;
	Parms.MaxDelayReturnToMainMenu = MaxDelayReturnToMainMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ShrinkSafeZone
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::ShrinkSafeZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ShrinkSafeZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SpecialEventClearAdditionalViewpoint
// (Final, Exec, Native, Protected)

void UFortCheatManager_SpecialEvent::SpecialEventClearAdditionalViewpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SpecialEventClearAdditionalViewpoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.SpecialEventSetAdditionalViewpoint
// (Final, Exec, Native, Protected)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::SpecialEventSetAdditionalViewpoint(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "SpecialEventSetAdditionalViewpoint");

	Params::FortCheatManager_SpecialEvent_SpecialEventSetAdditionalViewpoint Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.StartEventScript
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   InStartingIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::StartEventScript(int32 InStartingIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "StartEventScript");

	Params::FortCheatManager_SpecialEvent_StartEventScript Parms{};

	Parms.InStartingIndex = InStartingIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.TeleportAllPlayers
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   SafeZoneIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::TeleportAllPlayers(int32 SafeZoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "TeleportAllPlayers");

	Params::FortCheatManager_SpecialEvent_TeleportAllPlayers Parms{};

	Parms.SafeZoneIndex = SafeZoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.ToggleDisableParachutes
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bIsDisabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::ToggleDisableParachutes(bool bIsDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "ToggleDisableParachutes");

	Params::FortCheatManager_SpecialEvent_ToggleDisableParachutes Parms{};

	Parms.bIsDisabled = bIsDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent.UnloadTerrainMaps
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// class FName                             MapTag                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_SpecialEvent::UnloadTerrainMaps(class FName MapTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_SpecialEvent", "UnloadTerrainMaps");

	Params::FortCheatManager_SpecialEvent_UnloadTerrainMaps Parms{};

	Parms.MapTag = MapTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.AddClientCSVEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CSVEventName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::AddClientCSVEvent(const class FString& CSVEventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "AddClientCSVEvent");

	Params::FortAthenaMutator_SpecialEvent_AddClientCSVEvent Parms{};

	Parms.CSVEventName = std::move(CSVEventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.AddCSVEvent
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CSVEventName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRepToClient                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::AddCSVEvent(const class FString& CSVEventName, bool bShouldRepToClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "AddCSVEvent");

	Params::FortAthenaMutator_SpecialEvent_AddCSVEvent Parms{};

	Parms.CSVEventName = std::move(CSVEventName);
	Parms.bShouldRepToClient = bShouldRepToClient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.AddToBlockedNativeActions
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     Actions                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bCancelAbilities                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::AddToBlockedNativeActions(const struct FGameplayTagContainer& Actions, const bool bCancelAbilities)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "AddToBlockedNativeActions");

	Params::FortAthenaMutator_SpecialEvent_AddToBlockedNativeActions Parms{};

	Parms.Actions = std::move(Actions);
	Parms.bCancelAbilities = bCancelAbilities;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.AutobalanceTargetScore
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::AutobalanceTargetScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "AutobalanceTargetScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ChangeWinCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewGoalScore                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::ChangeWinCondition(float NewGoalScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ChangeWinCondition");

	Params::FortAthenaMutator_SpecialEvent_ChangeWinCondition Parms{};

	Parms.NewGoalScore = NewGoalScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ClearAdditionalViewpoint
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ClearAdditionalViewpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ClearAdditionalViewpoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ClearBlockedNativeActions
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ClearBlockedNativeActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ClearBlockedNativeActions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.CloseParachutes
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::CloseParachutes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "CloseParachutes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.FlushUnhandledPlayerControllers
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::FlushUnhandledPlayerControllers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "FlushUnhandledPlayerControllers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ForceSafeZoneFinalLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewFinalLocation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultAircraftOffsetFromMidLine                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDefaultMidlineAngle                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDefaultMidlineAngle                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::ForceSafeZoneFinalLocation(const struct FVector& NewFinalLocation, float DefaultAircraftOffsetFromMidLine, float MinDefaultMidlineAngle, float MaxDefaultMidlineAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ForceSafeZoneFinalLocation");

	Params::FortAthenaMutator_SpecialEvent_ForceSafeZoneFinalLocation Parms{};

	Parms.NewFinalLocation = std::move(NewFinalLocation);
	Parms.DefaultAircraftOffsetFromMidLine = DefaultAircraftOffsetFromMidLine;
	Parms.MinDefaultMidlineAngle = MinDefaultMidlineAngle;
	Parms.MaxDefaultMidlineAngle = MaxDefaultMidlineAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.JumpToSafeZonePhase
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   PawnSpawnCenterLocation                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PawnSpawnMinDistance                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PawnSpawnMaxDistance                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::JumpToSafeZonePhase(const struct FVector& PawnSpawnCenterLocation, float PawnSpawnMinDistance, float PawnSpawnMaxDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "JumpToSafeZonePhase");

	Params::FortAthenaMutator_SpecialEvent_JumpToSafeZonePhase Parms{};

	Parms.PawnSpawnCenterLocation = std::move(PawnSpawnCenterLocation);
	Parms.PawnSpawnMinDistance = PawnSpawnMinDistance;
	Parms.PawnSpawnMaxDistance = PawnSpawnMaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.NotifyClientsGameResumed
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::NotifyClientsGameResumed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "NotifyClientsGameResumed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnActorPreSpawnInitialization
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnActorPreSpawnInitialization(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnActorPreSpawnInitialization");

	Params::FortAthenaMutator_SpecialEvent_OnActorPreSpawnInitialization Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnActorSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnActorSpawned(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnActorSpawned");

	Params::FortAthenaMutator_SpecialEvent_OnActorSpawned Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnAircraftEnteredDropZone
// (Final, Native, Protected)
// Parameters:
// class AFortAthenaAircraft*              FortAthenaAircraft                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnAircraftEnteredDropZone(class AFortAthenaAircraft* FortAthenaAircraft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnAircraftEnteredDropZone");

	Params::FortAthenaMutator_SpecialEvent_OnAircraftEnteredDropZone Parms{};

	Parms.FortAthenaAircraft = FortAthenaAircraft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnAircraftExitedDropZone
// (Final, Native, Protected)
// Parameters:
// class AFortAthenaAircraft*              FortAthenaAircraft                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnAircraftExitedDropZone(class AFortAthenaAircraft* FortAthenaAircraft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnAircraftExitedDropZone");

	Params::FortAthenaMutator_SpecialEvent_OnAircraftExitedDropZone Parms{};

	Parms.FortAthenaAircraft = FortAthenaAircraft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnAircraftFlightEnded
// (Final, Native, Protected)
// Parameters:
// class AFortAthenaAircraft*              FortAthenaAircraft                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnAircraftFlightEnded(class AFortAthenaAircraft* FortAthenaAircraft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnAircraftFlightEnded");

	Params::FortAthenaMutator_SpecialEvent_OnAircraftFlightEnded Parms{};

	Parms.FortAthenaAircraft = FortAthenaAircraft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnGamePhaseStepChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const TScriptInterface<class IFortSafeZoneInterface>&SafeZoneInterface                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAthenaGamePhaseStep              GamePhaseStep                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnGamePhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnGamePhaseStepChanged");

	Params::FortAthenaMutator_SpecialEvent_OnGamePhaseStepChanged Parms{};

	Parms.SafeZoneInterface = SafeZoneInterface;
	Parms.GamePhaseStep = GamePhaseStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnGameViewportActivationChanged
// (Final, Native, Public)
// Parameters:
// bool                                    bHasFocus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnGameViewportActivationChanged(bool bHasFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnGameViewportActivationChanged");

	Params::FortAthenaMutator_SpecialEvent_OnGameViewportActivationChanged Parms{};

	Parms.bHasFocus = bHasFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_AdditionalViewpoint
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_AdditionalViewpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_AdditionalViewpoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_Aircraft
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_Aircraft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_Aircraft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_AllPlayerTeleportedCount
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_AllPlayerTeleportedCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_AllPlayerTeleportedCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_bCanStreamBuildingFoundationsIn
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_bCanStreamBuildingFoundationsIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_bCanStreamBuildingFoundationsIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_bDisableHUD
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_bDisableHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_bDisableHUD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_bLockingOnFocalPoint
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_bLockingOnFocalPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_bLockingOnFocalPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_bPlayersAreInvincible
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_bPlayersAreInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_bPlayersAreInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_DelayPlayersFromReturningToLobbyData
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_DelayPlayersFromReturningToLobbyData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_DelayPlayersFromReturningToLobbyData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_GameResumed
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_GameResumed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_GameResumed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_LastCSVEventName
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_LastCSVEventName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_LastCSVEventName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnRep_TerrainMapsToUnload
// (Final, Native, Protected)

void AFortAthenaMutator_SpecialEvent::OnRep_TerrainMapsToUnload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnRep_TerrainMapsToUnload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.OnWarmUpTeleportComplete
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::OnWarmUpTeleportComplete(class AFortPlayerPawn* PlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "OnWarmUpTeleportComplete");

	Params::FortAthenaMutator_SpecialEvent_OnWarmUpTeleportComplete Parms{};

	Parms.PlayerPawn = PlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.PauseStormDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::PauseStormDamage(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "PauseStormDamage");

	Params::FortAthenaMutator_SpecialEvent_PauseStormDamage Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.PauseStormProgression
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::PauseStormProgression(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "PauseStormProgression");

	Params::FortAthenaMutator_SpecialEvent_PauseStormProgression Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.PauseSupplyDrops
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::PauseSupplyDrops(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "PauseSupplyDrops");

	Params::FortAthenaMutator_SpecialEvent_PauseSupplyDrops Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.PauseWinCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLockScores                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::PauseWinCondition(bool bLockScores)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "PauseWinCondition");

	Params::FortAthenaMutator_SpecialEvent_PauseWinCondition Parms{};

	Parms.bLockScores = bLockScores;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.PlacePlayersInAircraft
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::PlacePlayersInAircraft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "PlacePlayersInAircraft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.PopSpecialEventEmoteInputComponent
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::PopSpecialEventEmoteInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "PopSpecialEventEmoteInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.PushSpecialEventEmoteInputComponent
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::PushSpecialEventEmoteInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "PushSpecialEventEmoteInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.RemoveFromBlockedNativeActions
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     Actions                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::RemoveFromBlockedNativeActions(const struct FGameplayTagContainer& Actions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "RemoveFromBlockedNativeActions");

	Params::FortAthenaMutator_SpecialEvent_RemoveFromBlockedNativeActions Parms{};

	Parms.Actions = std::move(Actions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ResetMatchTimeToPrevious
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ResetMatchTimeToPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ResetMatchTimeToPrevious");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ResetSafeZoneOverrideAfterEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MinResetSafeZoneIndex                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDelayReturnToMainMenu                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDelayReturnToMainMenu                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::ResetSafeZoneOverrideAfterEvent(int32 MinResetSafeZoneIndex, float MinDelayReturnToMainMenu, float MaxDelayReturnToMainMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ResetSafeZoneOverrideAfterEvent");

	Params::FortAthenaMutator_SpecialEvent_ResetSafeZoneOverrideAfterEvent Parms{};

	Parms.MinResetSafeZoneIndex = MinResetSafeZoneIndex;
	Parms.MinDelayReturnToMainMenu = MinDelayReturnToMainMenu;
	Parms.MaxDelayReturnToMainMenu = MaxDelayReturnToMainMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ResetSpecialEventAircraft
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ResetSpecialEventAircraft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ResetSpecialEventAircraft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ResetWinCondition
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ResetWinCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ResetWinCondition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ResetWinConditionProgressToZero
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ResetWinConditionProgressToZero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ResetWinConditionProgressToZero");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ResumeWinCondition
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ResumeWinCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ResumeWinCondition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SendToNightNight
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::SendToNightNight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SendToNightNight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetAdditionalViewpoint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetAdditionalViewpoint(const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetAdditionalViewpoint");

	Params::FortAthenaMutator_SpecialEvent_SetAdditionalViewpoint Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetCanStreamBuildingFoundationsIn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetCanStreamBuildingFoundationsIn(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetCanStreamBuildingFoundationsIn");

	Params::FortAthenaMutator_SpecialEvent_SetCanStreamBuildingFoundationsIn Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetDestroyVehiclesInStorm
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDestroyVehiclesInStorm                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetDestroyVehiclesInStorm(bool bDestroyVehiclesInStorm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetDestroyVehiclesInStorm");

	Params::FortAthenaMutator_SpecialEvent_SetDestroyVehiclesInStorm Parms{};

	Parms.bDestroyVehiclesInStorm = bDestroyVehiclesInStorm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetIsSimulatingDamage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsSimulating                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetIsSimulatingDamage(bool bIsSimulating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetIsSimulatingDamage");

	Params::FortAthenaMutator_SpecialEvent_SetIsSimulatingDamage Parms{};

	Parms.bIsSimulating = bIsSimulating;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetLockingOnFocalPoint
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInLockingOnFocalPoint                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetLockingOnFocalPoint(bool bInLockingOnFocalPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetLockingOnFocalPoint");

	Params::FortAthenaMutator_SpecialEvent_SetLockingOnFocalPoint Parms{};

	Parms.bInLockingOnFocalPoint = bInLockingOnFocalPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetMatchTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMatchTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetMatchTime(int32 NewMatchTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetMatchTime");

	Params::FortAthenaMutator_SpecialEvent_SetMatchTime Parms{};

	Parms.NewMatchTime = NewMatchTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetNamedWeightForContainerLootRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       WeightName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetNamedWeightForContainerLootRoll(const class FName WeightName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetNamedWeightForContainerLootRoll");

	Params::FortAthenaMutator_SpecialEvent_SetNamedWeightForContainerLootRoll Parms{};

	Parms.WeightName = WeightName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetReturnToMainMenuDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   MinDelayReturnToMainMenu                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDelayReturnToMainMenu                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetReturnToMainMenuDelay(float MinDelayReturnToMainMenu, float MaxDelayReturnToMainMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetReturnToMainMenuDelay");

	Params::FortAthenaMutator_SpecialEvent_SetReturnToMainMenuDelay Parms{};

	Parms.MinDelayReturnToMainMenu = MinDelayReturnToMainMenu;
	Parms.MaxDelayReturnToMainMenu = MaxDelayReturnToMainMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SetWeightForContainerLootRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Weight                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SetWeightForContainerLootRoll(const float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SetWeightForContainerLootRoll");

	Params::FortAthenaMutator_SpecialEvent_SetWeightForContainerLootRoll Parms{};

	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ShrinkSafeZone
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::ShrinkSafeZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ShrinkSafeZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.StartSafeZoneOverrideForEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SafeZoneIndexForEvent                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::StartSafeZoneOverrideForEvent(int32 SafeZoneIndexForEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "StartSafeZoneOverrideForEvent");

	Params::FortAthenaMutator_SpecialEvent_StartSafeZoneOverrideForEvent Parms{};

	Parms.SafeZoneIndexForEvent = SafeZoneIndexForEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.SwapBodyParts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             ArrayIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerController*            FortPC                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::SwapBodyParts(const int32 ArrayIndex, class AFortPlayerController* FortPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "SwapBodyParts");

	Params::FortAthenaMutator_SpecialEvent_SwapBodyParts Parms{};

	Parms.ArrayIndex = ArrayIndex;
	Parms.FortPC = FortPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.TeleportAllPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     EventTags                                              (Parm, NativeAccessSpecifierPublic)
// int32                                   TeleportsPerFrame                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SafeZoneIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::TeleportAllPlayers(const struct FGameplayTagContainer& EventTags, int32 TeleportsPerFrame, int32 SafeZoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "TeleportAllPlayers");

	Params::FortAthenaMutator_SpecialEvent_TeleportAllPlayers Parms{};

	Parms.EventTags = std::move(EventTags);
	Parms.TeleportsPerFrame = TeleportsPerFrame;
	Parms.SafeZoneIndex = SafeZoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ToggleAllPlayersInvincibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInvincible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::ToggleAllPlayersInvincibility(bool bInvincible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ToggleAllPlayersInvincibility");

	Params::FortAthenaMutator_SpecialEvent_ToggleAllPlayersInvincibility Parms{};

	Parms.bInvincible = bInvincible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ToggleDisableParachutes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::ToggleDisableParachutes(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ToggleDisableParachutes");

	Params::FortAthenaMutator_SpecialEvent_ToggleDisableParachutes Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ToggleDisableWeapons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDisableWeapons                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::ToggleDisableWeapons(bool bDisableWeapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ToggleDisableWeapons");

	Params::FortAthenaMutator_SpecialEvent_ToggleDisableWeapons Parms{};

	Parms.bDisableWeapons = bDisableWeapons;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.ToggleHUDs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHide                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::ToggleHUDs(bool bHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "ToggleHUDs");

	Params::FortAthenaMutator_SpecialEvent_ToggleHUDs Parms{};

	Parms.bHide = bHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.UnloadTerrainMaps
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              MapTag                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_SpecialEvent::UnloadTerrainMaps(const struct FGameplayTag& MapTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "UnloadTerrainMaps");

	Params::FortAthenaMutator_SpecialEvent_UnloadTerrainMaps Parms{};

	Parms.MapTag = std::move(MapTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.WarmUpIslandUpdated
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaMutator_SpecialEvent::WarmUpIslandUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "WarmUpIslandUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.GetHasInfiniteSafeZonePhase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortAthenaMutator_SpecialEvent::GetHasInfiniteSafeZonePhase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "GetHasInfiniteSafeZonePhase");

	Params::FortAthenaMutator_SpecialEvent_GetHasInfiniteSafeZonePhase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent.GetScript
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASpecialEventScript*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASpecialEventScript* AFortAthenaMutator_SpecialEvent::GetScript() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_SpecialEvent", "GetScript");

	Params::FortAthenaMutator_SpecialEvent_GetScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.FortCharacterMovementMutator.OnFortPawnChanged
// (Final, Native, Protected)
// Parameters:
// class AFortPawn*                        NewPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortCharacterMovementMutator::OnFortPawnChanged(class AFortPawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCharacterMovementMutator", "OnFortPawnChanged");

	Params::FortCharacterMovementMutator_OnFortPawnChanged Parms{};

	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_GameplayCinematic.HideHUDElementsForLoadingScreen
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bHideElements                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_GameplayCinematic::HideHUDElementsForLoadingScreen(const bool bHideElements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_GameplayCinematic", "HideHUDElementsForLoadingScreen");

	Params::FortControllerComponent_GameplayCinematic_HideHUDElementsForLoadingScreen Parms{};

	Parms.bHideElements = bHideElements;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_GameplayCinematic.OnRep_bIsReadyForGameplay
// (Final, Native, Protected)

void UFortControllerComponent_GameplayCinematic::OnRep_bIsReadyForGameplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_GameplayCinematic", "OnRep_bIsReadyForGameplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_GameplayCinematic.ServerOnGameplayIntroFinished
// (Net, NetReliable, Native, Event, Protected, NetServer)

void UFortControllerComponent_GameplayCinematic::ServerOnGameplayIntroFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_GameplayCinematic", "ServerOnGameplayIntroFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_GameplayCinematic.SetReadyForGameplay
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsReady                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_GameplayCinematic::SetReadyForGameplay(bool bIsReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_GameplayCinematic", "SetReadyForGameplay");

	Params::FortControllerComponent_GameplayCinematic_SetReadyForGameplay Parms{};

	Parms.bIsReady = bIsReady;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_GameplayCinematic.ShowCinematicWidget
// (Final, BlueprintCosmetic, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             WidgetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_GameplayCinematic::ShowCinematicWidget(class FName WidgetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_GameplayCinematic", "ShowCinematicWidget");

	Params::FortControllerComponent_GameplayCinematic_ShowCinematicWidget Parms{};

	Parms.WidgetName = WidgetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_SpecialEvent.SendSpecialClientEvent
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_SpecialEvent::SendSpecialClientEvent(const struct FGameplayTag& EventTag, const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_SpecialEvent", "SendSpecialClientEvent");

	Params::FortControllerComponent_SpecialEvent_SendSpecialClientEvent Parms{};

	Parms.EventTag = std::move(EventTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortControllerComponent_SpecialEvent.ServerHandleSpecialClientEvent
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_SpecialEvent::ServerHandleSpecialClientEvent(const struct FGameplayTag& EventTag, const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_SpecialEvent", "ServerHandleSpecialClientEvent");

	Params::FortControllerComponent_SpecialEvent_ServerHandleSpecialClientEvent Parms{};

	Parms.EventTag = std::move(EventTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortSpecialRelevancyActorSpawner.BP_OnActorSpawnedPerRelevancyGroup
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class AActor*>&            InSpawnedActors                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AFortSpecialRelevancyActorSpawner::BP_OnActorSpawnedPerRelevancyGroup(const TArray<class AActor*>& InSpawnedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortSpecialRelevancyActorSpawner", "BP_OnActorSpawnedPerRelevancyGroup");

	Params::FortSpecialRelevancyActorSpawner_BP_OnActorSpawnedPerRelevancyGroup Parms{};

	Parms.InSpawnedActors = std::move(InSpawnedActors);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.UpdateConstantQ
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventAudioAnalysisBaseComponent::UpdateConstantQ(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "UpdateConstantQ");

	Params::SpecialEventAudioAnalysisBaseComponent_UpdateConstantQ Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.UpdateLoudness
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventAudioAnalysisBaseComponent::UpdateLoudness(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "UpdateLoudness");

	Params::SpecialEventAudioAnalysisBaseComponent_UpdateLoudness Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.UpdateOnset
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventAudioAnalysisBaseComponent::UpdateOnset(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "UpdateOnset");

	Params::SpecialEventAudioAnalysisBaseComponent_UpdateOnset Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.UpdateTime
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             NewTime                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventAudioAnalysisBaseComponent::UpdateTime(const float NewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "UpdateTime");

	Params::SpecialEventAudioAnalysisBaseComponent_UpdateTime Parms{};

	Parms.NewTime = NewTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.GetConstantQNRT
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UConstantQNRT*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UConstantQNRT* USpecialEventAudioAnalysisBaseComponent::GetConstantQNRT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "GetConstantQNRT");

	Params::SpecialEventAudioAnalysisBaseComponent_GetConstantQNRT Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.GetCurrentNormalizedLoudness
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpecialEventAudioAnalysisBaseComponent::GetCurrentNormalizedLoudness() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "GetCurrentNormalizedLoudness");

	Params::SpecialEventAudioAnalysisBaseComponent_GetCurrentNormalizedLoudness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.GetLoudnessNRT
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULoudnessNRT*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULoudnessNRT* USpecialEventAudioAnalysisBaseComponent::GetLoudnessNRT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "GetLoudnessNRT");

	Params::SpecialEventAudioAnalysisBaseComponent_GetLoudnessNRT Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent.GetOnsetNRT
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UOnsetNRT*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOnsetNRT* USpecialEventAudioAnalysisBaseComponent::GetOnsetNRT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioAnalysisBaseComponent", "GetOnsetNRT");

	Params::SpecialEventAudioAnalysisBaseComponent_GetOnsetNRT Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioHapticsComponent.StartHaptics
// (Final, Native, Public, BlueprintCallable)

void USpecialEventAudioHapticsComponent::StartHaptics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioHapticsComponent", "StartHaptics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioHapticsComponent.StopHaptics
// (Final, Native, Public, BlueprintCallable)

void USpecialEventAudioHapticsComponent::StopHaptics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioHapticsComponent", "StopHaptics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventAudioHapticsComponent.AreHapticsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpecialEventAudioHapticsComponent::AreHapticsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventAudioHapticsComponent", "AreHapticsActive");

	Params::SpecialEventAudioHapticsComponent_AreHapticsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.AddSpecialEventKillFeedEntry
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AFortPlayerStateAthena*     VictimPlayerState                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AFortPlayerStateAthena*     KillerPlayerState                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      NonPlayerVictimName                                    (ConstParm, Parm, NativeAccessSpecifierPublic)
// const class FText&                      NonPlayerKillerName                                    (ConstParm, Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              DeathCauseTag                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EDeathCauseReason                 DeathCauseReason                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::AddSpecialEventKillFeedEntry(const class UObject* WorldContextObject, const class AFortPlayerStateAthena* VictimPlayerState, const class AFortPlayerStateAthena* KillerPlayerState, const class FText& NonPlayerVictimName, const class FText& NonPlayerKillerName, const struct FGameplayTag& DeathCauseTag, const EDeathCauseReason DeathCauseReason, const float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "AddSpecialEventKillFeedEntry");

	Params::SpecialEventGameplayLibrary_AddSpecialEventKillFeedEntry Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.VictimPlayerState = VictimPlayerState;
	Parms.KillerPlayerState = KillerPlayerState;
	Parms.NonPlayerVictimName = std::move(NonPlayerVictimName);
	Parms.NonPlayerKillerName = std::move(NonPlayerKillerName);
	Parms.DeathCauseTag = std::move(DeathCauseTag);
	Parms.DeathCauseReason = DeathCauseReason;
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.AddSpecialEventRecentElimination
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AFortPlayerStateAthena*     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::AddSpecialEventRecentElimination(const struct FVector& Location, const class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "AddSpecialEventRecentElimination");

	Params::SpecialEventGameplayLibrary_AddSpecialEventRecentElimination Parms{};

	Parms.Location = std::move(Location);
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.CreateSpecialEventPlayerEliminationWorldMarker
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AFortPlayerControllerAthena*LocalController                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AFortPlayerStateAthena*     VictimPlayerState                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DeathLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::CreateSpecialEventPlayerEliminationWorldMarker(const class AFortPlayerControllerAthena* LocalController, const class AFortPlayerStateAthena* VictimPlayerState, const struct FVector& DeathLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "CreateSpecialEventPlayerEliminationWorldMarker");

	Params::SpecialEventGameplayLibrary_CreateSpecialEventPlayerEliminationWorldMarker Parms{};

	Parms.LocalController = LocalController;
	Parms.VictimPlayerState = VictimPlayerState;
	Parms.DeathLocation = std::move(DeathLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.FindGameplayCinematicComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortControllerComponent_GameplayCinematic*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortControllerComponent_GameplayCinematic* USpecialEventGameplayLibrary::FindGameplayCinematicComponent(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "FindGameplayCinematicComponent");

	Params::SpecialEventGameplayLibrary_FindGameplayCinematicComponent Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.FindSpecialEventComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortControllerComponent_SpecialEvent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortControllerComponent_SpecialEvent* USpecialEventGameplayLibrary::FindSpecialEventComponent(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "FindSpecialEventComponent");

	Params::SpecialEventGameplayLibrary_FindSpecialEventComponent Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.ForceDestroyComponents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UActorComponent*>&   Components                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const bool                              bPromoteChildren                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LogContext                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::ForceDestroyComponents(const TArray<class UActorComponent*>& Components, const bool bPromoteChildren, const class FString& LogContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "ForceDestroyComponents");

	Params::SpecialEventGameplayLibrary_ForceDestroyComponents Parms{};

	Parms.Components = std::move(Components);
	Parms.bPromoteChildren = bPromoteChildren;
	Parms.LogContext = std::move(LogContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.ForceUpdateGrass
// (Final, BlueprintCosmetic, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::ForceUpdateGrass(class UObject* WorldContextObject, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "ForceUpdateGrass");

	Params::SpecialEventGameplayLibrary_ForceUpdateGrass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.GetHasInfiniteSafeZonePhase
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpecialEventGameplayLibrary::GetHasInfiniteSafeZonePhase(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "GetHasInfiniteSafeZonePhase");

	Params::SpecialEventGameplayLibrary_GetHasInfiniteSafeZonePhase Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.GetLocalPlayerLoadout
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortAthenaLoadout               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortAthenaLoadout USpecialEventGameplayLibrary::GetLocalPlayerLoadout(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "GetLocalPlayerLoadout");

	Params::SpecialEventGameplayLibrary_GetLocalPlayerLoadout Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.GetSpecialEventMutator
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaMutator_SpecialEvent*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortAthenaMutator_SpecialEvent* USpecialEventGameplayLibrary::GetSpecialEventMutator(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "GetSpecialEventMutator");

	Params::SpecialEventGameplayLibrary_GetSpecialEventMutator Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.GetSpecialEventPlayerDisplayName
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AFortPlayerControllerAthena*LocalController                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AFortPlayerStateAthena*     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USpecialEventGameplayLibrary::GetSpecialEventPlayerDisplayName(const class AFortPlayerControllerAthena* LocalController, const class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "GetSpecialEventPlayerDisplayName");

	Params::SpecialEventGameplayLibrary_GetSpecialEventPlayerDisplayName Parms{};

	Parms.LocalController = LocalController;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.GetSpecialEventScript
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASpecialEventScript*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASpecialEventScript* USpecialEventGameplayLibrary::GetSpecialEventScript(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "GetSpecialEventScript");

	Params::SpecialEventGameplayLibrary_GetSpecialEventScript Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.HideSkydivingShadowProxy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::HideSkydivingShadowProxy(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "HideSkydivingShadowProxy");

	Params::SpecialEventGameplayLibrary_HideSkydivingShadowProxy Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.SetNextLoadingScreen
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UAthenaLoadingScreenItemDefinition*LoadingScreenDefinition                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bCanShowLoadingBar                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::SetNextLoadingScreen(class UObject* WorldContextObject, const class UAthenaLoadingScreenItemDefinition* LoadingScreenDefinition, const bool bCanShowLoadingBar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "SetNextLoadingScreen");

	Params::SpecialEventGameplayLibrary_SetNextLoadingScreen Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadingScreenDefinition = LoadingScreenDefinition;
	Parms.bCanShowLoadingBar = bCanShowLoadingBar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventGameplayLibrary.StreamOutAllBuildingFoundations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventGameplayLibrary::StreamOutAllBuildingFoundations(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventGameplayLibrary", "StreamOutAllBuildingFoundations");

	Params::SpecialEventGameplayLibrary_StreamOutAllBuildingFoundations Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.FortAsyncAction_GameplayCinematicComponentReady.FindGameplayCinematicComponentAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*                      Conroller                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortAsyncAction_GameplayCinematicComponentReady*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortAsyncAction_GameplayCinematicComponentReady* UFortAsyncAction_GameplayCinematicComponentReady::FindGameplayCinematicComponentAsync(class AController* Conroller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAsyncAction_GameplayCinematicComponentReady", "FindGameplayCinematicComponentAsync");

	Params::FortAsyncAction_GameplayCinematicComponentReady_FindGameplayCinematicComponentAsync Parms{};

	Parms.Conroller = Conroller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.DebugActivatePhase
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ASpecialEventPhase::DebugActivatePhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "DebugActivatePhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.OnPhaseActivation_Client
// (Event, Protected, BlueprintEvent)

void ASpecialEventPhase::OnPhaseActivation_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "OnPhaseActivation_Client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.OnPhaseActivation_Server
// (Event, Protected, BlueprintEvent)

void ASpecialEventPhase::OnPhaseActivation_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "OnPhaseActivation_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.OnPhaseDeactivation_Client
// (Event, Protected, BlueprintEvent)

void ASpecialEventPhase::OnPhaseDeactivation_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "OnPhaseDeactivation_Client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.OnPhaseDeactivation_Server
// (Event, Protected, BlueprintEvent)

void ASpecialEventPhase::OnPhaseDeactivation_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "OnPhaseDeactivation_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.OnPhaseFinished
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ASpecialEventPhase::OnPhaseFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "OnPhaseFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.OnRep_PhaseState
// (Final, Native, Protected)

void ASpecialEventPhase::OnRep_PhaseState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "OnRep_PhaseState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.PrePhaseActivation_Server
// (Event, Protected, BlueprintEvent)

void ASpecialEventPhase::PrePhaseActivation_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "PrePhaseActivation_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.SetHUDElementVisibility
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     HUDElementTags                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bHideElements                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASpecialEventPhase::SetHUDElementVisibility(const struct FGameplayTagContainer& HUDElementTags, bool bHideElements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "SetHUDElementVisibility");

	Params::SpecialEventPhase_SetHUDElementVisibility Parms{};

	Parms.HUDElementTags = std::move(HUDElementTags);
	Parms.bHideElements = bHideElements;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventPhase.GetPhaseTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag ASpecialEventPhase::GetPhaseTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventPhase", "GetPhaseTag");

	Params::SpecialEventPhase_GetPhaseTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayRuntime.SpecialEventScript.AttemptFinishPhase
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              PhaseTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASpecialEventScript::AttemptFinishPhase(const struct FGameplayTag& PhaseTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScript", "AttemptFinishPhase");

	Params::SpecialEventScript_AttemptFinishPhase Parms{};

	Parms.PhaseTag = std::move(PhaseTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventScript.AttemptStartNextPhase
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              CurrentPhaseTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASpecialEventScript::AttemptStartNextPhase(const struct FGameplayTag& CurrentPhaseTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScript", "AttemptStartNextPhase");

	Params::SpecialEventScript_AttemptStartNextPhase Parms{};

	Parms.CurrentPhaseTag = std::move(CurrentPhaseTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventScript.BP_OnScriptFinished
// (Event, Protected, BlueprintEvent)

void ASpecialEventScript::BP_OnScriptFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScript", "BP_OnScriptFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.SpecialEventScript.BP_OnScriptReady
// (Event, Protected, BlueprintEvent)

void ASpecialEventScript::BP_OnScriptReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScript", "BP_OnScriptReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayRuntime.SpecialEventScript.OnRep_ReplicatedActivePhaseIndex
// (Final, Native, Protected)

void ASpecialEventScript::OnRep_ReplicatedActivePhaseIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScript", "OnRep_ReplicatedActivePhaseIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventScript.StartEventAtIndex
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InStartingIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASpecialEventScript::StartEventAtIndex(int32 InStartingIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScript", "StartEventAtIndex");

	Params::SpecialEventScript_StartEventAtIndex Parms{};

	Parms.InStartingIndex = InStartingIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventScript.UpdateMasterSequence
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASpecialEventScript::UpdateMasterSequence(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScript", "UpdateMasterSequence");

	Params::SpecialEventScript_UpdateMasterSequence Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventScriptMeshActor.MeshRootResetEvent
// (Final, Exec, Native, Public)

void ASpecialEventScriptMeshActor::MeshRootResetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScriptMeshActor", "MeshRootResetEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventScriptMeshActor.MeshRootStartEvent
// (Final, Exec, Native, Public)

void ASpecialEventScriptMeshActor::MeshRootStartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScriptMeshActor", "MeshRootStartEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayRuntime.SpecialEventScriptMeshActor.OnRep_RootStartTime
// (Final, Native, Protected)

void ASpecialEventScriptMeshActor::OnRep_RootStartTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventScriptMeshActor", "OnRep_RootStartTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

