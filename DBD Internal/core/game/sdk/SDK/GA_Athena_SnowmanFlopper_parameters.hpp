#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_SnowmanFlopper

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_Athena_SnowmanFlopper.GA_Athena_SnowmanFlopper_C.ExecuteUbergraph_GA_Athena_SnowmanFlopper
// 0x0010 (0x0010 - 0x0000)
struct GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper) == 0x000004, "Wrong alignment on GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper");
static_assert(sizeof(GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper) == 0x000010, "Wrong size on GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper, EntryPoint) == 0x000000, "Member 'GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000004, "Member 'GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper, K2Node_Event_bWasCancelled) == 0x00000C, "Member 'GA_Athena_SnowmanFlopper_C_ExecuteUbergraph_GA_Athena_SnowmanFlopper::K2Node_Event_bWasCancelled' has a wrong offset!");

// Function GA_Athena_SnowmanFlopper.GA_Athena_SnowmanFlopper_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Athena_SnowmanFlopper_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_SnowmanFlopper_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Athena_SnowmanFlopper_C_K2_OnEndAbility");
static_assert(sizeof(GA_Athena_SnowmanFlopper_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Athena_SnowmanFlopper_C_K2_OnEndAbility");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Athena_SnowmanFlopper_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Athena_SnowmanFlopper.GA_Athena_SnowmanFlopper_C.Is Flying
// 0x0020 (0x0020 - 0x0000)
struct GA_Athena_SnowmanFlopper_C_Is_Flying final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortMovementComp_Character*            K2Node_DynamicCast_AsFort_Movement_Comp_Character; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_SnowmanFlopper_C_Is_Flying) == 0x000008, "Wrong alignment on GA_Athena_SnowmanFlopper_C_Is_Flying");
static_assert(sizeof(GA_Athena_SnowmanFlopper_C_Is_Flying) == 0x000020, "Wrong size on GA_Athena_SnowmanFlopper_C_Is_Flying");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_Is_Flying, NewParam) == 0x000000, "Member 'GA_Athena_SnowmanFlopper_C_Is_Flying::NewParam' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_Is_Flying, CallFunc_GetMovementComponent_ReturnValue) == 0x000008, "Member 'GA_Athena_SnowmanFlopper_C_Is_Flying::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_Is_Flying, K2Node_DynamicCast_AsFort_Movement_Comp_Character) == 0x000010, "Member 'GA_Athena_SnowmanFlopper_C_Is_Flying::K2Node_DynamicCast_AsFort_Movement_Comp_Character' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_Is_Flying, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Athena_SnowmanFlopper_C_Is_Flying::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_Is_Flying, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'GA_Athena_SnowmanFlopper_C_Is_Flying::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function GA_Athena_SnowmanFlopper.GA_Athena_SnowmanFlopper_C.K2_CanActivateAbility
// 0x0088 (0x0088 - 0x0000)
struct GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  K2Node_DynamicCast_AsFort_Player_Pawn_Athena;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility");
static_assert(sizeof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility) == 0x000088, "Wrong size on GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility, Handle) == 0x000048, "Member 'GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility, K2Node_DynamicCast_AsFort_Player_Pawn_Athena) == 0x000078, "Member 'GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility::K2Node_DynamicCast_AsFort_Player_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'GA_Athena_SnowmanFlopper_C_K2_CanActivateAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

