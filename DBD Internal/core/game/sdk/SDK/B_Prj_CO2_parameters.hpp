#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_CO2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_Prj_CO2.B_Prj_CO2_C.ExecuteUbergraph_B_Prj_CO2
// 0x0170 (0x0170 - 0x0000)
struct B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit_1;                                // 0x0008(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x00D8(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2) == 0x000008, "Wrong alignment on B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2");
static_assert(sizeof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2) == 0x000170, "Wrong size on B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, EntryPoint) == 0x000000, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_Hit_1) == 0x000008, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_Hit_1' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, Temp_bool_Has_Been_Initd_Variable) == 0x000094, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_MyComp) == 0x000098, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_Other) == 0x0000A0, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_OtherComp) == 0x0000A8, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_bSelfMoved) == 0x0000B0, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_HitLocation) == 0x0000B4, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_HitNormal) == 0x0000C0, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_NormalImpulse) == 0x0000CC, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, K2Node_Event_Hit) == 0x0000D8, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000164, "Member 'B_Prj_CO2_C_ExecuteUbergraph_B_Prj_CO2::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function B_Prj_CO2.B_Prj_CO2_C.ReceiveHit
// 0x00D0 (0x00D0 - 0x0000)
struct B_Prj_CO2_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation_0;                                     // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal_0;                                       // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0040(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Prj_CO2_C_ReceiveHit) == 0x000008, "Wrong alignment on B_Prj_CO2_C_ReceiveHit");
static_assert(sizeof(B_Prj_CO2_C_ReceiveHit) == 0x0000D0, "Wrong size on B_Prj_CO2_C_ReceiveHit");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, MyComp) == 0x000000, "Member 'B_Prj_CO2_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, Other) == 0x000008, "Member 'B_Prj_CO2_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, OtherComp) == 0x000010, "Member 'B_Prj_CO2_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'B_Prj_CO2_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, HitLocation_0) == 0x00001C, "Member 'B_Prj_CO2_C_ReceiveHit::HitLocation_0' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, HitNormal_0) == 0x000028, "Member 'B_Prj_CO2_C_ReceiveHit::HitNormal_0' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, NormalImpulse) == 0x000034, "Member 'B_Prj_CO2_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ReceiveHit, Hit) == 0x000040, "Member 'B_Prj_CO2_C_ReceiveHit::Hit' has a wrong offset!");

// Function B_Prj_CO2.B_Prj_CO2_C.OnStop
// 0x008C (0x008C - 0x0000)
struct B_Prj_CO2_C_OnStop final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Prj_CO2_C_OnStop) == 0x000004, "Wrong alignment on B_Prj_CO2_C_OnStop");
static_assert(sizeof(B_Prj_CO2_C_OnStop) == 0x00008C, "Wrong size on B_Prj_CO2_C_OnStop");
static_assert(offsetof(B_Prj_CO2_C_OnStop, Hit) == 0x000000, "Member 'B_Prj_CO2_C_OnStop::Hit' has a wrong offset!");

// Function B_Prj_CO2.B_Prj_CO2_C.ApplyWaterInRadiusIfCurieEnabled
// 0x0180 (0x0180 - 0x0000)
struct B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x008C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurieActive_ReturnValue;                // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x00C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x00EC(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled) == 0x000008, "Wrong alignment on B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled");
static_assert(sizeof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled) == 0x000180, "Wrong size on B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, HitResult) == 0x000000, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::HitResult' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_IsDedicatedServer_ReturnValue) == 0x00008C, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, Temp_int_Array_Index_Variable) == 0x000098, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, K2Node_MakeArray_Array) == 0x0000A0, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_GetActorScale3D_ReturnValue) == 0x0000B0, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_VSize_ReturnValue) == 0x0000BC, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000C0, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_IsCurieActive_ReturnValue) == 0x0000C4, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_IsCurieActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_SphereOverlapActors_OutActors) == 0x0000C8, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_SphereOverlapActors_ReturnValue) == 0x0000D8, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_Array_Length_ReturnValue) == 0x0000E8, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_MakeHitResult_ReturnValue) == 0x0000EC, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled, CallFunc_IsValid_ReturnValue) == 0x000179, "Member 'B_Prj_CO2_C_ApplyWaterInRadiusIfCurieEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

