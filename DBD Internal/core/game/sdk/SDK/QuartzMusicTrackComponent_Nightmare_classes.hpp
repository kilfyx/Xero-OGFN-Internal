#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuartzMusicTrackComponent_Nightmare

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "QuartzMusicTrackComponent_DataTracker_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass QuartzMusicTrackComponent_Nightmare.QuartzMusicTrackComponent_Nightmare_C
// 0x0050 (0x0208 - 0x01B8)
class UQuartzMusicTrackComponent_Nightmare_C final : public UQuartzMusicTrackComponent_DataTracker_C
{
public:
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_QuartzMusicTrackComponent_Nightmare_C; // 0x01B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCurveFloat*                            UnawareCurve;                                      // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AlertCurve;                                        // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AggressiveCurve;                                   // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventTag_Unaware;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventTag_Alert;                                    // 0x01E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventTag_Agressive;                                // 0x01E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurveFloat_Alerted;                                // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveFloat_Aggressive;                             // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveFloat_Unaware;                                // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpFloat_Unaware;                               // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpFloat_Alerted;                               // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpFloat_Aggressive;                            // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_QuartzMusicTrackComponent_Nightmare(int32 EntryPoint);
	void OnDataTrackerUpdate();
	void HandleMixState();
	void OnDataTrackerStart();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuartzMusicTrackComponent_Nightmare_C">();
	}
	static class UQuartzMusicTrackComponent_Nightmare_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzMusicTrackComponent_Nightmare_C>();
	}
};
static_assert(alignof(UQuartzMusicTrackComponent_Nightmare_C) == 0x000008, "Wrong alignment on UQuartzMusicTrackComponent_Nightmare_C");
static_assert(sizeof(UQuartzMusicTrackComponent_Nightmare_C) == 0x000208, "Wrong size on UQuartzMusicTrackComponent_Nightmare_C");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, UberGraphFrame_QuartzMusicTrackComponent_Nightmare_C) == 0x0001B8, "Member 'UQuartzMusicTrackComponent_Nightmare_C::UberGraphFrame_QuartzMusicTrackComponent_Nightmare_C' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, UnawareCurve) == 0x0001C0, "Member 'UQuartzMusicTrackComponent_Nightmare_C::UnawareCurve' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, AlertCurve) == 0x0001C8, "Member 'UQuartzMusicTrackComponent_Nightmare_C::AlertCurve' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, AggressiveCurve) == 0x0001D0, "Member 'UQuartzMusicTrackComponent_Nightmare_C::AggressiveCurve' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, EventTag_Unaware) == 0x0001D8, "Member 'UQuartzMusicTrackComponent_Nightmare_C::EventTag_Unaware' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, EventTag_Alert) == 0x0001E0, "Member 'UQuartzMusicTrackComponent_Nightmare_C::EventTag_Alert' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, EventTag_Agressive) == 0x0001E8, "Member 'UQuartzMusicTrackComponent_Nightmare_C::EventTag_Agressive' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, CurveFloat_Alerted) == 0x0001F0, "Member 'UQuartzMusicTrackComponent_Nightmare_C::CurveFloat_Alerted' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, CurveFloat_Aggressive) == 0x0001F4, "Member 'UQuartzMusicTrackComponent_Nightmare_C::CurveFloat_Aggressive' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, CurveFloat_Unaware) == 0x0001F8, "Member 'UQuartzMusicTrackComponent_Nightmare_C::CurveFloat_Unaware' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, InterpFloat_Unaware) == 0x0001FC, "Member 'UQuartzMusicTrackComponent_Nightmare_C::InterpFloat_Unaware' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, InterpFloat_Alerted) == 0x000200, "Member 'UQuartzMusicTrackComponent_Nightmare_C::InterpFloat_Alerted' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_Nightmare_C, InterpFloat_Aggressive) == 0x000204, "Member 'UQuartzMusicTrackComponent_Nightmare_C::InterpFloat_Aggressive' has a wrong offset!");

}

