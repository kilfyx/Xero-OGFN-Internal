#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HydrogenRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.AddBonusVictoryPointsForLockedCapturePoints
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Hydrogen_AddBonusVictoryPointsForLockedCapturePoints final
{
public:
	uint8                                         InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_AddBonusVictoryPointsForLockedCapturePoints) == 0x000001, "Wrong alignment on FortAthenaMutator_Hydrogen_AddBonusVictoryPointsForLockedCapturePoints");
static_assert(sizeof(FortAthenaMutator_Hydrogen_AddBonusVictoryPointsForLockedCapturePoints) == 0x000001, "Wrong size on FortAthenaMutator_Hydrogen_AddBonusVictoryPointsForLockedCapturePoints");
static_assert(offsetof(FortAthenaMutator_Hydrogen_AddBonusVictoryPointsForLockedCapturePoints, InTeam) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_AddBonusVictoryPointsForLockedCapturePoints::InTeam' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.CheckVictoryPoints
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaMutator_Hydrogen_CheckVictoryPoints final
{
public:
	float                                         TimePassed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_CheckVictoryPoints) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_CheckVictoryPoints");
static_assert(sizeof(FortAthenaMutator_Hydrogen_CheckVictoryPoints) == 0x000004, "Wrong size on FortAthenaMutator_Hydrogen_CheckVictoryPoints");
static_assert(offsetof(FortAthenaMutator_Hydrogen_CheckVictoryPoints, TimePassed) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_CheckVictoryPoints::TimePassed' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.EndGame
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Hydrogen_EndGame final
{
public:
	uint8                                         Winner;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_EndGame) == 0x000001, "Wrong alignment on FortAthenaMutator_Hydrogen_EndGame");
static_assert(sizeof(FortAthenaMutator_Hydrogen_EndGame) == 0x000001, "Wrong size on FortAthenaMutator_Hydrogen_EndGame");
static_assert(offsetof(FortAthenaMutator_Hydrogen_EndGame, Winner) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_EndGame::Winner' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GetActorOnPathLocation
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Hydrogen_GetActorOnPathLocation final
{
public:
	int32                                         InPathIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GetActorOnPathLocation) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_GetActorOnPathLocation");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GetActorOnPathLocation) == 0x000010, "Wrong size on FortAthenaMutator_Hydrogen_GetActorOnPathLocation");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetActorOnPathLocation, InPathIndex) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GetActorOnPathLocation::InPathIndex' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetActorOnPathLocation, ReturnValue) == 0x000004, "Member 'FortAthenaMutator_Hydrogen_GetActorOnPathLocation::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GetNextActorOnPathLocation
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation final
{
public:
	int32                                         InPathIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation) == 0x000010, "Wrong size on FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation, InPathIndex) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation::InPathIndex' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation, ReturnValue) == 0x000004, "Member 'FortAthenaMutator_Hydrogen_GetNextActorOnPathLocation::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GetOwnedCapturePointCount
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount) == 0x000008, "Wrong size on FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount, InIndex) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount::InIndex' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount, ReturnValue) == 0x000004, "Member 'FortAthenaMutator_Hydrogen_GetOwnedCapturePointCount::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GetTimeToNextNode
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaMutator_Hydrogen_GetTimeToNextNode final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GetTimeToNextNode) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_GetTimeToNextNode");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GetTimeToNextNode) == 0x000004, "Wrong size on FortAthenaMutator_Hydrogen_GetTimeToNextNode");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetTimeToNextNode, ReturnValue) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GetTimeToNextNode::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GiveObjectiveAccolade
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMutator_Hydrogen_GiveObjectiveAccolade final
{
public:
	class AFortPlayerControllerAthena*            FortController;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GiveObjectiveAccolade) == 0x000008, "Wrong alignment on FortAthenaMutator_Hydrogen_GiveObjectiveAccolade");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GiveObjectiveAccolade) == 0x000008, "Wrong size on FortAthenaMutator_Hydrogen_GiveObjectiveAccolade");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GiveObjectiveAccolade, FortController) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GiveObjectiveAccolade::FortController' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.OwningTeamChange
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Hydrogen_OwningTeamChange final
{
public:
	class AHydrogenObjectiveActor*                Objective;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeam;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OldTeam;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Hydrogen_OwningTeamChange) == 0x000008, "Wrong alignment on FortAthenaMutator_Hydrogen_OwningTeamChange");
static_assert(sizeof(FortAthenaMutator_Hydrogen_OwningTeamChange) == 0x000010, "Wrong size on FortAthenaMutator_Hydrogen_OwningTeamChange");
static_assert(offsetof(FortAthenaMutator_Hydrogen_OwningTeamChange, Objective) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_OwningTeamChange::Objective' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_OwningTeamChange, NewTeam) == 0x000008, "Member 'FortAthenaMutator_Hydrogen_OwningTeamChange::NewTeam' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_OwningTeamChange, OldTeam) == 0x000009, "Member 'FortAthenaMutator_Hydrogen_OwningTeamChange::OldTeam' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.SetupSafeZoneRoute
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaMutator_Hydrogen_SetupSafeZoneRoute final
{
public:
	struct FVector                                StartVector;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndVector;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_SetupSafeZoneRoute) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_SetupSafeZoneRoute");
static_assert(sizeof(FortAthenaMutator_Hydrogen_SetupSafeZoneRoute) == 0x000018, "Wrong size on FortAthenaMutator_Hydrogen_SetupSafeZoneRoute");
static_assert(offsetof(FortAthenaMutator_Hydrogen_SetupSafeZoneRoute, StartVector) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_SetupSafeZoneRoute::StartVector' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_SetupSafeZoneRoute, EndVector) == 0x00000C, "Member 'FortAthenaMutator_Hydrogen_SetupSafeZoneRoute::EndVector' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.TickHydrogenStormShield
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMutator_Hydrogen_TickHydrogenStormShield final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Hydrogen_TickHydrogenStormShield) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_TickHydrogenStormShield");
static_assert(sizeof(FortAthenaMutator_Hydrogen_TickHydrogenStormShield) == 0x000008, "Wrong size on FortAthenaMutator_Hydrogen_TickHydrogenStormShield");
static_assert(offsetof(FortAthenaMutator_Hydrogen_TickHydrogenStormShield, DeltaSeconds) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_TickHydrogenStormShield::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_TickHydrogenStormShield, ReturnValue) == 0x000004, "Member 'FortAthenaMutator_Hydrogen_TickHydrogenStormShield::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.bHasStormStarted
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Hydrogen_bHasStormStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_bHasStormStarted) == 0x000001, "Wrong alignment on FortAthenaMutator_Hydrogen_bHasStormStarted");
static_assert(sizeof(FortAthenaMutator_Hydrogen_bHasStormStarted) == 0x000001, "Wrong size on FortAthenaMutator_Hydrogen_bHasStormStarted");
static_assert(offsetof(FortAthenaMutator_Hydrogen_bHasStormStarted, ReturnValue) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_bHasStormStarted::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.bHasWinnerBeenDeclared
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Hydrogen_bHasWinnerBeenDeclared final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_bHasWinnerBeenDeclared) == 0x000001, "Wrong alignment on FortAthenaMutator_Hydrogen_bHasWinnerBeenDeclared");
static_assert(sizeof(FortAthenaMutator_Hydrogen_bHasWinnerBeenDeclared) == 0x000001, "Wrong size on FortAthenaMutator_Hydrogen_bHasWinnerBeenDeclared");
static_assert(offsetof(FortAthenaMutator_Hydrogen_bHasWinnerBeenDeclared, ReturnValue) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_bHasWinnerBeenDeclared::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GetAllCapturePoints
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Hydrogen_GetAllCapturePoints final
{
public:
	TArray<class AHydrogenObjectiveActor*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GetAllCapturePoints) == 0x000008, "Wrong alignment on FortAthenaMutator_Hydrogen_GetAllCapturePoints");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GetAllCapturePoints) == 0x000010, "Wrong size on FortAthenaMutator_Hydrogen_GetAllCapturePoints");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetAllCapturePoints, ReturnValue) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GetAllCapturePoints::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GetSortedActivePointIndices
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Hydrogen_GetSortedActivePointIndices final
{
public:
	TArray<int32>                                 OutSortedIndices;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GetSortedActivePointIndices) == 0x000008, "Wrong alignment on FortAthenaMutator_Hydrogen_GetSortedActivePointIndices");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GetSortedActivePointIndices) == 0x000010, "Wrong size on FortAthenaMutator_Hydrogen_GetSortedActivePointIndices");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetSortedActivePointIndices, OutSortedIndices) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GetSortedActivePointIndices::OutSortedIndices' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.GetStormSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaMutator_Hydrogen_GetStormSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Hydrogen_GetStormSpeed) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_GetStormSpeed");
static_assert(sizeof(FortAthenaMutator_Hydrogen_GetStormSpeed) == 0x000004, "Wrong size on FortAthenaMutator_Hydrogen_GetStormSpeed");
static_assert(offsetof(FortAthenaMutator_Hydrogen_GetStormSpeed, ReturnValue) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_GetStormSpeed::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.IsInStormShield
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Hydrogen_IsInStormShield final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Hydrogen_IsInStormShield) == 0x000004, "Wrong alignment on FortAthenaMutator_Hydrogen_IsInStormShield");
static_assert(sizeof(FortAthenaMutator_Hydrogen_IsInStormShield) == 0x000010, "Wrong size on FortAthenaMutator_Hydrogen_IsInStormShield");
static_assert(offsetof(FortAthenaMutator_Hydrogen_IsInStormShield, TestLocation) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_IsInStormShield::TestLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_IsInStormShield, ReturnValue) == 0x00000C, "Member 'FortAthenaMutator_Hydrogen_IsInStormShield::ReturnValue' has a wrong offset!");

// Function HydrogenRuntime.FortAthenaMutator_Hydrogen.SetCapturePointFillAmount
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Hydrogen_SetCapturePointFillAmount final
{
public:
	class AHydrogenObjectiveActor*                InCapturePointActor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InPlayerTeam;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Hydrogen_SetCapturePointFillAmount) == 0x000008, "Wrong alignment on FortAthenaMutator_Hydrogen_SetCapturePointFillAmount");
static_assert(sizeof(FortAthenaMutator_Hydrogen_SetCapturePointFillAmount) == 0x000010, "Wrong size on FortAthenaMutator_Hydrogen_SetCapturePointFillAmount");
static_assert(offsetof(FortAthenaMutator_Hydrogen_SetCapturePointFillAmount, InCapturePointActor) == 0x000000, "Member 'FortAthenaMutator_Hydrogen_SetCapturePointFillAmount::InCapturePointActor' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Hydrogen_SetCapturePointFillAmount, InPlayerTeam) == 0x000008, "Member 'FortAthenaMutator_Hydrogen_SetCapturePointFillAmount::InPlayerTeam' has a wrong offset!");

// Function HydrogenRuntime.HydrogenObjectiveActor.OnComponentBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct HydrogenObjectiveActor_OnComponentBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HydrogenObjectiveActor_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on HydrogenObjectiveActor_OnComponentBeginOverlap");
static_assert(sizeof(HydrogenObjectiveActor_OnComponentBeginOverlap) == 0x000010, "Wrong size on HydrogenObjectiveActor_OnComponentBeginOverlap");
static_assert(offsetof(HydrogenObjectiveActor_OnComponentBeginOverlap, OverlappedActor) == 0x000000, "Member 'HydrogenObjectiveActor_OnComponentBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(HydrogenObjectiveActor_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'HydrogenObjectiveActor_OnComponentBeginOverlap::OtherActor' has a wrong offset!");

// Function HydrogenRuntime.HydrogenObjectiveActor.OnOverlapBegin
// 0x00B0 (0x00B0 - 0x0000)
struct HydrogenObjectiveActor_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HydrogenObjectiveActor_OnOverlapBegin) == 0x000008, "Wrong alignment on HydrogenObjectiveActor_OnOverlapBegin");
static_assert(sizeof(HydrogenObjectiveActor_OnOverlapBegin) == 0x0000B0, "Wrong size on HydrogenObjectiveActor_OnOverlapBegin");
static_assert(offsetof(HydrogenObjectiveActor_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'HydrogenObjectiveActor_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(HydrogenObjectiveActor_OnOverlapBegin, OtherActor) == 0x000008, "Member 'HydrogenObjectiveActor_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(HydrogenObjectiveActor_OnOverlapBegin, OtherComp) == 0x000010, "Member 'HydrogenObjectiveActor_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(HydrogenObjectiveActor_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'HydrogenObjectiveActor_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(HydrogenObjectiveActor_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'HydrogenObjectiveActor_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(HydrogenObjectiveActor_OnOverlapBegin, SweepResult) == 0x000020, "Member 'HydrogenObjectiveActor_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function HydrogenRuntime.HydrogenObjectiveActor.OnTimelineFlashing
// 0x0004 (0x0004 - 0x0000)
struct HydrogenObjectiveActor_OnTimelineFlashing final
{
public:
	float                                         IconOpacity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HydrogenObjectiveActor_OnTimelineFlashing) == 0x000004, "Wrong alignment on HydrogenObjectiveActor_OnTimelineFlashing");
static_assert(sizeof(HydrogenObjectiveActor_OnTimelineFlashing) == 0x000004, "Wrong size on HydrogenObjectiveActor_OnTimelineFlashing");
static_assert(offsetof(HydrogenObjectiveActor_OnTimelineFlashing, IconOpacity) == 0x000000, "Member 'HydrogenObjectiveActor_OnTimelineFlashing::IconOpacity' has a wrong offset!");

// Function HydrogenRuntime.HydrogenObjectiveActor.ProcessOverlap
// 0x0008 (0x0008 - 0x0000)
struct HydrogenObjectiveActor_ProcessOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HydrogenObjectiveActor_ProcessOverlap) == 0x000008, "Wrong alignment on HydrogenObjectiveActor_ProcessOverlap");
static_assert(sizeof(HydrogenObjectiveActor_ProcessOverlap) == 0x000008, "Wrong size on HydrogenObjectiveActor_ProcessOverlap");
static_assert(offsetof(HydrogenObjectiveActor_ProcessOverlap, OtherActor) == 0x000000, "Member 'HydrogenObjectiveActor_ProcessOverlap::OtherActor' has a wrong offset!");

// Function HydrogenRuntime.HydrogenObjectiveActor.SetActive
// 0x0001 (0x0001 - 0x0000)
struct HydrogenObjectiveActor_SetActive final
{
public:
	bool                                          bInIsActive;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HydrogenObjectiveActor_SetActive) == 0x000001, "Wrong alignment on HydrogenObjectiveActor_SetActive");
static_assert(sizeof(HydrogenObjectiveActor_SetActive) == 0x000001, "Wrong size on HydrogenObjectiveActor_SetActive");
static_assert(offsetof(HydrogenObjectiveActor_SetActive, bInIsActive) == 0x000000, "Member 'HydrogenObjectiveActor_SetActive::bInIsActive' has a wrong offset!");

// Function HydrogenRuntime.HydrogenObjectiveActor.SetUpMaterialInstanceDynamic
// 0x0090 (0x0090 - 0x0000)
struct HydrogenObjectiveActor_SetUpMaterialInstanceDynamic final
{
public:
	struct FSlateBrush                            MapIconBrush;                                      // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DrawBrushMID;                                      // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HydrogenObjectiveActor_SetUpMaterialInstanceDynamic) == 0x000008, "Wrong alignment on HydrogenObjectiveActor_SetUpMaterialInstanceDynamic");
static_assert(sizeof(HydrogenObjectiveActor_SetUpMaterialInstanceDynamic) == 0x000090, "Wrong size on HydrogenObjectiveActor_SetUpMaterialInstanceDynamic");
static_assert(offsetof(HydrogenObjectiveActor_SetUpMaterialInstanceDynamic, MapIconBrush) == 0x000000, "Member 'HydrogenObjectiveActor_SetUpMaterialInstanceDynamic::MapIconBrush' has a wrong offset!");
static_assert(offsetof(HydrogenObjectiveActor_SetUpMaterialInstanceDynamic, DrawBrushMID) == 0x000088, "Member 'HydrogenObjectiveActor_SetUpMaterialInstanceDynamic::DrawBrushMID' has a wrong offset!");

// Function HydrogenRuntime.HydrogenObjectiveActor.GetIsActive
// 0x0001 (0x0001 - 0x0000)
struct HydrogenObjectiveActor_GetIsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HydrogenObjectiveActor_GetIsActive) == 0x000001, "Wrong alignment on HydrogenObjectiveActor_GetIsActive");
static_assert(sizeof(HydrogenObjectiveActor_GetIsActive) == 0x000001, "Wrong size on HydrogenObjectiveActor_GetIsActive");
static_assert(offsetof(HydrogenObjectiveActor_GetIsActive, ReturnValue) == 0x000000, "Member 'HydrogenObjectiveActor_GetIsActive::ReturnValue' has a wrong offset!");

}

