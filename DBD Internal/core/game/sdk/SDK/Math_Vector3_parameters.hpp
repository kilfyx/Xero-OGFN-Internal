#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Vector3

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Vector3.Vector3.Create
// 0x0018 (0x0018 - 0x0000)
struct Vector3_Create final
{
public:
	float                                         __verse_0x3205F605_inX;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x57624ABD_inY;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xB9CDFFAF_inZ;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVector3*                               RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Create) == 0x000008, "Wrong alignment on Vector3_Create");
static_assert(sizeof(Vector3_Create) == 0x000018, "Wrong size on Vector3_Create");
static_assert(offsetof(Vector3_Create, __verse_0x3205F605_inX) == 0x000000, "Member 'Vector3_Create::__verse_0x3205F605_inX' has a wrong offset!");
static_assert(offsetof(Vector3_Create, __verse_0x57624ABD_inY) == 0x000004, "Member 'Vector3_Create::__verse_0x57624ABD_inY' has a wrong offset!");
static_assert(offsetof(Vector3_Create, __verse_0xB9CDFFAF_inZ) == 0x000008, "Member 'Vector3_Create::__verse_0xB9CDFFAF_inZ' has a wrong offset!");
static_assert(offsetof(Vector3_Create, RetVal) == 0x000010, "Member 'Vector3_Create::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.createOneVector
// 0x0008 (0x0008 - 0x0000)
struct Vector3_createOneVector final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_createOneVector) == 0x000008, "Wrong alignment on Vector3_createOneVector");
static_assert(sizeof(Vector3_createOneVector) == 0x000008, "Wrong size on Vector3_createOneVector");
static_assert(offsetof(Vector3_createOneVector, RetVal) == 0x000000, "Member 'Vector3_createOneVector::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.createZero
// 0x0008 (0x0008 - 0x0000)
struct Vector3_createZero final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_createZero) == 0x000008, "Wrong alignment on Vector3_createZero");
static_assert(sizeof(Vector3_createZero) == 0x000008, "Wrong size on Vector3_createZero");
static_assert(offsetof(Vector3_createZero, RetVal) == 0x000000, "Member 'Vector3_createZero::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.crossProduct
// 0x0018 (0x0018 - 0x0000)
struct Vector3_crossProduct final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_crossProduct) == 0x000008, "Wrong alignment on Vector3_crossProduct");
static_assert(sizeof(Vector3_crossProduct) == 0x000018, "Wrong size on Vector3_crossProduct");
static_assert(offsetof(Vector3_crossProduct, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector3_crossProduct::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector3_crossProduct, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector3_crossProduct::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector3_crossProduct, RetVal) == 0x000010, "Member 'Vector3_crossProduct::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Distance
// 0x0018 (0x0018 - 0x0000)
struct Vector3_Distance final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Distance) == 0x000008, "Wrong alignment on Vector3_Distance");
static_assert(sizeof(Vector3_Distance) == 0x000018, "Wrong size on Vector3_Distance");
static_assert(offsetof(Vector3_Distance, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector3_Distance::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector3_Distance, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector3_Distance::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector3_Distance, RetVal) == 0x000010, "Member 'Vector3_Distance::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Distance2D
// 0x0018 (0x0018 - 0x0000)
struct Vector3_Distance2D final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Distance2D) == 0x000008, "Wrong alignment on Vector3_Distance2D");
static_assert(sizeof(Vector3_Distance2D) == 0x000018, "Wrong size on Vector3_Distance2D");
static_assert(offsetof(Vector3_Distance2D, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector3_Distance2D::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector3_Distance2D, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector3_Distance2D::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector3_Distance2D, RetVal) == 0x000010, "Member 'Vector3_Distance2D::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.DistanceSquared
// 0x0018 (0x0018 - 0x0000)
struct Vector3_DistanceSquared final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_DistanceSquared) == 0x000008, "Wrong alignment on Vector3_DistanceSquared");
static_assert(sizeof(Vector3_DistanceSquared) == 0x000018, "Wrong size on Vector3_DistanceSquared");
static_assert(offsetof(Vector3_DistanceSquared, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector3_DistanceSquared::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector3_DistanceSquared, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector3_DistanceSquared::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector3_DistanceSquared, RetVal) == 0x000010, "Member 'Vector3_DistanceSquared::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.DistanceSquared2D
// 0x0018 (0x0018 - 0x0000)
struct Vector3_DistanceSquared2D final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_DistanceSquared2D) == 0x000008, "Wrong alignment on Vector3_DistanceSquared2D");
static_assert(sizeof(Vector3_DistanceSquared2D) == 0x000018, "Wrong size on Vector3_DistanceSquared2D");
static_assert(offsetof(Vector3_DistanceSquared2D, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector3_DistanceSquared2D::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector3_DistanceSquared2D, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector3_DistanceSquared2D::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector3_DistanceSquared2D, RetVal) == 0x000010, "Member 'Vector3_DistanceSquared2D::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.dotProduct
// 0x0018 (0x0018 - 0x0000)
struct Vector3_dotProduct final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_dotProduct) == 0x000008, "Wrong alignment on Vector3_dotProduct");
static_assert(sizeof(Vector3_dotProduct) == 0x000018, "Wrong size on Vector3_dotProduct");
static_assert(offsetof(Vector3_dotProduct, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector3_dotProduct::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector3_dotProduct, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector3_dotProduct::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector3_dotProduct, RetVal) == 0x000010, "Member 'Vector3_dotProduct::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.reflectVector
// 0x0018 (0x0018 - 0x0000)
struct Vector3_reflectVector final
{
public:
	class UVector3*                               __verse_0x8BEC05BA_direction;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0xADA21017_surfaceNormal;                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_reflectVector) == 0x000008, "Wrong alignment on Vector3_reflectVector");
static_assert(sizeof(Vector3_reflectVector) == 0x000018, "Wrong size on Vector3_reflectVector");
static_assert(offsetof(Vector3_reflectVector, __verse_0x8BEC05BA_direction) == 0x000000, "Member 'Vector3_reflectVector::__verse_0x8BEC05BA_direction' has a wrong offset!");
static_assert(offsetof(Vector3_reflectVector, __verse_0xADA21017_surfaceNormal) == 0x000008, "Member 'Vector3_reflectVector::__verse_0xADA21017_surfaceNormal' has a wrong offset!");
static_assert(offsetof(Vector3_reflectVector, RetVal) == 0x000010, "Member 'Vector3_reflectVector::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.ToRotation3
// 0x0008 (0x0008 - 0x0000)
struct Vector3_ToRotation3 final
{
public:
	class URotation3*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_ToRotation3) == 0x000008, "Wrong alignment on Vector3_ToRotation3");
static_assert(sizeof(Vector3_ToRotation3) == 0x000008, "Wrong size on Vector3_ToRotation3");
static_assert(offsetof(Vector3_ToRotation3, RetVal) == 0x000000, "Member 'Vector3_ToRotation3::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Add
// 0x0010 (0x0010 - 0x0000)
struct Vector3_Add final
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Add) == 0x000008, "Wrong alignment on Vector3_Add");
static_assert(sizeof(Vector3_Add) == 0x000010, "Wrong size on Vector3_Add");
static_assert(offsetof(Vector3_Add, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector3_Add::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector3_Add, RetVal) == 0x000008, "Member 'Vector3_Add::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.addScalar
// 0x0010 (0x0010 - 0x0000)
struct Vector3_addScalar final
{
public:
	float                                         __verse_0x805015BB_scalar;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_addScalar) == 0x000008, "Wrong alignment on Vector3_addScalar");
static_assert(sizeof(Vector3_addScalar) == 0x000010, "Wrong size on Vector3_addScalar");
static_assert(offsetof(Vector3_addScalar, __verse_0x805015BB_scalar) == 0x000000, "Member 'Vector3_addScalar::__verse_0x805015BB_scalar' has a wrong offset!");
static_assert(offsetof(Vector3_addScalar, RetVal) == 0x000008, "Member 'Vector3_addScalar::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Divide
// 0x0010 (0x0010 - 0x0000)
struct Vector3_Divide final
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Divide) == 0x000008, "Wrong alignment on Vector3_Divide");
static_assert(sizeof(Vector3_Divide) == 0x000010, "Wrong size on Vector3_Divide");
static_assert(offsetof(Vector3_Divide, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector3_Divide::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector3_Divide, RetVal) == 0x000008, "Member 'Vector3_Divide::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Equals
// 0x0010 (0x0010 - 0x0000)
struct Vector3_Equals final
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Vector3_Equals) == 0x000008, "Wrong alignment on Vector3_Equals");
static_assert(sizeof(Vector3_Equals) == 0x000010, "Wrong size on Vector3_Equals");
static_assert(offsetof(Vector3_Equals, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector3_Equals::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector3_Equals, __verse_0xB4A6AEEC_tolerance) == 0x000008, "Member 'Vector3_Equals::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Vector3.Vector3.Multiply
// 0x0010 (0x0010 - 0x0000)
struct Vector3_Multiply final
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Multiply) == 0x000008, "Wrong alignment on Vector3_Multiply");
static_assert(sizeof(Vector3_Multiply) == 0x000010, "Wrong size on Vector3_Multiply");
static_assert(offsetof(Vector3_Multiply, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector3_Multiply::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector3_Multiply, RetVal) == 0x000008, "Member 'Vector3_Multiply::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.multiplyByScalar
// 0x0010 (0x0010 - 0x0000)
struct Vector3_multiplyByScalar final
{
public:
	float                                         __verse_0x805015BB_scalar;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_multiplyByScalar) == 0x000008, "Wrong alignment on Vector3_multiplyByScalar");
static_assert(sizeof(Vector3_multiplyByScalar) == 0x000010, "Wrong size on Vector3_multiplyByScalar");
static_assert(offsetof(Vector3_multiplyByScalar, __verse_0x805015BB_scalar) == 0x000000, "Member 'Vector3_multiplyByScalar::__verse_0x805015BB_scalar' has a wrong offset!");
static_assert(offsetof(Vector3_multiplyByScalar, RetVal) == 0x000008, "Member 'Vector3_multiplyByScalar::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Normal
// 0x0008 (0x0008 - 0x0000)
struct Vector3_Normal final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Normal) == 0x000008, "Wrong alignment on Vector3_Normal");
static_assert(sizeof(Vector3_Normal) == 0x000008, "Wrong size on Vector3_Normal");
static_assert(offsetof(Vector3_Normal, RetVal) == 0x000000, "Member 'Vector3_Normal::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Size
// 0x0004 (0x0004 - 0x0000)
struct Vector3_Size final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Size) == 0x000004, "Wrong alignment on Vector3_Size");
static_assert(sizeof(Vector3_Size) == 0x000004, "Wrong size on Vector3_Size");
static_assert(offsetof(Vector3_Size, RetVal) == 0x000000, "Member 'Vector3_Size::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.size2D
// 0x0004 (0x0004 - 0x0000)
struct Vector3_size2D final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_size2D) == 0x000004, "Wrong alignment on Vector3_size2D");
static_assert(sizeof(Vector3_size2D) == 0x000004, "Wrong size on Vector3_size2D");
static_assert(offsetof(Vector3_size2D, RetVal) == 0x000000, "Member 'Vector3_size2D::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.sizeSquared
// 0x0004 (0x0004 - 0x0000)
struct Vector3_sizeSquared final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_sizeSquared) == 0x000004, "Wrong alignment on Vector3_sizeSquared");
static_assert(sizeof(Vector3_sizeSquared) == 0x000004, "Wrong size on Vector3_sizeSquared");
static_assert(offsetof(Vector3_sizeSquared, RetVal) == 0x000000, "Member 'Vector3_sizeSquared::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.sizeSquared2D
// 0x0004 (0x0004 - 0x0000)
struct Vector3_sizeSquared2D final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_sizeSquared2D) == 0x000004, "Wrong alignment on Vector3_sizeSquared2D");
static_assert(sizeof(Vector3_sizeSquared2D) == 0x000004, "Wrong size on Vector3_sizeSquared2D");
static_assert(offsetof(Vector3_sizeSquared2D, RetVal) == 0x000000, "Member 'Vector3_sizeSquared2D::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.Subtract
// 0x0010 (0x0010 - 0x0000)
struct Vector3_Subtract final
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_Subtract) == 0x000008, "Wrong alignment on Vector3_Subtract");
static_assert(sizeof(Vector3_Subtract) == 0x000010, "Wrong size on Vector3_Subtract");
static_assert(offsetof(Vector3_Subtract, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector3_Subtract::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector3_Subtract, RetVal) == 0x000008, "Member 'Vector3_Subtract::RetVal' has a wrong offset!");

// Function Math_Vector3.Vector3.ToString
// 0x0010 (0x0010 - 0x0000)
struct Vector3_ToString final
{
public:
	class FString                                 RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Vector3_ToString) == 0x000008, "Wrong alignment on Vector3_ToString");
static_assert(sizeof(Vector3_ToString) == 0x000010, "Wrong size on Vector3_ToString");
static_assert(offsetof(Vector3_ToString, RetVal) == 0x000000, "Member 'Vector3_ToString::RetVal' has a wrong offset!");

}

