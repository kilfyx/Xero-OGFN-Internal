#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Nightmare_Cloak_Manager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Nightmare_Cloak_Manager.GA_Nightmare_Cloak_Manager_C
// 0x01C8 (0x0C80 - 0x0AB8)
class UGA_Nightmare_Cloak_Manager_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FScalableFloat                         Row_MinTimeBetweenHideFromAI;                      // 0x0AC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_MaxTimeBetweenHideFromAI;                      // 0x0AE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_DurationHideFromAI;                            // 0x0B10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_EnableWaterDepthChecks;                        // 0x0B38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_TimeBetweenWaterDepthChecks;                   // 0x0B60(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_MaxAllowedWaterImmersionDepth;                 // 0x0B88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Handle_HideFromAITimer;                            // 0x0BB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_HideFromAI;                                     // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GEHandle_HideFromAI;                               // 0x0BC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_GC_NightmareCloak;                             // 0x0BC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_NightmareCloak_Active;                         // 0x0BD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Tag_NightmareCloak_Equipped;                       // 0x0BF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_Granted_BuiltInEmote;                          // 0x0BF8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_InVehicle;                                     // 0x0C00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_InValet;                                       // 0x0C08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_Swimming;                                      // 0x0C10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagRemoved*    Task_WaitEquippedTagRemove;                        // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitInVehicleTagAdd;                          // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitInValetTagAdd;                            // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitSwimmingTagAdd;                           // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_GameplayStatus_DBNO;                           // 0x0C38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitDBNOTagAdd;                               // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_GameplayEvent_Died;                            // 0x0C48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayEvent*         Task_WaitGameplayEvent_Died;                       // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Handle_CheckWaterDepthTimer;                       // 0x0C58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitWetTagAdd;                                // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagRemoved*    Task_WaitWetTagRemove;                             // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag_Wet;                                           // 0x0C70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitBuiltInEmoteTagAdd;                       // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Nightmare_Cloak_Manager(int32 EntryPoint);
	void CheckWaterDepth();
	void RemoveCloak();
	void StartGameplayEventManager();
	void HideFromAI();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void Added_731B0F3A45AED23FE13E0DA9B63B8882();
	void Removed_DA29BA9C4A0CCC61C25EA8AFA82A7A05();
	void Added_E76A7C2041F08CAB6C02EBA8A842545A();
	void Added_CB72B83748897A4463E0138085EB85F4();
	void EventReceived_B332473746BC0BDAE217509A609A2AD4(const struct FGameplayEventData& Payload);
	void Added_9B28591B4A14725D778951B536774B86();
	void Added_7245908F4A0CEE348410278FC02B6AF3();
	void Added_BE9125FA4C9800F63D997AB43D5F04F9();
	void Removed_9053E24C46944982AC49C497CB66D807();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Nightmare_Cloak_Manager_C">();
	}
	static class UGA_Nightmare_Cloak_Manager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Nightmare_Cloak_Manager_C>();
	}
};
static_assert(alignof(UGA_Nightmare_Cloak_Manager_C) == 0x000008, "Wrong alignment on UGA_Nightmare_Cloak_Manager_C");
static_assert(sizeof(UGA_Nightmare_Cloak_Manager_C) == 0x000C80, "Wrong size on UGA_Nightmare_Cloak_Manager_C");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, UberGraphFrame) == 0x000AB8, "Member 'UGA_Nightmare_Cloak_Manager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Row_MinTimeBetweenHideFromAI) == 0x000AC0, "Member 'UGA_Nightmare_Cloak_Manager_C::Row_MinTimeBetweenHideFromAI' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Row_MaxTimeBetweenHideFromAI) == 0x000AE8, "Member 'UGA_Nightmare_Cloak_Manager_C::Row_MaxTimeBetweenHideFromAI' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Row_DurationHideFromAI) == 0x000B10, "Member 'UGA_Nightmare_Cloak_Manager_C::Row_DurationHideFromAI' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Row_EnableWaterDepthChecks) == 0x000B38, "Member 'UGA_Nightmare_Cloak_Manager_C::Row_EnableWaterDepthChecks' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Row_TimeBetweenWaterDepthChecks) == 0x000B60, "Member 'UGA_Nightmare_Cloak_Manager_C::Row_TimeBetweenWaterDepthChecks' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Row_MaxAllowedWaterImmersionDepth) == 0x000B88, "Member 'UGA_Nightmare_Cloak_Manager_C::Row_MaxAllowedWaterImmersionDepth' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Handle_HideFromAITimer) == 0x000BB0, "Member 'UGA_Nightmare_Cloak_Manager_C::Handle_HideFromAITimer' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, GE_HideFromAI) == 0x000BB8, "Member 'UGA_Nightmare_Cloak_Manager_C::GE_HideFromAI' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, GEHandle_HideFromAI) == 0x000BC0, "Member 'UGA_Nightmare_Cloak_Manager_C::GEHandle_HideFromAI' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_GC_NightmareCloak) == 0x000BC8, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_GC_NightmareCloak' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_NightmareCloak_Active) == 0x000BD0, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_NightmareCloak_Active' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_NightmareCloak_Equipped) == 0x000BF0, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_NightmareCloak_Equipped' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_Granted_BuiltInEmote) == 0x000BF8, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_Granted_BuiltInEmote' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_InVehicle) == 0x000C00, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_InVehicle' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_InValet) == 0x000C08, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_InValet' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_Swimming) == 0x000C10, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_Swimming' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitEquippedTagRemove) == 0x000C18, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitEquippedTagRemove' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitInVehicleTagAdd) == 0x000C20, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitInVehicleTagAdd' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitInValetTagAdd) == 0x000C28, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitInValetTagAdd' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitSwimmingTagAdd) == 0x000C30, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitSwimmingTagAdd' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_GameplayStatus_DBNO) == 0x000C38, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_GameplayStatus_DBNO' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitDBNOTagAdd) == 0x000C40, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitDBNOTagAdd' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_GameplayEvent_Died) == 0x000C48, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_GameplayEvent_Died' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitGameplayEvent_Died) == 0x000C50, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitGameplayEvent_Died' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Handle_CheckWaterDepthTimer) == 0x000C58, "Member 'UGA_Nightmare_Cloak_Manager_C::Handle_CheckWaterDepthTimer' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitWetTagAdd) == 0x000C60, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitWetTagAdd' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitWetTagRemove) == 0x000C68, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitWetTagRemove' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Tag_Wet) == 0x000C70, "Member 'UGA_Nightmare_Cloak_Manager_C::Tag_Wet' has a wrong offset!");
static_assert(offsetof(UGA_Nightmare_Cloak_Manager_C, Task_WaitBuiltInEmoteTagAdd) == 0x000C78, "Member 'UGA_Nightmare_Cloak_Manager_C::Task_WaitBuiltInEmoteTagAdd' has a wrong offset!");

}

