#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Plane4

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Plane4.Plane4.Create
// 0x0018 (0x0018 - 0x0000)
struct Plane4_Create final
{
public:
	class UVector3*                               __verse_0xB04E112A_inBase;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x06073D83_inNormal;                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlane4*                                RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Plane4_Create) == 0x000008, "Wrong alignment on Plane4_Create");
static_assert(sizeof(Plane4_Create) == 0x000018, "Wrong size on Plane4_Create");
static_assert(offsetof(Plane4_Create, __verse_0xB04E112A_inBase) == 0x000000, "Member 'Plane4_Create::__verse_0xB04E112A_inBase' has a wrong offset!");
static_assert(offsetof(Plane4_Create, __verse_0x06073D83_inNormal) == 0x000008, "Member 'Plane4_Create::__verse_0x06073D83_inNormal' has a wrong offset!");
static_assert(offsetof(Plane4_Create, RetVal) == 0x000010, "Member 'Plane4_Create::RetVal' has a wrong offset!");

// Function Math_Plane4.Plane4.createZero
// 0x0008 (0x0008 - 0x0000)
struct Plane4_createZero final
{
public:
	class UPlane4*                                RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Plane4_createZero) == 0x000008, "Wrong alignment on Plane4_createZero");
static_assert(sizeof(Plane4_createZero) == 0x000008, "Wrong size on Plane4_createZero");
static_assert(offsetof(Plane4_createZero, RetVal) == 0x000000, "Member 'Plane4_createZero::RetVal' has a wrong offset!");

// Function Math_Plane4.Plane4.segmentIntersection
// 0x0018 (0x0018 - 0x0000)
struct Plane4_segmentIntersection final
{
public:
	class UVector3*                               __verse_0x93ADD079_pointA;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x7D02656B_pointB;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Plane4_segmentIntersection) == 0x000008, "Wrong alignment on Plane4_segmentIntersection");
static_assert(sizeof(Plane4_segmentIntersection) == 0x000018, "Wrong size on Plane4_segmentIntersection");
static_assert(offsetof(Plane4_segmentIntersection, __verse_0x93ADD079_pointA) == 0x000000, "Member 'Plane4_segmentIntersection::__verse_0x93ADD079_pointA' has a wrong offset!");
static_assert(offsetof(Plane4_segmentIntersection, __verse_0x7D02656B_pointB) == 0x000008, "Member 'Plane4_segmentIntersection::__verse_0x7D02656B_pointB' has a wrong offset!");
static_assert(offsetof(Plane4_segmentIntersection, RetVal) == 0x000010, "Member 'Plane4_segmentIntersection::RetVal' has a wrong offset!");

// Function Math_Plane4.Plane4.ToString
// 0x0010 (0x0010 - 0x0000)
struct Plane4_ToString final
{
public:
	class FString                                 RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Plane4_ToString) == 0x000008, "Wrong alignment on Plane4_ToString");
static_assert(sizeof(Plane4_ToString) == 0x000010, "Wrong size on Plane4_ToString");
static_assert(offsetof(Plane4_ToString, RetVal) == 0x000000, "Member 'Plane4_ToString::RetVal' has a wrong offset!");

}

