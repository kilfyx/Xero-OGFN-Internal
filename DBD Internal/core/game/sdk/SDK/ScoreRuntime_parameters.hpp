#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScoreRuntime

#include "Basic.hpp"

#include "ScoreRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function ScoreRuntime.FortAthenaMutator_Score.OnAIPawnKilled
// 0x0030 (0x0030 - 0x0000)
struct FortAthenaMutator_Score_OnAIPawnKilled final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            KilledAIPawn;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InTags;                                            // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Score_OnAIPawnKilled) == 0x000008, "Wrong alignment on FortAthenaMutator_Score_OnAIPawnKilled");
static_assert(sizeof(FortAthenaMutator_Score_OnAIPawnKilled) == 0x000030, "Wrong size on FortAthenaMutator_Score_OnAIPawnKilled");
static_assert(offsetof(FortAthenaMutator_Score_OnAIPawnKilled, Killer) == 0x000000, "Member 'FortAthenaMutator_Score_OnAIPawnKilled::Killer' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Score_OnAIPawnKilled, KilledAIPawn) == 0x000008, "Member 'FortAthenaMutator_Score_OnAIPawnKilled::KilledAIPawn' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Score_OnAIPawnKilled, InTags) == 0x000010, "Member 'FortAthenaMutator_Score_OnAIPawnKilled::InTags' has a wrong offset!");

// Function ScoreRuntime.FortAthenaMutator_Score.OnGamePhaseStepChanged
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaMutator_Score_OnGamePhaseStepChanged final
{
public:
	TScriptInterface<class IFortSafeZoneInterface> SafeZoneInterface;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Score_OnGamePhaseStepChanged) == 0x000008, "Wrong alignment on FortAthenaMutator_Score_OnGamePhaseStepChanged");
static_assert(sizeof(FortAthenaMutator_Score_OnGamePhaseStepChanged) == 0x000018, "Wrong size on FortAthenaMutator_Score_OnGamePhaseStepChanged");
static_assert(offsetof(FortAthenaMutator_Score_OnGamePhaseStepChanged, SafeZoneInterface) == 0x000000, "Member 'FortAthenaMutator_Score_OnGamePhaseStepChanged::SafeZoneInterface' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Score_OnGamePhaseStepChanged, GamePhaseStep) == 0x000010, "Member 'FortAthenaMutator_Score_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function ScoreRuntime.FortAthenaMutator_Score.OnMutatorGameplayEvent
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Score_OnMutatorGameplayEvent final
{
public:
	int32                                         EventId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventParam1;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventParam2;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventParam3;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Score_OnMutatorGameplayEvent) == 0x000004, "Wrong alignment on FortAthenaMutator_Score_OnMutatorGameplayEvent");
static_assert(sizeof(FortAthenaMutator_Score_OnMutatorGameplayEvent) == 0x000010, "Wrong size on FortAthenaMutator_Score_OnMutatorGameplayEvent");
static_assert(offsetof(FortAthenaMutator_Score_OnMutatorGameplayEvent, EventId) == 0x000000, "Member 'FortAthenaMutator_Score_OnMutatorGameplayEvent::EventId' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Score_OnMutatorGameplayEvent, EventParam1) == 0x000004, "Member 'FortAthenaMutator_Score_OnMutatorGameplayEvent::EventParam1' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Score_OnMutatorGameplayEvent, EventParam2) == 0x000008, "Member 'FortAthenaMutator_Score_OnMutatorGameplayEvent::EventParam2' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Score_OnMutatorGameplayEvent, EventParam3) == 0x00000C, "Member 'FortAthenaMutator_Score_OnMutatorGameplayEvent::EventParam3' has a wrong offset!");

// Function ScoreRuntime.FortAthenaMutator_Score.OnRep_CurrentBonusWindow
// 0x000C (0x000C - 0x0000)
struct FortAthenaMutator_Score_OnRep_CurrentBonusWindow final
{
public:
	struct FScoreLTMBonusWindow                   LastBonusWindow;                                   // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Score_OnRep_CurrentBonusWindow) == 0x000004, "Wrong alignment on FortAthenaMutator_Score_OnRep_CurrentBonusWindow");
static_assert(sizeof(FortAthenaMutator_Score_OnRep_CurrentBonusWindow) == 0x00000C, "Wrong size on FortAthenaMutator_Score_OnRep_CurrentBonusWindow");
static_assert(offsetof(FortAthenaMutator_Score_OnRep_CurrentBonusWindow, LastBonusWindow) == 0x000000, "Member 'FortAthenaMutator_Score_OnRep_CurrentBonusWindow::LastBonusWindow' has a wrong offset!");

// Function ScoreRuntime.FortCheatManager_Score.ScoreLTMCheatScoreEvent
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Score_ScoreLTMCheatScoreEvent final
{
public:
	int32                                         ScoreEvent;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Score_ScoreLTMCheatScoreEvent) == 0x000004, "Wrong alignment on FortCheatManager_Score_ScoreLTMCheatScoreEvent");
static_assert(sizeof(FortCheatManager_Score_ScoreLTMCheatScoreEvent) == 0x000004, "Wrong size on FortCheatManager_Score_ScoreLTMCheatScoreEvent");
static_assert(offsetof(FortCheatManager_Score_ScoreLTMCheatScoreEvent, ScoreEvent) == 0x000000, "Member 'FortCheatManager_Score_ScoreLTMCheatScoreEvent::ScoreEvent' has a wrong offset!");

}

