#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LagerRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// ScriptStruct LagerRuntime.FortAthenaLivingWorldCategory
// 0x0058 (0x0060 - 0x0008)
struct FFortAthenaLivingWorldCategory final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UDataTable>              EventTable;                                        // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxCount;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Priority;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bExcludeFromGlobalAIBudget;                        // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequirePlaylistTags;                               // 0x0040(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaLivingWorldCategory) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldCategory");
static_assert(sizeof(FFortAthenaLivingWorldCategory) == 0x000060, "Wrong size on FFortAthenaLivingWorldCategory");
static_assert(offsetof(FFortAthenaLivingWorldCategory, EventTable) == 0x000008, "Member 'FFortAthenaLivingWorldCategory::EventTable' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, MaxCount) == 0x000030, "Member 'FFortAthenaLivingWorldCategory::MaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, Priority) == 0x000034, "Member 'FFortAthenaLivingWorldCategory::Priority' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, bExcludeFromGlobalAIBudget) == 0x000038, "Member 'FFortAthenaLivingWorldCategory::bExcludeFromGlobalAIBudget' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, RequirePlaylistTags) == 0x000040, "Member 'FFortAthenaLivingWorldCategory::RequirePlaylistTags' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEvent
// 0x00D0 (0x00D8 - 0x0008)
struct FFortAthenaLivingWorldEvent final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEventData> EventData;                                 // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         IsEnabled;                                         // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<float>                                 MaxCount;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 MaxSpawnedCount;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MinRespawnTime;                                    // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 MaxRespawnTime;                                    // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOnlyInSafeZone;                                   // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAthenaGamePhaseStep                          ActivationGamePhaseStep;                           // 0x00A1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivationSafeZoneIndex;                           // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ActivationMinDelay;                                // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ActivationMaxDelay;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCheckForActorDensity;                             // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequirePlaylistTags;                               // 0x00B8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaLivingWorldEvent) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEvent");
static_assert(sizeof(FFortAthenaLivingWorldEvent) == 0x0000D8, "Wrong size on FFortAthenaLivingWorldEvent");
static_assert(offsetof(FFortAthenaLivingWorldEvent, EventData) == 0x000008, "Member 'FFortAthenaLivingWorldEvent::EventData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, IsEnabled) == 0x000030, "Member 'FFortAthenaLivingWorldEvent::IsEnabled' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxCount) == 0x000058, "Member 'FFortAthenaLivingWorldEvent::MaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxSpawnedCount) == 0x000068, "Member 'FFortAthenaLivingWorldEvent::MaxSpawnedCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, Weight) == 0x000078, "Member 'FFortAthenaLivingWorldEvent::Weight' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MinRespawnTime) == 0x000080, "Member 'FFortAthenaLivingWorldEvent::MinRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxRespawnTime) == 0x000090, "Member 'FFortAthenaLivingWorldEvent::MaxRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, bOnlyInSafeZone) == 0x0000A0, "Member 'FFortAthenaLivingWorldEvent::bOnlyInSafeZone' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationGamePhaseStep) == 0x0000A1, "Member 'FFortAthenaLivingWorldEvent::ActivationGamePhaseStep' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationSafeZoneIndex) == 0x0000A4, "Member 'FFortAthenaLivingWorldEvent::ActivationSafeZoneIndex' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationMinDelay) == 0x0000A8, "Member 'FFortAthenaLivingWorldEvent::ActivationMinDelay' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationMaxDelay) == 0x0000AC, "Member 'FFortAthenaLivingWorldEvent::ActivationMaxDelay' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, bCheckForActorDensity) == 0x0000B0, "Member 'FFortAthenaLivingWorldEvent::bCheckForActorDensity' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, RequirePlaylistTags) == 0x0000B8, "Member 'FFortAthenaLivingWorldEvent::RequirePlaylistTags' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEventDataActorSpawnDescription
// 0x00E8 (0x00E8 - 0x0000)
struct FFortAthenaLivingWorldEventDataActorSpawnDescription final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpawnerData;                                       // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SpawnerDataTagQuery;                               // 0x0050(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseProviderTagOverrides;                          // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      ProviderFiltersTagQueryOverride;                   // 0x00A0(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldEventDataActorSpawnDescription) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEventDataActorSpawnDescription");
static_assert(sizeof(FFortAthenaLivingWorldEventDataActorSpawnDescription) == 0x0000E8, "Wrong size on FFortAthenaLivingWorldEventDataActorSpawnDescription");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, ActorClass) == 0x000000, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, SpawnerData) == 0x000028, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::SpawnerData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, SpawnerDataTagQuery) == 0x000050, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::SpawnerDataTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, bUseProviderTagOverrides) == 0x000098, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::bUseProviderTagOverrides' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, ProviderFiltersTagQueryOverride) == 0x0000A0, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::ProviderFiltersTagQueryOverride' has a wrong offset!");

// ScriptStruct LagerRuntime.PointProviderFilterEntry
// 0x0070 (0x0070 - 0x0000)
struct FPointProviderFilterEntry final
{
public:
	struct FGameplayTagQuery                      ProviderFiltersTagQuery;                           // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Weight;                                            // 0x0048(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPointProviderFilterEntry) == 0x000008, "Wrong alignment on FPointProviderFilterEntry");
static_assert(sizeof(FPointProviderFilterEntry) == 0x000070, "Wrong size on FPointProviderFilterEntry");
static_assert(offsetof(FPointProviderFilterEntry, ProviderFiltersTagQuery) == 0x000000, "Member 'FPointProviderFilterEntry::ProviderFiltersTagQuery' has a wrong offset!");
static_assert(offsetof(FPointProviderFilterEntry, Weight) == 0x000048, "Member 'FPointProviderFilterEntry::Weight' has a wrong offset!");

// ScriptStruct LagerRuntime.FortLivingWorldConfigOverride
// 0x0070 (0x0070 - 0x0000)
struct FFortLivingWorldConfigOverride final
{
public:
	TSoftObjectPtr<class UWorld>                  SourceWorld;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlaylistTag;                                       // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaLivingWorldConfigData> LagerConfig;                              // 0x0048(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLivingWorldConfigOverride) == 0x000008, "Wrong alignment on FFortLivingWorldConfigOverride");
static_assert(sizeof(FFortLivingWorldConfigOverride) == 0x000070, "Wrong size on FFortLivingWorldConfigOverride");
static_assert(offsetof(FFortLivingWorldConfigOverride, SourceWorld) == 0x000000, "Member 'FFortLivingWorldConfigOverride::SourceWorld' has a wrong offset!");
static_assert(offsetof(FFortLivingWorldConfigOverride, PlaylistTag) == 0x000028, "Member 'FFortLivingWorldConfigOverride::PlaylistTag' has a wrong offset!");
static_assert(offsetof(FFortLivingWorldConfigOverride, LagerConfig) == 0x000048, "Member 'FFortLivingWorldConfigOverride::LagerConfig' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPointProviderFilterRules
// 0x0002 (0x0002 - 0x0000)
struct FFortAthenaLivingWorldPointProviderFilterRules final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldPointProviderFilterRules) == 0x000001, "Wrong alignment on FFortAthenaLivingWorldPointProviderFilterRules");
static_assert(sizeof(FFortAthenaLivingWorldPointProviderFilterRules) == 0x000002, "Wrong size on FFortAthenaLivingWorldPointProviderFilterRules");

}

