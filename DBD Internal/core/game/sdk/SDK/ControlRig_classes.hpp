#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PropertyPath_structs.hpp"
#include "ControlRig_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LevelSequence_classes.hpp"
#include "AnimGraphRuntime_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "MovieSceneTracks_structs.hpp"
#include "MovieSceneTracks_classes.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class ControlRig.ControlRigSequence
// 0x0058 (0x0208 - 0x01B0)
class UControlRigSequence final : public ULevelSequence
{
public:
	TSoftObjectPtr<class UAnimSequence>           LastExportedToAnimationSequence;                   // 0x01B0(0x0028)(AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           LastExportedUsingSkeletalMesh;                     // 0x01D8(0x0028)(AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastExportedFrameRate;                             // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSequence">();
	}
	static class UControlRigSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSequence>();
	}
};
static_assert(alignof(UControlRigSequence) == 0x000008, "Wrong alignment on UControlRigSequence");
static_assert(sizeof(UControlRigSequence) == 0x000208, "Wrong size on UControlRigSequence");
static_assert(offsetof(UControlRigSequence, LastExportedToAnimationSequence) == 0x0001B0, "Member 'UControlRigSequence::LastExportedToAnimationSequence' has a wrong offset!");
static_assert(offsetof(UControlRigSequence, LastExportedUsingSkeletalMesh) == 0x0001D8, "Member 'UControlRigSequence::LastExportedUsingSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UControlRigSequence, LastExportedFrameRate) == 0x000200, "Member 'UControlRigSequence::LastExportedFrameRate' has a wrong offset!");

// Class ControlRig.ControlRigComponent
// 0x0048 (0x00F8 - 0x00B0)
class UControlRigComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreInitializeDelegate;   // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostInitializeDelegate;  // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreEvaluateDelegate;     // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostEvaluateDelegate;    // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UControlRig*                            ControlRig;                                        // 0x00F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnPostEvaluate();
	void OnPostInitialize();
	void OnPreEvaluate();
	void OnPreInitialize();

	class UControlRig* BP_GetControlRig() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigComponent">();
	}
	static class UControlRigComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigComponent>();
	}
};
static_assert(alignof(UControlRigComponent) == 0x000008, "Wrong alignment on UControlRigComponent");
static_assert(sizeof(UControlRigComponent) == 0x0000F8, "Wrong size on UControlRigComponent");
static_assert(offsetof(UControlRigComponent, OnPreInitializeDelegate) == 0x0000B0, "Member 'UControlRigComponent::OnPreInitializeDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPostInitializeDelegate) == 0x0000C0, "Member 'UControlRigComponent::OnPostInitializeDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPreEvaluateDelegate) == 0x0000D0, "Member 'UControlRigComponent::OnPreEvaluateDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPostEvaluateDelegate) == 0x0000E0, "Member 'UControlRigComponent::OnPostEvaluateDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, ControlRig) == 0x0000F0, "Member 'UControlRigComponent::ControlRig' has a wrong offset!");

// Class ControlRig.ControlRig
// 0x0340 (0x0368 - 0x0028)
class UControlRig : public UObject
{
public:
	uint8                                         Pad_28[0x4C];                                      // 0x0028(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	ERigExecutionType                             ExecutionType;                                     // 0x0074(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URigVM*                                 VM;                                                // 0x0078(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRigHierarchyContainer                 Hierarchy;                                         // 0x0080(0x01B0)(Edit, DisableEditOnInstance, EditConst, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UControlRigGizmoLibrary> GizmoLibrary;                                      // 0x0230(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x10];                                     // 0x0258(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FCachedPropertyPath> InputProperties;                                   // 0x0268(0x0050)(Deprecated, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FCachedPropertyPath> OutputProperties;                                  // 0x02B8(0x0050)(Deprecated, NativeAccessSpecifierPrivate)
	struct FControlRigDrawContainer               DrawContainer;                                     // 0x0308(0x0018)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationDataSourceRegistry*           DataSourceRegistry;                                // 0x0328(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x38];                                     // 0x0330(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRig">();
	}
	static class UControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRig>();
	}
};
static_assert(alignof(UControlRig) == 0x000008, "Wrong alignment on UControlRig");
static_assert(sizeof(UControlRig) == 0x000368, "Wrong size on UControlRig");
static_assert(offsetof(UControlRig, ExecutionType) == 0x000074, "Member 'UControlRig::ExecutionType' has a wrong offset!");
static_assert(offsetof(UControlRig, VM) == 0x000078, "Member 'UControlRig::VM' has a wrong offset!");
static_assert(offsetof(UControlRig, Hierarchy) == 0x000080, "Member 'UControlRig::Hierarchy' has a wrong offset!");
static_assert(offsetof(UControlRig, GizmoLibrary) == 0x000230, "Member 'UControlRig::GizmoLibrary' has a wrong offset!");
static_assert(offsetof(UControlRig, InputProperties) == 0x000268, "Member 'UControlRig::InputProperties' has a wrong offset!");
static_assert(offsetof(UControlRig, OutputProperties) == 0x0002B8, "Member 'UControlRig::OutputProperties' has a wrong offset!");
static_assert(offsetof(UControlRig, DrawContainer) == 0x000308, "Member 'UControlRig::DrawContainer' has a wrong offset!");
static_assert(offsetof(UControlRig, DataSourceRegistry) == 0x000328, "Member 'UControlRig::DataSourceRegistry' has a wrong offset!");

// Class ControlRig.ControlRigGizmoLibrary
// 0x00B8 (0x00E0 - 0x0028)
class UControlRigGizmoLibrary final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigGizmoDefinition             DefaultGizmo;                                      // 0x0030(0x0060)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               DefaultMaterial;                                   // 0x0090(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialColorParameter;                            // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FControlRigGizmoDefinition>     Gizmos;                                            // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigGizmoLibrary">();
	}
	static class UControlRigGizmoLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigGizmoLibrary>();
	}
};
static_assert(alignof(UControlRigGizmoLibrary) == 0x000010, "Wrong alignment on UControlRigGizmoLibrary");
static_assert(sizeof(UControlRigGizmoLibrary) == 0x0000E0, "Wrong size on UControlRigGizmoLibrary");
static_assert(offsetof(UControlRigGizmoLibrary, DefaultGizmo) == 0x000030, "Member 'UControlRigGizmoLibrary::DefaultGizmo' has a wrong offset!");
static_assert(offsetof(UControlRigGizmoLibrary, DefaultMaterial) == 0x000090, "Member 'UControlRigGizmoLibrary::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(UControlRigGizmoLibrary, MaterialColorParameter) == 0x0000B8, "Member 'UControlRigGizmoLibrary::MaterialColorParameter' has a wrong offset!");
static_assert(offsetof(UControlRigGizmoLibrary, Gizmos) == 0x0000C0, "Member 'UControlRigGizmoLibrary::Gizmos' has a wrong offset!");

// Class ControlRig.AdditiveControlRig
// 0x0010 (0x0378 - 0x0368)
class UAdditiveControlRig final : public UControlRig
{
public:
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdditiveControlRig">();
	}
	static class UAdditiveControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdditiveControlRig>();
	}
};
static_assert(alignof(UAdditiveControlRig) == 0x000008, "Wrong alignment on UAdditiveControlRig");
static_assert(sizeof(UAdditiveControlRig) == 0x000378, "Wrong size on UAdditiveControlRig");

// Class ControlRig.ControlRigBlueprintGeneratedClass
// 0x0000 (0x0328 - 0x0328)
class UControlRigBlueprintGeneratedClass final : public UBlueprintGeneratedClass
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigBlueprintGeneratedClass">();
	}
	static class UControlRigBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigBlueprintGeneratedClass>();
	}
};
static_assert(alignof(UControlRigBlueprintGeneratedClass) == 0x000008, "Wrong alignment on UControlRigBlueprintGeneratedClass");
static_assert(sizeof(UControlRigBlueprintGeneratedClass) == 0x000328, "Wrong size on UControlRigBlueprintGeneratedClass");

// Class ControlRig.ControlRigLayerInstance
// 0x0000 (0x02C0 - 0x02C0)
class UControlRigLayerInstance final : public UAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigLayerInstance">();
	}
	static class UControlRigLayerInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigLayerInstance>();
	}
};
static_assert(alignof(UControlRigLayerInstance) == 0x000010, "Wrong alignment on UControlRigLayerInstance");
static_assert(sizeof(UControlRigLayerInstance) == 0x0002C0, "Wrong size on UControlRigLayerInstance");

// Class ControlRig.ControlRigObjectHolder
// 0x0010 (0x0038 - 0x0028)
class UControlRigObjectHolder final : public UObject
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigObjectHolder">();
	}
	static class UControlRigObjectHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigObjectHolder>();
	}
};
static_assert(alignof(UControlRigObjectHolder) == 0x000008, "Wrong alignment on UControlRigObjectHolder");
static_assert(sizeof(UControlRigObjectHolder) == 0x000038, "Wrong size on UControlRigObjectHolder");
static_assert(offsetof(UControlRigObjectHolder, Objects) == 0x000028, "Member 'UControlRigObjectHolder::Objects' has a wrong offset!");

// Class ControlRig.ControlRigSequencerAnimInstance
// 0x0010 (0x02D0 - 0x02C0)
class UControlRigSequencerAnimInstance final : public UAnimSequencerInstance
{
public:
	uint8                                         Pad_2C0[0x10];                                     // 0x02C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSequencerAnimInstance">();
	}
	static class UControlRigSequencerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSequencerAnimInstance>();
	}
};
static_assert(alignof(UControlRigSequencerAnimInstance) == 0x000010, "Wrong alignment on UControlRigSequencerAnimInstance");
static_assert(sizeof(UControlRigSequencerAnimInstance) == 0x0002D0, "Wrong size on UControlRigSequencerAnimInstance");

// Class ControlRig.ControlRigSettings
// 0x0000 (0x0038 - 0x0038)
class UControlRigSettings final : public UDeveloperSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSettings">();
	}
	static class UControlRigSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSettings>();
	}
};
static_assert(alignof(UControlRigSettings) == 0x000008, "Wrong alignment on UControlRigSettings");
static_assert(sizeof(UControlRigSettings) == 0x000038, "Wrong size on UControlRigSettings");

// Class ControlRig.ControlRigManipulatable
// 0x0000 (0x0000 - 0x0000)
class IControlRigManipulatable final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigManipulatable">();
	}
	static class IControlRigManipulatable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IControlRigManipulatable>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IControlRigManipulatable) == 0x000001, "Wrong alignment on IControlRigManipulatable");
static_assert(sizeof(IControlRigManipulatable) == 0x000001, "Wrong size on IControlRigManipulatable");

// Class ControlRig.MovieSceneControlRigParameterSection
// 0x0138 (0x0280 - 0x0148)
class UMovieSceneControlRigParameterSection final : public UMovieSceneParameterSection
{
public:
	class UControlRig*                            ControlRig;                                        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ControlsMask;                                      // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTransformMask               TransformMask;                                     // 0x0160(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAdditive;                                         // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyBoneFilter;                                  // 0x0165(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputBlendPose                        BoneFilter;                                        // 0x0168(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Weight;                                            // 0x0178(0x00A0)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FChannelMapInfo>     ControlChannelMap;                                 // 0x0218(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigParameterSection">();
	}
	static class UMovieSceneControlRigParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigParameterSection>();
	}
};
static_assert(alignof(UMovieSceneControlRigParameterSection) == 0x000008, "Wrong alignment on UMovieSceneControlRigParameterSection");
static_assert(sizeof(UMovieSceneControlRigParameterSection) == 0x000280, "Wrong size on UMovieSceneControlRigParameterSection");
static_assert(offsetof(UMovieSceneControlRigParameterSection, ControlRig) == 0x000148, "Member 'UMovieSceneControlRigParameterSection::ControlRig' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, ControlsMask) == 0x000150, "Member 'UMovieSceneControlRigParameterSection::ControlsMask' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, TransformMask) == 0x000160, "Member 'UMovieSceneControlRigParameterSection::TransformMask' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, bAdditive) == 0x000164, "Member 'UMovieSceneControlRigParameterSection::bAdditive' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, bApplyBoneFilter) == 0x000165, "Member 'UMovieSceneControlRigParameterSection::bApplyBoneFilter' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, BoneFilter) == 0x000168, "Member 'UMovieSceneControlRigParameterSection::BoneFilter' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, Weight) == 0x000178, "Member 'UMovieSceneControlRigParameterSection::Weight' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, ControlChannelMap) == 0x000218, "Member 'UMovieSceneControlRigParameterSection::ControlChannelMap' has a wrong offset!");

// Class ControlRig.MovieSceneControlRigParameterTrack
// 0x0030 (0x00A8 - 0x0078)
class UMovieSceneControlRigParameterTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlRig*                            ControlRig;                                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieSceneSection*                     SectionToKey;                                      // 0x0088(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0090(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TrackName;                                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigParameterTrack">();
	}
	static class UMovieSceneControlRigParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigParameterTrack>();
	}
};
static_assert(alignof(UMovieSceneControlRigParameterTrack) == 0x000008, "Wrong alignment on UMovieSceneControlRigParameterTrack");
static_assert(sizeof(UMovieSceneControlRigParameterTrack) == 0x0000A8, "Wrong size on UMovieSceneControlRigParameterTrack");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, ControlRig) == 0x000080, "Member 'UMovieSceneControlRigParameterTrack::ControlRig' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, SectionToKey) == 0x000088, "Member 'UMovieSceneControlRigParameterTrack::SectionToKey' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, Sections) == 0x000090, "Member 'UMovieSceneControlRigParameterTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, TrackName) == 0x0000A0, "Member 'UMovieSceneControlRigParameterTrack::TrackName' has a wrong offset!");

// Class ControlRig.MovieSceneControlRigSection
// 0x00B8 (0x0220 - 0x0168)
class UMovieSceneControlRigSection final : public UMovieSceneSubSection
{
public:
	bool                                          bAdditive;                                         // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyBoneFilter;                                  // 0x0169(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputBlendPose                        BoneFilter;                                        // 0x0170(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Weight;                                            // 0x0180(0x00A0)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigSection">();
	}
	static class UMovieSceneControlRigSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigSection>();
	}
};
static_assert(alignof(UMovieSceneControlRigSection) == 0x000008, "Wrong alignment on UMovieSceneControlRigSection");
static_assert(sizeof(UMovieSceneControlRigSection) == 0x000220, "Wrong size on UMovieSceneControlRigSection");
static_assert(offsetof(UMovieSceneControlRigSection, bAdditive) == 0x000168, "Member 'UMovieSceneControlRigSection::bAdditive' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigSection, bApplyBoneFilter) == 0x000169, "Member 'UMovieSceneControlRigSection::bApplyBoneFilter' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigSection, BoneFilter) == 0x000170, "Member 'UMovieSceneControlRigSection::BoneFilter' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigSection, Weight) == 0x000180, "Member 'UMovieSceneControlRigSection::Weight' has a wrong offset!");

// Class ControlRig.MovieSceneControlRigTrack
// 0x0000 (0x0088 - 0x0088)
class UMovieSceneControlRigTrack final : public UMovieSceneSubTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigTrack">();
	}
	static class UMovieSceneControlRigTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigTrack>();
	}
};
static_assert(alignof(UMovieSceneControlRigTrack) == 0x000008, "Wrong alignment on UMovieSceneControlRigTrack");
static_assert(sizeof(UMovieSceneControlRigTrack) == 0x000088, "Wrong size on UMovieSceneControlRigTrack");

}

