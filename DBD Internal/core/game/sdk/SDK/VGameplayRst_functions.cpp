#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VGameplayRst

#include "Basic.hpp"

#include "VGameplayRst_classes.hpp"
#include "VGameplayRst_parameters.hpp"


namespace SDK
{

// Function VGameplayRst.AudioComponentBase.OnRep_ActiveSoundInfo
// (Final, Native, Protected)

void UAudioComponentBase::OnRep_ActiveSoundInfo()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActiveSoundInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.AudioComponentBase.OnRep_SoundAsset
// (Final, Native, Protected)

void UAudioComponentBase::OnRep_SoundAsset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_SoundAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.ControllerStateComponent.OnRep_ActiveStates
// (Final, Native, Private)

void UControllerStateComponent::OnRep_ActiveStates()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActiveStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLevelStreamingPlayerControllerRpcComponent.TellServer_ClientLevelLoaded
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UVerseLevelStreamingComponentBase*LevelStreamingComponent                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVerseLevelStreamingPlayerControllerRpcComponent::TellServer_ClientLevelLoaded(class UVerseLevelStreamingComponentBase* LevelStreamingComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TellServer_ClientLevelLoaded");

	Params::VerseLevelStreamingPlayerControllerRpcComponent_TellServer_ClientLevelLoaded Parms{};

	Parms.LevelStreamingComponent = LevelStreamingComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VGameplayRst.VerseLevelStreamingPlayerControllerRpcComponent.TellServer_ClientLevelUnloaded
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UVerseLevelStreamingComponentBase*LevelStreamingComponent                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVerseLevelStreamingPlayerControllerRpcComponent::TellServer_ClientLevelUnloaded(class UVerseLevelStreamingComponentBase* LevelStreamingComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TellServer_ClientLevelUnloaded");

	Params::VerseLevelStreamingPlayerControllerRpcComponent_TellServer_ClientLevelUnloaded Parms{};

	Parms.LevelStreamingComponent = LevelStreamingComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VGameplayRst.VerseLevelStreamingComponentBase.OnLevelShown_Client
// (Final, Native, Public)

void UVerseLevelStreamingComponentBase::OnLevelShown_Client()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnLevelShown_Client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLevelStreamingComponentBase.OnLevelShown_Server
// (Final, Native, Public)

void UVerseLevelStreamingComponentBase::OnLevelShown_Server()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnLevelShown_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLevelStreamingComponentBase.OnLevelUnloaded_Client
// (Final, Native, Public)

void UVerseLevelStreamingComponentBase::OnLevelUnloaded_Client()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnLevelUnloaded_Client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLevelStreamingComponentBase.OnLevelUnloaded_Server
// (Final, Native, Public)

void UVerseLevelStreamingComponentBase::OnLevelUnloaded_Server()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnLevelUnloaded_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLevelStreamingComponentBase.OnRep_NewLevel
// (Final, Native, Public)

void UVerseLevelStreamingComponentBase::OnRep_NewLevel()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_NewLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLightPropertiesBase.OnRep_Intensity
// (Final, Native, Protected)

void UVerseLightPropertiesBase::OnRep_Intensity()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_Intensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLightPropertiesBase.OnRep_LightColor
// (Final, Native, Protected)

void UVerseLightPropertiesBase::OnRep_LightColor()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_LightColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLightPropertiesBase.OnRep_LightComponent
// (Final, Native, Protected)

void UVerseLightPropertiesBase::OnRep_LightComponent()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_LightComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseLocalLightProperties.OnRep_AttenuationRadius
// (Final, Native, Protected)

void UVerseLocalLightProperties::OnRep_AttenuationRadius()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_AttenuationRadius");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VersePointLightProperties.OnRep_SourceLength
// (Final, Native, Public)

void UVersePointLightProperties::OnRep_SourceLength()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_SourceLength");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VersePointLightProperties.OnRep_SourceRadius
// (Final, Native, Public)

void UVersePointLightProperties::OnRep_SourceRadius()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_SourceRadius");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseSpotLightProperties.OnRep_InnerConeAngle
// (Final, Native, Public)

void UVerseSpotLightProperties::OnRep_InnerConeAngle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_InnerConeAngle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.VerseSpotLightProperties.OnRep_OuterConeAngle
// (Final, Native, Public)

void UVerseSpotLightProperties::OnRep_OuterConeAngle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_OuterConeAngle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.ParticleSystemComponentBase.OnRep_bActive
// (Final, Native, Protected)

void UParticleSystemComponentBase::OnRep_bActive()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_bActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VGameplayRst.ParticleSystemComponentBase.OnRep_ParticleSystemAsset
// (Final, Native, Protected)

void UParticleSystemComponentBase::OnRep_ParticleSystemAsset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ParticleSystemAsset");

	UObject::ProcessEvent(Func, nullptr);
}

}

