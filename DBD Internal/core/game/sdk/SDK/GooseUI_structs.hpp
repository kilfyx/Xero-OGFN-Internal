#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GooseUI

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum GooseUI.ERadarIconState
// NumValues: 0x0003
enum class ERadarIconState : uint8
{
	Closed                                   = 0,
	Open                                     = 1,
	ERadarIconState_MAX                      = 2,
};

// ScriptStruct GooseUI.GooseLeaderboardData
// 0x0028 (0x0028 - 0x0000)
struct FGooseLeaderboardData final
{
public:
	class FText                                   SquadName;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PlanesRemaining;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfPlaneEliminations;                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemySquad;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGooseLeaderboardData) == 0x000008, "Wrong alignment on FGooseLeaderboardData");
static_assert(sizeof(FGooseLeaderboardData) == 0x000028, "Wrong size on FGooseLeaderboardData");
static_assert(offsetof(FGooseLeaderboardData, SquadName) == 0x000000, "Member 'FGooseLeaderboardData::SquadName' has a wrong offset!");
static_assert(offsetof(FGooseLeaderboardData, PlanesRemaining) == 0x000018, "Member 'FGooseLeaderboardData::PlanesRemaining' has a wrong offset!");
static_assert(offsetof(FGooseLeaderboardData, NumOfPlaneEliminations) == 0x00001C, "Member 'FGooseLeaderboardData::NumOfPlaneEliminations' has a wrong offset!");
static_assert(offsetof(FGooseLeaderboardData, bEnemySquad) == 0x000020, "Member 'FGooseLeaderboardData::bEnemySquad' has a wrong offset!");

// ScriptStruct GooseUI.GoosePickupDisplayData
// 0x0020 (0x0020 - 0x0000)
struct FGoosePickupDisplayData final
{
public:
	class FName                                   ChestName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoosePickupDisplayData) == 0x000008, "Wrong alignment on FGoosePickupDisplayData");
static_assert(sizeof(FGoosePickupDisplayData) == 0x000020, "Wrong size on FGoosePickupDisplayData");
static_assert(offsetof(FGoosePickupDisplayData, ChestName) == 0x000000, "Member 'FGoosePickupDisplayData::ChestName' has a wrong offset!");
static_assert(offsetof(FGoosePickupDisplayData, DisplayText) == 0x000008, "Member 'FGoosePickupDisplayData::DisplayText' has a wrong offset!");

// ScriptStruct GooseUI.GooseWeaponDisplayData
// 0x0038 (0x0038 - 0x0000)
struct FGooseWeaponDisplayData final
{
public:
	struct FGameplayTag                           WeaponTag;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChestName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     IconMaterial;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGooseWeaponDisplayData) == 0x000008, "Wrong alignment on FGooseWeaponDisplayData");
static_assert(sizeof(FGooseWeaponDisplayData) == 0x000038, "Wrong size on FGooseWeaponDisplayData");
static_assert(offsetof(FGooseWeaponDisplayData, WeaponTag) == 0x000000, "Member 'FGooseWeaponDisplayData::WeaponTag' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, ChestName) == 0x000008, "Member 'FGooseWeaponDisplayData::ChestName' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, IconTexture) == 0x000010, "Member 'FGooseWeaponDisplayData::IconTexture' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, IconMaterial) == 0x000018, "Member 'FGooseWeaponDisplayData::IconMaterial' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, DisplayText) == 0x000020, "Member 'FGooseWeaponDisplayData::DisplayText' has a wrong offset!");

}

