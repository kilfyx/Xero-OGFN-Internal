#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RidingCodeRuntime

#include "Basic.hpp"

#include "RidingCodeRuntime_classes.hpp"
#include "RidingCodeRuntime_parameters.hpp"


namespace SDK
{

// Function RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding.BlueprintCollectRidableAnimBPData
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAnimInstance*                    RidableAnimInstance                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortVehicleLayerAnimInstance_Riding::BlueprintCollectRidableAnimBPData(const class UAnimInstance* RidableAnimInstance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BlueprintCollectRidableAnimBPData");

	Params::FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData Parms{};

	Parms.RidableAnimInstance = RidableAnimInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding.PlaceHandIKTargets
// (Native, Event, Protected, BlueprintEvent)

void UFortVehicleLayerAnimInstance_Riding::PlaceHandIKTargets()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlaceHandIKTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding.SetFootPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERidingFootPhase                        InFootPhase                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortVehicleLayerAnimInstance_Riding::SetFootPhase(const ERidingFootPhase InFootPhase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFootPhase");

	Params::FortVehicleLayerAnimInstance_Riding_SetFootPhase Parms{};

	Parms.InFootPhase = InFootPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding.UpdateBoostPlayRate
// (Native, Event, Protected, BlueprintEvent)

void UFortVehicleLayerAnimInstance_Riding::UpdateBoostPlayRate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateBoostPlayRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding.UpdateSlopePitchForRiding
// (Native, Event, Protected, BlueprintEvent)

void UFortVehicleLayerAnimInstance_Riding::UpdateSlopePitchForRiding()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateSlopePitchForRiding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RidingCheatManager.RidingSetStaminaPercent
// (BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// float                                   StaminaPercent                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URidingCheatManager::RidingSetStaminaPercent(const float StaminaPercent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RidingSetStaminaPercent");

	Params::RidingCheatManager_RidingSetStaminaPercent Parms{};

	Parms.StaminaPercent = StaminaPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RidingCheatManager.StartRidingActor
// (BlueprintAuthorityOnly, Exec, Native, Public)

void URidingCheatManager::StartRidingActor()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartRidingActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RidingCheatManager.StopRidingActor
// (BlueprintAuthorityOnly, Exec, Native, Public)

void URidingCheatManager::StopRidingActor()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopRidingActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RidableComponent.CheatSetStaminaPercent
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   StaminaPercent                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URidableComponent::CheatSetStaminaPercent(const float StaminaPercent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CheatSetStaminaPercent");

	Params::RidableComponent_CheatSetStaminaPercent Parms{};

	Parms.StaminaPercent = StaminaPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RidableComponent.HandleRiderEndPlay
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URidableComponent::HandleRiderEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRiderEndPlay");

	Params::RidableComponent_HandleRiderEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RidableComponent.HandleRiderStartedRiding
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class URiderComponent*                  Rider                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URidableComponent::HandleRiderStartedRiding(class URiderComponent* Rider)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRiderStartedRiding");

	Params::RidableComponent_HandleRiderStartedRiding Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RidableComponent.HandleRiderStoppedRiding
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class URiderComponent*                  Rider                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URidableComponent::HandleRiderStoppedRiding(class URiderComponent* Rider)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRiderStoppedRiding");

	Params::RidableComponent_HandleRiderStoppedRiding Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RidableComponent.OnRep_ActiveRider
// (Final, Native, Protected)

void URidableComponent::OnRep_ActiveRider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActiveRider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RidableComponent.CanBePet
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URidableComponent::CanBePet(class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanBePet");

	Params::RidableComponent_CanBePet Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.CanBeRiddenBP
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URidableComponent::CanBeRiddenBP(class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanBeRiddenBP");

	Params::RidableComponent_CanBeRiddenBP Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.CanRiderPlayEmote
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URidableComponent::CanRiderPlayEmote(const class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanRiderPlayEmote");

	Params::RidableComponent_CanRiderPlayEmote Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.GetPettingData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRidingPettingData         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FRidingPettingData URidableComponent::GetPettingData() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPettingData");

	Params::RidableComponent_GetPettingData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.GetRidingAttachComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* URidableComponent::GetRidingAttachComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRidingAttachComponent");

	Params::RidableComponent_GetRidingAttachComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.GetRidingCapsuleSize
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OriginalRadius                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OriginalHalfHeight                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutRadius                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutHalfHeight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URidableComponent::GetRidingCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRidingCapsuleSize");

	Params::RidableComponent_GetRidingCapsuleSize Parms{};

	Parms.Rider = Rider;
	Parms.OriginalRadius = OriginalRadius;
	Parms.OriginalHalfHeight = OriginalHalfHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (OutRadius != nullptr)
		*OutRadius = Parms.OutRadius;

	if (OutHalfHeight != nullptr)
		*OutHalfHeight = Parms.OutHalfHeight;
}


// Function RidingCodeRuntime.RidableComponent.GetRidingEmoteCapsuleSize
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OriginalRadius                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OriginalHalfHeight                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutRadius                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutHalfHeight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URidableComponent::GetRidingEmoteCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRidingEmoteCapsuleSize");

	Params::RidableComponent_GetRidingEmoteCapsuleSize Parms{};

	Parms.Rider = Rider;
	Parms.OriginalRadius = OriginalRadius;
	Parms.OriginalHalfHeight = OriginalHalfHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (OutRadius != nullptr)
		*OutRadius = Parms.OutRadius;

	if (OutHalfHeight != nullptr)
		*OutHalfHeight = Parms.OutHalfHeight;
}


// Function RidingCodeRuntime.RidableComponent.IsBeingRidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URidableComponent::IsBeingRidden() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsBeingRidden");

	Params::RidableComponent_IsBeingRidden Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.IsFlying
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URidableComponent::IsFlying() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsFlying");

	Params::RidableComponent_IsFlying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.IsSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URidableComponent::IsSprinting() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSprinting");

	Params::RidableComponent_IsSprinting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RidableComponent.ShouldCameraFocusOnRidable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URidableComponent::ShouldCameraFocusOnRidable(const class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShouldCameraFocusOnRidable");

	Params::RidableComponent_ShouldCameraFocusOnRidable Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.ControllableRidableComponent.CancelBuildBar
// (Final, Native, Protected, BlueprintCallable)

void UControllableRidableComponent::CancelBuildBar()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CancelBuildBar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.HandleAbilityHeld
// (Event, Public, BlueprintEvent)

void UControllableRidableComponent::HandleAbilityHeld()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleAbilityHeld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.HandleAbilityStarted
// (Event, Public, BlueprintEvent)

void UControllableRidableComponent::HandleAbilityStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleAbilityStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.HandleAbilityStopped
// (Event, Public, BlueprintEvent)

void UControllableRidableComponent::HandleAbilityStopped()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleAbilityStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.HandleCancelSprint
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bAbilityInputHeld                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceCancel                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllableRidableComponent::HandleCancelSprint(const bool bAbilityInputHeld, const bool bForceCancel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleCancelSprint");

	Params::ControllableRidableComponent_HandleCancelSprint Parms{};

	Parms.bAbilityInputHeld = bAbilityInputHeld;
	Parms.bForceCancel = bForceCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllableRidableComponent.HandleJumpHeld
// (Event, Public, BlueprintEvent)

void UControllableRidableComponent::HandleJumpHeld()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleJumpHeld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.HandleJumpStarted
// (Event, Public, BlueprintEvent)

void UControllableRidableComponent::HandleJumpStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleJumpStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.HandleJumpStopped
// (Event, Public, BlueprintEvent)

void UControllableRidableComponent::HandleJumpStopped()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleJumpStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.OnCapsuleBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UControllableRidableComponent::OnCapsuleBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCapsuleBeginOverlap");

	Params::ControllableRidableComponent_OnCapsuleBeginOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllableRidableComponent.OnRep_IsBeingControlled
// (Final, Native, Protected)

void UControllableRidableComponent::OnRep_IsBeingControlled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_IsBeingControlled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.ServerDoJumpExit
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable)

void UControllableRidableComponent::ServerDoJumpExit()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerDoJumpExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllableRidableComponent.CanBeControlled
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControllableRidableComponent::CanBeControlled(class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanBeControlled");

	Params::ControllableRidableComponent_CanBeControlled Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.ControllableRidableComponent.CanStartSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControllableRidableComponent::CanStartSprinting() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanStartSprinting");

	Params::ControllableRidableComponent_CanStartSprinting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.ControllableRidableComponent.GetAbilityDisplayText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UControllableRidableComponent::GetAbilityDisplayText() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAbilityDisplayText");

	Params::ControllableRidableComponent_GetAbilityDisplayText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.ControllableRidableComponent.IsSprintToggleable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControllableRidableComponent::IsSprintToggleable() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSprintToggleable");

	Params::ControllableRidableComponent_IsSprintToggleable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RiderComponent.ClientHandleFinishedCharacterCustomization
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::ClientHandleFinishedCharacterCustomization(class AFortPlayerPawn* PlayerPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientHandleFinishedCharacterCustomization");

	Params::RiderComponent_ClientHandleFinishedCharacterCustomization Parms{};

	Parms.PlayerPawn = PlayerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.ClientNotifyEmoteFailure
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// struct FGameplayTagContainer            ErrorTags                                              (ConstParm, Parm, NativeAccessSpecifierPublic)

void URiderComponent::ClientNotifyEmoteFailure(const struct FGameplayTagContainer& ErrorTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientNotifyEmoteFailure");

	Params::RiderComponent_ClientNotifyEmoteFailure Parms{};

	Parms.ErrorTags = std::move(ErrorTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleActorEndPlayWhileRiding
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandleActorEndPlayWhileRiding(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleActorEndPlayWhileRiding");

	Params::RiderComponent_HandleActorEndPlayWhileRiding Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleDBNOWhileRiding
// (Final, Native, Protected)

void URiderComponent::HandleDBNOWhileRiding()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDBNOWhileRiding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.HandleDeferredExitVelocity
// (Final, Native, Protected, HasDefaults)
// Parameters:
// struct FVector                          ExitVelocity                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandleDeferredExitVelocity(const struct FVector& ExitVelocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDeferredExitVelocity");

	Params::RiderComponent_HandleDeferredExitVelocity Parms{};

	Parms.ExitVelocity = std::move(ExitVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleGamepadRidingExitReleased
// (Final, Native, Protected)

void URiderComponent::HandleGamepadRidingExitReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGamepadRidingExitReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.HandleOnWeaponEquipped
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      PrevWeapon                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandleOnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOnWeaponEquipped");

	Params::RiderComponent_HandleOnWeaponEquipped Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandlePawnDiedWhileRiding
// (Final, Native, Protected)
// Parameters:
// class AFortPawn*                        DeadPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandlePawnDiedWhileRiding(class AFortPawn* DeadPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePawnDiedWhileRiding");

	Params::RiderComponent_HandlePawnDiedWhileRiding Parms{};

	Parms.DeadPawn = DeadPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandlePawnTeleported
// (Final, Native, Protected)
// Parameters:
// class AFortPawn*                        TeleportedPawn                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandlePawnTeleported(class AFortPawn* TeleportedPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePawnTeleported");

	Params::RiderComponent_HandlePawnTeleported Parms{};

	Parms.TeleportedPawn = TeleportedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleRidableFound
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void URiderComponent::HandleRidableFound(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRidableFound");

	Params::RiderComponent_HandleRidableFound Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleRiderDidDamage
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandleRiderDidDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRiderDidDamage");

	Params::RiderComponent_HandleRiderDidDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitComponent = HitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleRiderTakenDamage
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamageOnOwnerPawnDamageddActor                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandleRiderTakenDamage(class AActor* DamageOnOwnerPawnDamageddActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRiderTakenDamage");

	Params::RiderComponent_HandleRiderTakenDamage Parms{};

	Parms.DamageOnOwnerPawnDamageddActor = DamageOnOwnerPawnDamageddActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleRidingExitPressed
// (Final, Native, Protected)

void URiderComponent::HandleRidingExitPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRidingExitPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.HandleRidingExitReleased
// (Final, Native, Protected)

void URiderComponent::HandleRidingExitReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRidingExitReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.HandleStartedRiding
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class URidableComponent*                Ridable                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandleStartedRiding(class URidableComponent* Ridable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleStartedRiding");

	Params::RiderComponent_HandleStartedRiding Parms{};

	Parms.Ridable = Ridable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.HandleStoppedRiding
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class URidableComponent*                Ridable                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::HandleStoppedRiding(class URidableComponent* Ridable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleStoppedRiding");

	Params::RiderComponent_HandleStoppedRiding Parms{};

	Parms.Ridable = Ridable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.OnMovementModeChanged
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       InCharacter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiderComponent::OnMovementModeChanged(class ACharacter* InCharacter, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMovementModeChanged");

	Params::RiderComponent_OnMovementModeChanged Parms{};

	Parms.InCharacter = InCharacter;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.RiderComponent.OnRep_ActiveRidable
// (Final, Native, Protected)

void URiderComponent::OnRep_ActiveRidable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActiveRidable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.OnRep_IsSprintingReplay
// (Final, Native, Protected)

void URiderComponent::OnRep_IsSprintingReplay()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_IsSprintingReplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.OnRep_RidableControlRuntimeUpdated
// (Final, Native, Protected)

void URiderComponent::OnRep_RidableControlRuntimeUpdated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_RidableControlRuntimeUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.ServerRidingExit
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void URiderComponent::ServerRidingExit()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRidingExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.RiderComponent.StartRidingActor
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URiderComponent::StartRidingActor(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartRidingActor");

	Params::RiderComponent_StartRidingActor Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RiderComponent.StopRidingActor
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLaunchRider                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFindDismountLocation                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsJumpExit                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URiderComponent::StopRidingActor(bool bLaunchRider, bool bFindDismountLocation, bool bIsJumpExit)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopRidingActor");

	Params::RiderComponent_StopRidingActor Parms{};

	Parms.bLaunchRider = bLaunchRider;
	Parms.bFindDismountLocation = bFindDismountLocation;
	Parms.bIsJumpExit = bIsJumpExit;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.RiderComponent.IsRidingActor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URiderComponent::IsRidingActor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsRidingActor");

	Params::RiderComponent_IsRidingActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.ControllingRiderComponent.ControllingActor_OnJumpInput
// (Final, Native, Protected)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllingRiderComponent::ControllingActor_OnJumpInput(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ControllingActor_OnJumpInput");

	Params::ControllingRiderComponent_ControllingActor_OnJumpInput Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllingRiderComponent.ControllingActor_OnMoveForward
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllingRiderComponent::ControllingActor_OnMoveForward(float Val)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ControllingActor_OnMoveForward");

	Params::ControllingRiderComponent_ControllingActor_OnMoveForward Parms{};

	Parms.Val = Val;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllingRiderComponent.ControllingActor_OnMoveRight
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllingRiderComponent::ControllingActor_OnMoveRight(float Val)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ControllingActor_OnMoveRight");

	Params::ControllingRiderComponent_ControllingActor_OnMoveRight Parms{};

	Parms.Val = Val;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandleGamepadRidingAbilityPressed
// (Final, Native, Protected)

void UControllingRiderComponent::HandleGamepadRidingAbilityPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGamepadRidingAbilityPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandlePettingAbilityPressed
// (Final, Native, Protected)

void UControllingRiderComponent::HandlePettingAbilityPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePettingAbilityPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandleRequestPettingStart
// (Event, Protected, BlueprintEvent)

void UControllingRiderComponent::HandleRequestPettingStart()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRequestPettingStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandleRequestPettingStop
// (Event, Protected, BlueprintEvent)

void UControllingRiderComponent::HandleRequestPettingStop()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRequestPettingStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandleRidingAbilityPressed
// (Final, Native, Protected)

void UControllingRiderComponent::HandleRidingAbilityPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRidingAbilityPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandleRidingAbilityReleased
// (Final, Native, Protected)

void UControllingRiderComponent::HandleRidingAbilityReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRidingAbilityReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandleSpotActorOrPettingAbilityPressed
// (Final, Native, Protected)

void UControllingRiderComponent::HandleSpotActorOrPettingAbilityPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSpotActorOrPettingAbilityPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.HandleSpotActorOrPettingAbilityReleased
// (Final, Native, Protected)

void UControllingRiderComponent::HandleSpotActorOrPettingAbilityReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSpotActorOrPettingAbilityReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.OnRep_ControlInputReliable
// (Final, Native, Protected)

void UControllingRiderComponent::OnRep_ControlInputReliable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ControlInputReliable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.OnRep_ControlInputUnreliable
// (Final, Native, Protected)

void UControllingRiderComponent::OnRep_ControlInputUnreliable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ControlInputUnreliable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.OnRep_IsControllingRidable
// (Final, Native, Protected)

void UControllingRiderComponent::OnRep_IsControllingRidable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_IsControllingRidable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.OnSprintCanceled
// (Net, NetReliable, Native, Event, Protected, NetServer)

void UControllingRiderComponent::OnSprintCanceled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSprintCanceled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.ReloadPressed
// (Final, Native, Protected)

void UControllingRiderComponent::ReloadPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ReloadPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.ServerCancelPetting
// (Net, NetReliable, Native, Event, Protected, NetServer)

void UControllingRiderComponent::ServerCancelPetting()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerCancelPetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RidingCodeRuntime.ControllingRiderComponent.ServerUpdateControlInputStateReliable
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FRidingControlInputStateReliable InputState                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UControllingRiderComponent::ServerUpdateControlInputStateReliable(const struct FRidingControlInputStateReliable& InputState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerUpdateControlInputStateReliable");

	Params::ControllingRiderComponent_ServerUpdateControlInputStateReliable Parms{};

	Parms.InputState = std::move(InputState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllingRiderComponent.ServerUpdateControlInputStateUnreliable
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FRidingControlInputStateUnreliableInputState                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UControllingRiderComponent::ServerUpdateControlInputStateUnreliable(const struct FRidingControlInputStateUnreliable& InputState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerUpdateControlInputStateUnreliable");

	Params::ControllingRiderComponent_ServerUpdateControlInputStateUnreliable Parms{};

	Parms.InputState = std::move(InputState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllingRiderComponent.UpdateFromInput
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRidingControlInputState         InputState                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UControllingRiderComponent::UpdateFromInput(float DeltaTime, const struct FRidingControlInputState& InputState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateFromInput");

	Params::ControllingRiderComponent_UpdateFromInput Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.InputState = std::move(InputState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RidingCodeRuntime.ControllingRiderComponent.GetControlInputState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRidingControlInputState   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FRidingControlInputState UControllingRiderComponent::GetControlInputState() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetControlInputState");

	Params::ControllingRiderComponent_GetControlInputState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.ControllingRiderComponent.IsTryingToMove
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Tolerance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControllingRiderComponent::IsTryingToMove(float Tolerance) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsTryingToMove");

	Params::ControllingRiderComponent_IsTryingToMove Parms{};

	Parms.Tolerance = Tolerance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RidingCodeRuntime.FortAthenaPettingWildlifeTelemetryData.OnPetted
// (Final, Native, Public, BlueprintCallable)

void UFortAthenaPettingWildlifeTelemetryData::OnPetted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPetted");

	UObject::ProcessEvent(Func, nullptr);
}

}

