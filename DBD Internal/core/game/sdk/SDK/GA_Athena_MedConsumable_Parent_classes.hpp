#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_MedConsumable_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_MedConsumable_Parent.GA_Athena_MedConsumable_Parent_C
// 0x0158 (0x0C10 - 0x0AB8)
class UGA_Athena_MedConsumable_Parent_C : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsHealth;                                       // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasHealthCap;                                      // 0x0AC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ACA[0x2];                                      // 0x0ACA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthHealAmount;                                  // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerDuration;                                   // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHolster;                                     // 0x0AD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD5[0x3];                                      // 0x0AD5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemIDToHolster;                                   // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_EffectToApply;                                  // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsShields;                                      // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasShieldCap;                                      // 0x0AE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AEA[0x2];                                      // 0x0AEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShieldHealAmount;                                  // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_ShieldCap;                                     // 0x0AF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_ShieldAmount;                                  // 0x0B18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_PotionConsumed;                                 // 0x0B40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_HealthCap;                                     // 0x0B48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_HealthAmount;                                  // 0x0B70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tags_FailedResponse;                               // 0x0B98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IgnoreCalcsForEffectApplication;                   // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AlwaysActivate;                                    // 0x0BB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BBA[0x2];                                      // 0x0BBA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_EquippingCue;                                   // 0x0BBC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         OverHealing;                                       // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthIsEffective;                                 // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC9[0x7];                                      // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_HealthHealUsed;                                 // 0x0BD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Channeling;                                     // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GEH_Channeling;                                    // 0x0BE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  QuestTags;                                         // 0x0BF0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_Athena_MedConsumable_Parent(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void Triggered_4C02BFB04B18D9E79F84848FFE6D2C32(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_4C02BFB04B18D9E79F84848FFE6D2C32(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_4C02BFB04B18D9E79F84848FFE6D2C32(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void ShieldCalc();
	void HealthCalc();
	void SetupGE(struct FGameplayEffectSpecHandle* Effect_Out);
	void MakeCustomMontageInfo();
	void OnMontageTriggeredPreCommit();
	void OnMontageTriggeredPostCommitSuccess();

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_MedConsumable_Parent_C">();
	}
	static class UGA_Athena_MedConsumable_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_MedConsumable_Parent_C>();
	}
};
static_assert(alignof(UGA_Athena_MedConsumable_Parent_C) == 0x000008, "Wrong alignment on UGA_Athena_MedConsumable_Parent_C");
static_assert(sizeof(UGA_Athena_MedConsumable_Parent_C) == 0x000C10, "Wrong size on UGA_Athena_MedConsumable_Parent_C");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, UberGraphFrame) == 0x000AB8, "Member 'UGA_Athena_MedConsumable_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, PlayerPawn) == 0x000AC0, "Member 'UGA_Athena_MedConsumable_Parent_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealsHealth) == 0x000AC8, "Member 'UGA_Athena_MedConsumable_Parent_C::HealsHealth' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HasHealthCap) == 0x000AC9, "Member 'UGA_Athena_MedConsumable_Parent_C::HasHealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealthHealAmount) == 0x000ACC, "Member 'UGA_Athena_MedConsumable_Parent_C::HealthHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, TriggerDuration) == 0x000AD0, "Member 'UGA_Athena_MedConsumable_Parent_C::TriggerDuration' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ShouldHolster) == 0x000AD4, "Member 'UGA_Athena_MedConsumable_Parent_C::ShouldHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ItemIDToHolster) == 0x000AD8, "Member 'UGA_Athena_MedConsumable_Parent_C::ItemIDToHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GE_EffectToApply) == 0x000AE0, "Member 'UGA_Athena_MedConsumable_Parent_C::GE_EffectToApply' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealsShields) == 0x000AE8, "Member 'UGA_Athena_MedConsumable_Parent_C::HealsShields' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HasShieldCap) == 0x000AE9, "Member 'UGA_Athena_MedConsumable_Parent_C::HasShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ShieldHealAmount) == 0x000AEC, "Member 'UGA_Athena_MedConsumable_Parent_C::ShieldHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_ShieldCap) == 0x000AF0, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_ShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_ShieldAmount) == 0x000B18, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_ShieldAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GC_PotionConsumed) == 0x000B40, "Member 'UGA_Athena_MedConsumable_Parent_C::GC_PotionConsumed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_HealthCap) == 0x000B48, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_HealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_HealthAmount) == 0x000B70, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_HealthAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Tags_FailedResponse) == 0x000B98, "Member 'UGA_Athena_MedConsumable_Parent_C::Tags_FailedResponse' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, IgnoreCalcsForEffectApplication) == 0x000BB8, "Member 'UGA_Athena_MedConsumable_Parent_C::IgnoreCalcsForEffectApplication' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, AlwaysActivate) == 0x000BB9, "Member 'UGA_Athena_MedConsumable_Parent_C::AlwaysActivate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GC_EquippingCue) == 0x000BBC, "Member 'UGA_Athena_MedConsumable_Parent_C::GC_EquippingCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, OverHealing) == 0x000BC4, "Member 'UGA_Athena_MedConsumable_Parent_C::OverHealing' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealthIsEffective) == 0x000BC8, "Member 'UGA_Athena_MedConsumable_Parent_C::HealthIsEffective' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ForceFeedback) == 0x000BD0, "Member 'UGA_Athena_MedConsumable_Parent_C::ForceFeedback' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GC_HealthHealUsed) == 0x000BD8, "Member 'UGA_Athena_MedConsumable_Parent_C::GC_HealthHealUsed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GE_Channeling) == 0x000BE0, "Member 'UGA_Athena_MedConsumable_Parent_C::GE_Channeling' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GEH_Channeling) == 0x000BE8, "Member 'UGA_Athena_MedConsumable_Parent_C::GEH_Channeling' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, QuestTags) == 0x000BF0, "Member 'UGA_Athena_MedConsumable_Parent_C::QuestTags' has a wrong offset!");

}

