#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScoreUI

#include "Basic.hpp"

#include "ScoreRuntime_structs.hpp"


namespace SDK::Params
{

// Function ScoreUI.ScoreWidgetBase.OnTeamScoredPoints
// 0x0080 (0x0080 - 0x0000)
struct ScoreWidgetBase_OnTeamScoredPoints final
{
public:
	struct FScoreLTMTeamDataEntry                 TeamData;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreWidgetBase_OnTeamScoredPoints) == 0x000008, "Wrong alignment on ScoreWidgetBase_OnTeamScoredPoints");
static_assert(sizeof(ScoreWidgetBase_OnTeamScoredPoints) == 0x000080, "Wrong size on ScoreWidgetBase_OnTeamScoredPoints");
static_assert(offsetof(ScoreWidgetBase_OnTeamScoredPoints, TeamData) == 0x000000, "Member 'ScoreWidgetBase_OnTeamScoredPoints::TeamData' has a wrong offset!");

// Function ScoreUI.ScoreBonusWindowWidget.OnBonusWindowPreviewStarted_BP
// 0x0028 (0x0028 - 0x0000)
struct ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP final
{
public:
	EScoreLTMBonusWindowCategory                  BonusCategory;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BonusCategoryText;                                 // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ServerPreviewEndTime;                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP) == 0x000008, "Wrong alignment on ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP");
static_assert(sizeof(ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP) == 0x000028, "Wrong size on ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP");
static_assert(offsetof(ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP, BonusCategory) == 0x000000, "Member 'ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP::BonusCategory' has a wrong offset!");
static_assert(offsetof(ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP, BonusCategoryText) == 0x000008, "Member 'ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP::BonusCategoryText' has a wrong offset!");
static_assert(offsetof(ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP, ServerPreviewEndTime) == 0x000020, "Member 'ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP::ServerPreviewEndTime' has a wrong offset!");

// Function ScoreUI.ScoreBonusWindowWidget.OnBonusWindowStarted_BP
// 0x0028 (0x0028 - 0x0000)
struct ScoreBonusWindowWidget_OnBonusWindowStarted_BP final
{
public:
	EScoreLTMBonusWindowCategory                  BonusCategory;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BonusCategoryText;                                 // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerEndTime;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreBonusWindowWidget_OnBonusWindowStarted_BP) == 0x000008, "Wrong alignment on ScoreBonusWindowWidget_OnBonusWindowStarted_BP");
static_assert(sizeof(ScoreBonusWindowWidget_OnBonusWindowStarted_BP) == 0x000028, "Wrong size on ScoreBonusWindowWidget_OnBonusWindowStarted_BP");
static_assert(offsetof(ScoreBonusWindowWidget_OnBonusWindowStarted_BP, BonusCategory) == 0x000000, "Member 'ScoreBonusWindowWidget_OnBonusWindowStarted_BP::BonusCategory' has a wrong offset!");
static_assert(offsetof(ScoreBonusWindowWidget_OnBonusWindowStarted_BP, BonusCategoryText) == 0x000008, "Member 'ScoreBonusWindowWidget_OnBonusWindowStarted_BP::BonusCategoryText' has a wrong offset!");
static_assert(offsetof(ScoreBonusWindowWidget_OnBonusWindowStarted_BP, Multiplier) == 0x000020, "Member 'ScoreBonusWindowWidget_OnBonusWindowStarted_BP::Multiplier' has a wrong offset!");
static_assert(offsetof(ScoreBonusWindowWidget_OnBonusWindowStarted_BP, ServerEndTime) == 0x000024, "Member 'ScoreBonusWindowWidget_OnBonusWindowStarted_BP::ServerEndTime' has a wrong offset!");

// Function ScoreUI.ScoreTeammateStatusNotificationWidget.OnTeammateScoredPoints_BP
// 0x0028 (0x0028 - 0x0000)
struct ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP final
{
public:
	int32                                         PointsScored;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ScoreTypeText;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasBonus;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP) == 0x000008, "Wrong alignment on ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP");
static_assert(sizeof(ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP) == 0x000028, "Wrong size on ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP");
static_assert(offsetof(ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP, PointsScored) == 0x000000, "Member 'ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP::PointsScored' has a wrong offset!");
static_assert(offsetof(ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP, ScoreTypeText) == 0x000008, "Member 'ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP::ScoreTypeText' has a wrong offset!");
static_assert(offsetof(ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP, bWasBonus) == 0x000020, "Member 'ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP::bWasBonus' has a wrong offset!");

// Function ScoreUI.ScoreTeamNotificationWidget.OnOwningTeamScoredPoints_BP
// 0x0028 (0x0028 - 0x0000)
struct ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP final
{
public:
	bool                                          bWasOwningPlayer;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointsScored;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ScoreTypeText;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BigScoreThreshold;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasBonus;                                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP) == 0x000008, "Wrong alignment on ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP");
static_assert(sizeof(ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP) == 0x000028, "Wrong size on ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP");
static_assert(offsetof(ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP, bWasOwningPlayer) == 0x000000, "Member 'ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP::bWasOwningPlayer' has a wrong offset!");
static_assert(offsetof(ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP, PointsScored) == 0x000004, "Member 'ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP::PointsScored' has a wrong offset!");
static_assert(offsetof(ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP, ScoreTypeText) == 0x000008, "Member 'ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP::ScoreTypeText' has a wrong offset!");
static_assert(offsetof(ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP, BigScoreThreshold) == 0x000020, "Member 'ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP::BigScoreThreshold' has a wrong offset!");
static_assert(offsetof(ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP, bWasBonus) == 0x000024, "Member 'ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP::bWasBonus' has a wrong offset!");

}

