#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Reflex

#include "Basic.hpp"

#include "Reflex_classes.hpp"
#include "Reflex_parameters.hpp"


namespace SDK
{

// Function Reflex.ReflexBlueprintLibrary.GetFlashIndicatorEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UReflexBlueprintLibrary::GetFlashIndicatorEnabled()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetFlashIndicatorEnabled");

	Params::ReflexBlueprintLibrary_GetFlashIndicatorEnabled Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Reflex.ReflexBlueprintLibrary.GetGameLatencyInMs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UReflexBlueprintLibrary::GetGameLatencyInMs()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetGameLatencyInMs");

	Params::ReflexBlueprintLibrary_GetGameLatencyInMs Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Reflex.ReflexBlueprintLibrary.GetGameToRenderLatencyInMs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UReflexBlueprintLibrary::GetGameToRenderLatencyInMs()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetGameToRenderLatencyInMs");

	Params::ReflexBlueprintLibrary_GetGameToRenderLatencyInMs Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Reflex.ReflexBlueprintLibrary.GetReflexAvailable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UReflexBlueprintLibrary::GetReflexAvailable()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetReflexAvailable");

	Params::ReflexBlueprintLibrary_GetReflexAvailable Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Reflex.ReflexBlueprintLibrary.GetReflexMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EReflexMode                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EReflexMode UReflexBlueprintLibrary::GetReflexMode()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetReflexMode");

	Params::ReflexBlueprintLibrary_GetReflexMode Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Reflex.ReflexBlueprintLibrary.GetRenderLatencyInMs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UReflexBlueprintLibrary::GetRenderLatencyInMs()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetRenderLatencyInMs");

	Params::ReflexBlueprintLibrary_GetRenderLatencyInMs Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Reflex.ReflexBlueprintLibrary.SetFlashIndicatorEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReflexBlueprintLibrary::SetFlashIndicatorEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetFlashIndicatorEnabled");

	Params::ReflexBlueprintLibrary_SetFlashIndicatorEnabled Parms{};

	Parms.bEnabled = bEnabled;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function Reflex.ReflexBlueprintLibrary.SetReflexMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EReflexMode                             Mode                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReflexBlueprintLibrary::SetReflexMode(const EReflexMode Mode)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetReflexMode");

	Params::ReflexBlueprintLibrary_SetReflexMode Parms{};

	Parms.Mode = Mode;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}

}

