#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Transform

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Transform.Transform.Create
// 0x0020 (0x0020 - 0x0000)
struct Transform_Create final
{
public:
	class UVector3*                               __verse_0x7AF6BB5D_position;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x7314EE20_eulerRotation;                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0xA8267C47_scale;                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTransform*                             RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_Create) == 0x000008, "Wrong alignment on Transform_Create");
static_assert(sizeof(Transform_Create) == 0x000020, "Wrong size on Transform_Create");
static_assert(offsetof(Transform_Create, __verse_0x7AF6BB5D_position) == 0x000000, "Member 'Transform_Create::__verse_0x7AF6BB5D_position' has a wrong offset!");
static_assert(offsetof(Transform_Create, __verse_0x7314EE20_eulerRotation) == 0x000008, "Member 'Transform_Create::__verse_0x7314EE20_eulerRotation' has a wrong offset!");
static_assert(offsetof(Transform_Create, __verse_0xA8267C47_scale) == 0x000010, "Member 'Transform_Create::__verse_0xA8267C47_scale' has a wrong offset!");
static_assert(offsetof(Transform_Create, RetVal) == 0x000018, "Member 'Transform_Create::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.createZero
// 0x0008 (0x0008 - 0x0000)
struct Transform_createZero final
{
public:
	class UTransform*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_createZero) == 0x000008, "Wrong alignment on Transform_createZero");
static_assert(sizeof(Transform_createZero) == 0x000008, "Wrong size on Transform_createZero");
static_assert(offsetof(Transform_createZero, RetVal) == 0x000000, "Member 'Transform_createZero::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetPositionX
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetPositionX final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetPositionX) == 0x000004, "Wrong alignment on Transform_GetPositionX");
static_assert(sizeof(Transform_GetPositionX) == 0x000004, "Wrong size on Transform_GetPositionX");
static_assert(offsetof(Transform_GetPositionX, RetVal) == 0x000000, "Member 'Transform_GetPositionX::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetPositionY
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetPositionY final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetPositionY) == 0x000004, "Wrong alignment on Transform_GetPositionY");
static_assert(sizeof(Transform_GetPositionY) == 0x000004, "Wrong size on Transform_GetPositionY");
static_assert(offsetof(Transform_GetPositionY, RetVal) == 0x000000, "Member 'Transform_GetPositionY::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetPositionZ
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetPositionZ final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetPositionZ) == 0x000004, "Wrong alignment on Transform_GetPositionZ");
static_assert(sizeof(Transform_GetPositionZ) == 0x000004, "Wrong size on Transform_GetPositionZ");
static_assert(offsetof(Transform_GetPositionZ, RetVal) == 0x000000, "Member 'Transform_GetPositionZ::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetRotationPitch
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetRotationPitch final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetRotationPitch) == 0x000004, "Wrong alignment on Transform_GetRotationPitch");
static_assert(sizeof(Transform_GetRotationPitch) == 0x000004, "Wrong size on Transform_GetRotationPitch");
static_assert(offsetof(Transform_GetRotationPitch, RetVal) == 0x000000, "Member 'Transform_GetRotationPitch::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetRotationRoll
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetRotationRoll final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetRotationRoll) == 0x000004, "Wrong alignment on Transform_GetRotationRoll");
static_assert(sizeof(Transform_GetRotationRoll) == 0x000004, "Wrong size on Transform_GetRotationRoll");
static_assert(offsetof(Transform_GetRotationRoll, RetVal) == 0x000000, "Member 'Transform_GetRotationRoll::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetRotationYaw final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetRotationYaw) == 0x000004, "Wrong alignment on Transform_GetRotationYaw");
static_assert(sizeof(Transform_GetRotationYaw) == 0x000004, "Wrong size on Transform_GetRotationYaw");
static_assert(offsetof(Transform_GetRotationYaw, RetVal) == 0x000000, "Member 'Transform_GetRotationYaw::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetScaleX
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetScaleX final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetScaleX) == 0x000004, "Wrong alignment on Transform_GetScaleX");
static_assert(sizeof(Transform_GetScaleX) == 0x000004, "Wrong size on Transform_GetScaleX");
static_assert(offsetof(Transform_GetScaleX, RetVal) == 0x000000, "Member 'Transform_GetScaleX::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetScaleY
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetScaleY final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetScaleY) == 0x000004, "Wrong alignment on Transform_GetScaleY");
static_assert(sizeof(Transform_GetScaleY) == 0x000004, "Wrong size on Transform_GetScaleY");
static_assert(offsetof(Transform_GetScaleY, RetVal) == 0x000000, "Member 'Transform_GetScaleY::RetVal' has a wrong offset!");

// Function Math_Transform.Transform.GetScaleZ
// 0x0004 (0x0004 - 0x0000)
struct Transform_GetScaleZ final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Transform_GetScaleZ) == 0x000004, "Wrong alignment on Transform_GetScaleZ");
static_assert(sizeof(Transform_GetScaleZ) == 0x000004, "Wrong size on Transform_GetScaleZ");
static_assert(offsetof(Transform_GetScaleZ, RetVal) == 0x000000, "Member 'Transform_GetScaleZ::RetVal' has a wrong offset!");

}

