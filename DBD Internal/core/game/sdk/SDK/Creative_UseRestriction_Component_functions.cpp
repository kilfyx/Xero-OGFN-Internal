#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Creative_UseRestriction_Component

#include "Basic.hpp"

#include "Creative_UseRestriction_Component_classes.hpp"
#include "Creative_UseRestriction_Component_parameters.hpp"


namespace SDK
{

// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Actor has Valid Controller
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Include_Restriction_Check                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Additional_Checks                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid_Controller                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortPlayerPawn**                 FortPlayerPawn                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController**               PlayerController                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Actor_has_Valid_Controller(class AActor* Actor, bool Include_Restriction_Check, bool Additional_Checks, bool* Valid_Controller, class AFortPlayerPawn** FortPlayerPawn, class APlayerController** PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Actor has Valid Controller");

	Params::Creative_UseRestriction_Component_C_Actor_has_Valid_Controller Parms{};

	Parms.Actor = Actor;
	Parms.Include_Restriction_Check = Include_Restriction_Check;
	Parms.Additional_Checks = Additional_Checks;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid_Controller != nullptr)
		*Valid_Controller = Parms.Valid_Controller;

	if (FortPlayerPawn != nullptr)
		*FortPlayerPawn = Parms.FortPlayerPawn;

	if (PlayerController != nullptr)
		*PlayerController = Parms.PlayerController;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Add Valid Classes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          Class_List                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UCreative_UseRestriction_Component_C::Add_Valid_Classes(TArray<int32>& Class_List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Add Valid Classes");

	Params::Creative_UseRestriction_Component_C_Add_Valid_Classes Parms{};

	Parms.Class_List = std::move(Class_List);

	UObject::ProcessEvent(Func, &Parms);

	Class_List = std::move(Parms.Class_List);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Controller Link
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AFortPlayerPawn*&           Pawn                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class AFortPlayerController*&     Controller                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Controller_Link(const class AFortPlayerPawn*& Pawn, const class AFortPlayerController*& Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Controller Link");

	Params::Creative_UseRestriction_Component_C_Controller_Link Parms{};

	Parms.Pawn = Pawn;
	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Can Actor Interact
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Additional_Checks                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OR_can_Customize_Device                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Can_Actor_Interact(class AActor* Actor, bool Additional_Checks, bool OR_can_Customize_Device, bool* TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Can Actor Interact");

	Params::Creative_UseRestriction_Component_C_Can_Actor_Interact Parms{};

	Parms.Actor = Actor;
	Parms.Additional_Checks = Additional_Checks;
	Parms.OR_can_Customize_Device = OR_can_Customize_Device;

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Can Edit Options
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Can_Edit_Options(class APlayerController* PC, bool* TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Can Edit Options");

	Params::Creative_UseRestriction_Component_C_Can_Edit_Options Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Can Player Controller Interact
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Additional_Checks                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OR_can_Customize_Device                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Can_Player_Controller_Interact(class APlayerController* PC, bool Additional_Checks, bool OR_can_Customize_Device, bool* TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Can Player Controller Interact");

	Params::Creative_UseRestriction_Component_C_Can_Player_Controller_Interact Parms{};

	Parms.PC = PC;
	Parms.Additional_Checks = Additional_Checks;
	Parms.OR_can_Customize_Device = OR_can_Customize_Device;

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Empty Player Pawn Possessed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Empty_Player_Pawn_Possessed(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Empty Player Pawn Possessed");

	Params::Creative_UseRestriction_Component_C_Empty_Player_Pawn_Possessed Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Get Failure Reasons
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FText&                      Device_Failure_Reason                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Append_Device_Reason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Reasons                                                (Parm, OutParm)

void UCreative_UseRestriction_Component_C::Get_Failure_Reasons(class APawn* Pawn, const class FText& Device_Failure_Reason, bool Append_Device_Reason, class FText* Reasons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Get Failure Reasons");

	Params::Creative_UseRestriction_Component_C_Get_Failure_Reasons Parms{};

	Parms.Pawn = Pawn;
	Parms.Device_Failure_Reason = std::move(Device_Failure_Reason);
	Parms.Append_Device_Reason = Append_Device_Reason;

	UObject::ProcessEvent(Func, &Parms);

	if (Reasons != nullptr)
		*Reasons = std::move(Parms.Reasons);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Get Last Player Controller
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortPlayerController**           FortPC                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Get_Last_Player_Controller(class AActor* Actor, class AFortPlayerController** FortPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Get Last Player Controller");

	Params::Creative_UseRestriction_Component_C_Get_Last_Player_Controller Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (FortPC != nullptr)
		*FortPC = Parms.FortPC;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Initialize Component
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortMinigameLogicComponent*      MinigameLogic_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCreative_Enabled_Component_C*    EnabledComponent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UToyOptionsComponent_C*           ToyOptionsComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Required_Single_Team                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Required_Class                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortItemDefinition*              Required_Item_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Required_Item_Quantity_0                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Initialize_Component(class UFortMinigameLogicComponent* MinigameLogic_0, class UCreative_Enabled_Component_C* EnabledComponent_0, class UToyOptionsComponent_C* ToyOptionsComponent, int32 Required_Single_Team, int32 Required_Class, class UFortItemDefinition* Required_Item_0, int32 Required_Item_Quantity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Initialize Component");

	Params::Creative_UseRestriction_Component_C_Initialize_Component Parms{};

	Parms.MinigameLogic_0 = MinigameLogic_0;
	Parms.EnabledComponent_0 = EnabledComponent_0;
	Parms.ToyOptionsComponent = ToyOptionsComponent;
	Parms.Required_Single_Team = Required_Single_Team;
	Parms.Required_Class = Required_Class;
	Parms.Required_Item_0 = Required_Item_0;
	Parms.Required_Item_Quantity_0 = Required_Item_Quantity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Initialize Component with Affects
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortMinigameLogicComponent*      MinigameLogic_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCreative_Enabled_Component_C*    EnabledComponent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UToyOptionsComponent_C*           ToyOptionsComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Required_Single_Team                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Required_Class                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortItemDefinition*              Required_Item_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Required_Item_Quantity_0                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TeamAffectsAllButSelected                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ClassAffectsAllButSelected                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsesSafeClassIndexing                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Initialize_Component_with_Affects(class UFortMinigameLogicComponent* MinigameLogic_0, class UCreative_Enabled_Component_C* EnabledComponent_0, class UToyOptionsComponent_C* ToyOptionsComponent, int32 Required_Single_Team, int32 Required_Class, class UFortItemDefinition* Required_Item_0, int32 Required_Item_Quantity_0, bool TeamAffectsAllButSelected, bool ClassAffectsAllButSelected, bool UsesSafeClassIndexing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Initialize Component with Affects");

	Params::Creative_UseRestriction_Component_C_Initialize_Component_with_Affects Parms{};

	Parms.MinigameLogic_0 = MinigameLogic_0;
	Parms.EnabledComponent_0 = EnabledComponent_0;
	Parms.ToyOptionsComponent = ToyOptionsComponent;
	Parms.Required_Single_Team = Required_Single_Team;
	Parms.Required_Class = Required_Class;
	Parms.Required_Item_0 = Required_Item_0;
	Parms.Required_Item_Quantity_0 = Required_Item_Quantity_0;
	Parms.TeamAffectsAllButSelected = TeamAffectsAllButSelected;
	Parms.ClassAffectsAllButSelected = ClassAffectsAllButSelected;
	Parms.UsesSafeClassIndexing = UsesSafeClassIndexing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.IsEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::IsEnabled(bool* TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "IsEnabled");

	Params::Creative_UseRestriction_Component_C_IsEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.IsHoldingItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Item_Name                                              (Parm, OutParm)

void UCreative_UseRestriction_Component_C::IsHoldingItem(class AActor* Actor, bool* TRUE_0, class FText* Item_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "IsHoldingItem");

	Params::Creative_UseRestriction_Component_C_IsHoldingItem Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;

	if (Item_Name != nullptr)
		*Item_Name = std::move(Parms.Item_Name);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.IsValidClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::IsValidClass(class AActor* Actor, bool* TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "IsValidClass");

	Params::Creative_UseRestriction_Component_C_IsValidClass Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.IsValidPlayState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::IsValidPlayState(bool* TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "IsValidPlayState");

	Params::Creative_UseRestriction_Component_C_IsValidPlayState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.IsValidTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class AActor*                     Actor_to_Check                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::IsValidTeam(const class AActor* Actor_to_Check, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "IsValidTeam");

	Params::Creative_UseRestriction_Component_C_IsValidTeam Parms{};

	Parms.Actor_to_Check = Actor_to_Check;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.On Pawn Destroyed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::On_Pawn_Destroyed(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "On Pawn Destroyed");

	Params::Creative_UseRestriction_Component_C_On_Pawn_Destroyed Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Print State Checks
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Print_State_Checks(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Print State Checks");

	Params::Creative_UseRestriction_Component_C_Print_State_Checks Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Remove Classes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          Classes                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UCreative_UseRestriction_Component_C::Remove_Classes(TArray<int32>& Classes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Remove Classes");

	Params::Creative_UseRestriction_Component_C_Remove_Classes Parms{};

	Parms.Classes = std::move(Classes);

	UObject::ProcessEvent(Func, &Parms);

	Classes = std::move(Parms.Classes);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Remove Pawn from Cache
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AFortPlayerPawn*&           Pawn                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Remove_Pawn_from_Cache(const class AFortPlayerPawn*& Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Remove Pawn from Cache");

	Params::Creative_UseRestriction_Component_C_Remove_Pawn_from_Cache Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Set Class with Affects
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Class_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AffectsAllButSelected                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsesSafeTeamIndexing                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Set_Class_with_Affects(int32 Class_Index, bool AffectsAllButSelected, bool UsesSafeTeamIndexing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Set Class with Affects");

	Params::Creative_UseRestriction_Component_C_Set_Class_with_Affects Parms{};

	Parms.Class_Index = Class_Index;
	Parms.AffectsAllButSelected = AffectsAllButSelected;
	Parms.UsesSafeTeamIndexing = UsesSafeTeamIndexing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Set Initial Single Class
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Class_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Set_Initial_Single_Class(int32 Class_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Set Initial Single Class");

	Params::Creative_UseRestriction_Component_C_Set_Initial_Single_Class Parms{};

	Parms.Class_Index = Class_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Set Initial Single Team
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team_Index                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Set_Initial_Single_Team(int32 Team_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Set Initial Single Team");

	Params::Creative_UseRestriction_Component_C_Set_Initial_Single_Team Parms{};

	Parms.Team_Index = Team_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.SetClassWithAffectsSafeTeamIndex
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Class_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AffectsAllButSelected                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::SetClassWithAffectsSafeTeamIndex(int32 Class_Index, bool AffectsAllButSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "SetClassWithAffectsSafeTeamIndex");

	Params::Creative_UseRestriction_Component_C_SetClassWithAffectsSafeTeamIndex Parms{};

	Parms.Class_Index = Class_Index;
	Parms.AffectsAllButSelected = AffectsAllButSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.SetTeamsWithAffects
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team_Index                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AffectsAllButSelected                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::SetTeamsWithAffects(int32 Team_Index, bool AffectsAllButSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "SetTeamsWithAffects");

	Params::Creative_UseRestriction_Component_C_SetTeamsWithAffects Parms{};

	Parms.Team_Index = Team_Index;
	Parms.AffectsAllButSelected = AffectsAllButSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.State Checks
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class AActor*                     Actor_to_Check                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AND                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UCreative_UseRestriction_Component_C::State_Checks(const class AActor* Actor_to_Check, bool AND)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "State Checks");

	Params::Creative_UseRestriction_Component_C_State_Checks Parms{};

	Parms.Actor_to_Check = Actor_to_Check;
	Parms.AND = AND;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.UnbindEventPawnPossesed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PlayerPawnToUnbind                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::UnbindEventPawnPossesed(class AActor* PlayerPawnToUnbind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "UnbindEventPawnPossesed");

	Params::Creative_UseRestriction_Component_C_UnbindEventPawnPossesed Parms{};

	Parms.PlayerPawnToUnbind = PlayerPawnToUnbind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.GetNumberOfTeams
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UCreative_UseRestriction_Component_C::GetNumberOfTeams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "GetNumberOfTeams");

	Params::Creative_UseRestriction_Component_C_GetNumberOfTeams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Test Matching Class
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Class_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Test_Matching_Class(int32 Class_Index, bool* TRUE_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Test Matching Class");

	Params::Creative_UseRestriction_Component_C_Test_Matching_Class Parms{};

	Parms.Class_Index = Class_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}


// Function Creative_UseRestriction_Component.Creative_UseRestriction_Component_C.Test Matching Team
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   TeamValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TRUE_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreative_UseRestriction_Component_C::Test_Matching_Team(int32 TeamValue, bool* TRUE_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_UseRestriction_Component_C", "Test Matching Team");

	Params::Creative_UseRestriction_Component_C_Test_Matching_Team Parms{};

	Parms.TeamValue = TeamValue;

	UObject::ProcessEvent(Func, &Parms);

	if (TRUE_0 != nullptr)
		*TRUE_0 = Parms.TRUE_0;
}

}

