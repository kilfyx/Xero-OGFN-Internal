#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GooseRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GooseRuntime.AthenaGoosePickup.OnCollide
// 0x0008 (0x0008 - 0x0000)
struct AthenaGoosePickup_OnCollide final
{
public:
	class AActor*                                 CollidingActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGoosePickup_OnCollide) == 0x000008, "Wrong alignment on AthenaGoosePickup_OnCollide");
static_assert(sizeof(AthenaGoosePickup_OnCollide) == 0x000008, "Wrong size on AthenaGoosePickup_OnCollide");
static_assert(offsetof(AthenaGoosePickup_OnCollide, CollidingActor) == 0x000000, "Member 'AthenaGoosePickup_OnCollide::CollidingActor' has a wrong offset!");

// Function GooseRuntime.AthenaGoosePickup.SetStaticMesh
// 0x0020 (0x0020 - 0x0000)
struct AthenaGoosePickup_SetStaticMesh final
{
public:
	class UStaticMesh*                            NewStaticMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialsToSwap;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDisplayIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaGoosePickup_SetStaticMesh) == 0x000008, "Wrong alignment on AthenaGoosePickup_SetStaticMesh");
static_assert(sizeof(AthenaGoosePickup_SetStaticMesh) == 0x000020, "Wrong size on AthenaGoosePickup_SetStaticMesh");
static_assert(offsetof(AthenaGoosePickup_SetStaticMesh, NewStaticMesh) == 0x000000, "Member 'AthenaGoosePickup_SetStaticMesh::NewStaticMesh' has a wrong offset!");
static_assert(offsetof(AthenaGoosePickup_SetStaticMesh, MaterialsToSwap) == 0x000008, "Member 'AthenaGoosePickup_SetStaticMesh::MaterialsToSwap' has a wrong offset!");
static_assert(offsetof(AthenaGoosePickup_SetStaticMesh, InDisplayIndex) == 0x000018, "Member 'AthenaGoosePickup_SetStaticMesh::InDisplayIndex' has a wrong offset!");

// Function GooseRuntime.FortAthenaMutator_Goose.HandleClientPawnEnteredVehicle
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle final
{
public:
	TScriptInterface<class IFortVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle) == 0x000008, "Wrong alignment on FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle");
static_assert(sizeof(FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle) == 0x000020, "Wrong size on FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle");
static_assert(offsetof(FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle, Vehicle) == 0x000000, "Member 'FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle, Pawn) == 0x000010, "Member 'FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle::Pawn' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle, SeatIndex) == 0x000018, "Member 'FortAthenaMutator_Goose_HandleClientPawnEnteredVehicle::SeatIndex' has a wrong offset!");

// Function GooseRuntime.FortAthenaMutator_Goose.HandleClientPawnExitedVehicle
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaMutator_Goose_HandleClientPawnExitedVehicle final
{
public:
	TScriptInterface<class IFortVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Goose_HandleClientPawnExitedVehicle) == 0x000008, "Wrong alignment on FortAthenaMutator_Goose_HandleClientPawnExitedVehicle");
static_assert(sizeof(FortAthenaMutator_Goose_HandleClientPawnExitedVehicle) == 0x000020, "Wrong size on FortAthenaMutator_Goose_HandleClientPawnExitedVehicle");
static_assert(offsetof(FortAthenaMutator_Goose_HandleClientPawnExitedVehicle, Vehicle) == 0x000000, "Member 'FortAthenaMutator_Goose_HandleClientPawnExitedVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_HandleClientPawnExitedVehicle, Pawn) == 0x000010, "Member 'FortAthenaMutator_Goose_HandleClientPawnExitedVehicle::Pawn' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_HandleClientPawnExitedVehicle, SeatIndex) == 0x000018, "Member 'FortAthenaMutator_Goose_HandleClientPawnExitedVehicle::SeatIndex' has a wrong offset!");

// Function GooseRuntime.FortAthenaMutator_Goose.HandleClientVehicleDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMutator_Goose_HandleClientVehicleDestroyed final
{
public:
	class AActor*                                 VehicleActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Goose_HandleClientVehicleDestroyed) == 0x000008, "Wrong alignment on FortAthenaMutator_Goose_HandleClientVehicleDestroyed");
static_assert(sizeof(FortAthenaMutator_Goose_HandleClientVehicleDestroyed) == 0x000008, "Wrong size on FortAthenaMutator_Goose_HandleClientVehicleDestroyed");
static_assert(offsetof(FortAthenaMutator_Goose_HandleClientVehicleDestroyed, VehicleActor) == 0x000000, "Member 'FortAthenaMutator_Goose_HandleClientVehicleDestroyed::VehicleActor' has a wrong offset!");

// Function GooseRuntime.FortAthenaMutator_Goose.KillPlayerPawns
// 0x0040 (0x0040 - 0x0000)
struct FortAthenaMutator_Goose_KillPlayerPawns final
{
public:
	TArray<TWeakObjectPtr<class AFortPlayerPawn>> PawnsToKill;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DeathReasonTags;                                   // 0x0010(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Goose_KillPlayerPawns) == 0x000008, "Wrong alignment on FortAthenaMutator_Goose_KillPlayerPawns");
static_assert(sizeof(FortAthenaMutator_Goose_KillPlayerPawns) == 0x000040, "Wrong size on FortAthenaMutator_Goose_KillPlayerPawns");
static_assert(offsetof(FortAthenaMutator_Goose_KillPlayerPawns, PawnsToKill) == 0x000000, "Member 'FortAthenaMutator_Goose_KillPlayerPawns::PawnsToKill' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_KillPlayerPawns, DeathReasonTags) == 0x000010, "Member 'FortAthenaMutator_Goose_KillPlayerPawns::DeathReasonTags' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_KillPlayerPawns, EventInstigator) == 0x000030, "Member 'FortAthenaMutator_Goose_KillPlayerPawns::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_KillPlayerPawns, DamageCauser) == 0x000038, "Member 'FortAthenaMutator_Goose_KillPlayerPawns::DamageCauser' has a wrong offset!");

// Function GooseRuntime.FortAthenaMutator_Goose.OnPawnDied
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMutator_Goose_OnPawnDied final
{
public:
	class AFortPlayerPawnAthena*                  PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Goose_OnPawnDied) == 0x000008, "Wrong alignment on FortAthenaMutator_Goose_OnPawnDied");
static_assert(sizeof(FortAthenaMutator_Goose_OnPawnDied) == 0x000008, "Wrong size on FortAthenaMutator_Goose_OnPawnDied");
static_assert(offsetof(FortAthenaMutator_Goose_OnPawnDied, PlayerPawn) == 0x000000, "Member 'FortAthenaMutator_Goose_OnPawnDied::PlayerPawn' has a wrong offset!");

// Function GooseRuntime.FortAthenaMutator_Goose.OnVehicleDied
// 0x0038 (0x0038 - 0x0000)
struct FortAthenaMutator_Goose_OnVehicleDied final
{
public:
	class AFortAthenaVehicle*                     DestroyedVehicle;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InTags;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Goose_OnVehicleDied) == 0x000008, "Wrong alignment on FortAthenaMutator_Goose_OnVehicleDied");
static_assert(sizeof(FortAthenaMutator_Goose_OnVehicleDied) == 0x000038, "Wrong size on FortAthenaMutator_Goose_OnVehicleDied");
static_assert(offsetof(FortAthenaMutator_Goose_OnVehicleDied, DestroyedVehicle) == 0x000000, "Member 'FortAthenaMutator_Goose_OnVehicleDied::DestroyedVehicle' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_OnVehicleDied, InTags) == 0x000008, "Member 'FortAthenaMutator_Goose_OnVehicleDied::InTags' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_OnVehicleDied, EventInstigator) == 0x000028, "Member 'FortAthenaMutator_Goose_OnVehicleDied::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_OnVehicleDied, DamageCauser) == 0x000030, "Member 'FortAthenaMutator_Goose_OnVehicleDied::DamageCauser' has a wrong offset!");

// Function GooseRuntime.FortAthenaMutator_Goose.OnVehicleStolen
// 0x0002 (0x0002 - 0x0000)
struct FortAthenaMutator_Goose_OnVehicleStolen final
{
public:
	uint8                                         OldID;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewID;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Goose_OnVehicleStolen) == 0x000001, "Wrong alignment on FortAthenaMutator_Goose_OnVehicleStolen");
static_assert(sizeof(FortAthenaMutator_Goose_OnVehicleStolen) == 0x000002, "Wrong size on FortAthenaMutator_Goose_OnVehicleStolen");
static_assert(offsetof(FortAthenaMutator_Goose_OnVehicleStolen, OldID) == 0x000000, "Member 'FortAthenaMutator_Goose_OnVehicleStolen::OldID' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Goose_OnVehicleStolen, NewID) == 0x000001, "Member 'FortAthenaMutator_Goose_OnVehicleStolen::NewID' has a wrong offset!");

// Function GooseRuntime.FortCheatManager_Goose.GooseGivePlaneBoostGE
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Goose_GooseGivePlaneBoostGE final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Goose_GooseGivePlaneBoostGE) == 0x000004, "Wrong alignment on FortCheatManager_Goose_GooseGivePlaneBoostGE");
static_assert(sizeof(FortCheatManager_Goose_GooseGivePlaneBoostGE) == 0x000004, "Wrong size on FortCheatManager_Goose_GooseGivePlaneBoostGE");
static_assert(offsetof(FortCheatManager_Goose_GooseGivePlaneBoostGE, Index_0) == 0x000000, "Member 'FortCheatManager_Goose_GooseGivePlaneBoostGE::Index_0' has a wrong offset!");

// Function GooseRuntime.FortCheatManager_Goose.GooseGivePlaneEffect
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Goose_GooseGivePlaneEffect final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Goose_GooseGivePlaneEffect) == 0x000004, "Wrong alignment on FortCheatManager_Goose_GooseGivePlaneEffect");
static_assert(sizeof(FortCheatManager_Goose_GooseGivePlaneEffect) == 0x000004, "Wrong size on FortCheatManager_Goose_GooseGivePlaneEffect");
static_assert(offsetof(FortCheatManager_Goose_GooseGivePlaneEffect, Index_0) == 0x000000, "Member 'FortCheatManager_Goose_GooseGivePlaneEffect::Index_0' has a wrong offset!");

// Function GooseRuntime.FortCheatManager_Goose.GooseGivePlaneHealthGE
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Goose_GooseGivePlaneHealthGE final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Goose_GooseGivePlaneHealthGE) == 0x000004, "Wrong alignment on FortCheatManager_Goose_GooseGivePlaneHealthGE");
static_assert(sizeof(FortCheatManager_Goose_GooseGivePlaneHealthGE) == 0x000004, "Wrong size on FortCheatManager_Goose_GooseGivePlaneHealthGE");
static_assert(offsetof(FortCheatManager_Goose_GooseGivePlaneHealthGE, Index_0) == 0x000000, "Member 'FortCheatManager_Goose_GooseGivePlaneHealthGE::Index_0' has a wrong offset!");

// Function GooseRuntime.FortCheatManager_Goose.GooseSetPlaneHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Goose_GooseSetPlaneHealthPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Goose_GooseSetPlaneHealthPercent) == 0x000004, "Wrong alignment on FortCheatManager_Goose_GooseSetPlaneHealthPercent");
static_assert(sizeof(FortCheatManager_Goose_GooseSetPlaneHealthPercent) == 0x000004, "Wrong size on FortCheatManager_Goose_GooseSetPlaneHealthPercent");
static_assert(offsetof(FortCheatManager_Goose_GooseSetPlaneHealthPercent, Percent) == 0x000000, "Member 'FortCheatManager_Goose_GooseSetPlaneHealthPercent::Percent' has a wrong offset!");

// Function GooseRuntime.FortCheatManager_Goose.GooseSetPlaneLives
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Goose_GooseSetPlaneLives final
{
public:
	int32                                         NewLives;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Goose_GooseSetPlaneLives) == 0x000004, "Wrong alignment on FortCheatManager_Goose_GooseSetPlaneLives");
static_assert(sizeof(FortCheatManager_Goose_GooseSetPlaneLives) == 0x000004, "Wrong size on FortCheatManager_Goose_GooseSetPlaneLives");
static_assert(offsetof(FortCheatManager_Goose_GooseSetPlaneLives, NewLives) == 0x000000, "Member 'FortCheatManager_Goose_GooseSetPlaneLives::NewLives' has a wrong offset!");

// Function GooseRuntime.FortCheatManager_Goose.GooseToggleDrops
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_Goose_GooseToggleDrops final
{
public:
	bool                                          bToggleValue;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Goose_GooseToggleDrops) == 0x000001, "Wrong alignment on FortCheatManager_Goose_GooseToggleDrops");
static_assert(sizeof(FortCheatManager_Goose_GooseToggleDrops) == 0x000001, "Wrong size on FortCheatManager_Goose_GooseToggleDrops");
static_assert(offsetof(FortCheatManager_Goose_GooseToggleDrops, bToggleValue) == 0x000000, "Member 'FortCheatManager_Goose_GooseToggleDrops::bToggleValue' has a wrong offset!");

// Function GooseRuntime.FortCheatManager_Goose.GooseUpgradePlaneGuns
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Goose_GooseUpgradePlaneGuns final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Goose_GooseUpgradePlaneGuns) == 0x000004, "Wrong alignment on FortCheatManager_Goose_GooseUpgradePlaneGuns");
static_assert(sizeof(FortCheatManager_Goose_GooseUpgradePlaneGuns) == 0x000004, "Wrong size on FortCheatManager_Goose_GooseUpgradePlaneGuns");
static_assert(offsetof(FortCheatManager_Goose_GooseUpgradePlaneGuns, Index_0) == 0x000000, "Member 'FortCheatManager_Goose_GooseUpgradePlaneGuns::Index_0' has a wrong offset!");

}

