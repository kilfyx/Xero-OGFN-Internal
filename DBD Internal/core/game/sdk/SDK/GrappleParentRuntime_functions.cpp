#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrappleParentRuntime

#include "Basic.hpp"

#include "GrappleParentRuntime_classes.hpp"
#include "GrappleParentRuntime_parameters.hpp"


namespace SDK
{

// Function GrappleParentRuntime.FortCameraModifier_Swinging.RemoveSelfFromCameraManager
// (Final, Native, Protected)

void UFortCameraModifier_Swinging::RemoveSelfFromCameraManager()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveSelfFromCameraManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrappleParentRuntime.FortCameraModifier_Swinging.CalculateDynamicMultipliers
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// float                                   OutFOVBoundsMultiplier                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutBoostOffsetMultiplier                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCameraModifier_Swinging::CalculateDynamicMultipliers(float* OutFOVBoundsMultiplier, float* OutBoostOffsetMultiplier) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateDynamicMultipliers");

	Params::FortCameraModifier_Swinging_CalculateDynamicMultipliers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutFOVBoundsMultiplier != nullptr)
		*OutFOVBoundsMultiplier = Parms.OutFOVBoundsMultiplier;

	if (OutBoostOffsetMultiplier != nullptr)
		*OutBoostOffsetMultiplier = Parms.OutBoostOffsetMultiplier;
}


// Function GrappleParentRuntime.FortSwingingLayerAnimInstance.GetAttachVectorInPlayerSpace
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FVector                          InPlayerToAttachPoint                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UFortSwingingLayerAnimInstance::GetAttachVectorInPlayerSpace(const struct FVector& InPlayerToAttachPoint)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAttachVectorInPlayerSpace");

	Params::FortSwingingLayerAnimInstance_GetAttachVectorInPlayerSpace Parms{};

	Parms.InPlayerToAttachPoint = std::move(InPlayerToAttachPoint);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrappleParentRuntime.FortSwingingLayerAnimInstance.GetPlayerAnglesFromAttachPoint
// (Final, Native, Public, HasOutParams)
// Parameters:
// float                                   Pitch                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Roll                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortSwingingLayerAnimInstance::GetPlayerAnglesFromAttachPoint(float* Pitch, float* Roll, float* Yaw)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPlayerAnglesFromAttachPoint");

	Params::FortSwingingLayerAnimInstance_GetPlayerAnglesFromAttachPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pitch != nullptr)
		*Pitch = Parms.Pitch;

	if (Roll != nullptr)
		*Roll = Parms.Roll;

	if (Yaw != nullptr)
		*Yaw = Parms.Yaw;
}

}

