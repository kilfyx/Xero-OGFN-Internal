#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VUI_VUIBase

#include "Basic.hpp"


namespace SDK::Params
{

// Function VUI_VUIBase.VUIBase.FindObjectOfType
// 0x0010 (0x0010 - 0x0000)
struct VUIBase_FindObjectOfType final
{
public:
	class UClass*                                 __verse_0x0F99A7FE_type;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVUIBase*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_FindObjectOfType) == 0x000008, "Wrong alignment on VUIBase_FindObjectOfType");
static_assert(sizeof(VUIBase_FindObjectOfType) == 0x000010, "Wrong size on VUIBase_FindObjectOfType");
static_assert(offsetof(VUIBase_FindObjectOfType, __verse_0x0F99A7FE_type) == 0x000000, "Member 'VUIBase_FindObjectOfType::__verse_0x0F99A7FE_type' has a wrong offset!");
static_assert(offsetof(VUIBase_FindObjectOfType, RetVal) == 0x000008, "Member 'VUIBase_FindObjectOfType::RetVal' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.FindObjectsOfType
// 0x0018 (0x0018 - 0x0000)
struct VUIBase_FindObjectsOfType final
{
public:
	class UClass*                                 __verse_0x0F99A7FE_type;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UVUIBase*>                       RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_FindObjectsOfType) == 0x000008, "Wrong alignment on VUIBase_FindObjectsOfType");
static_assert(sizeof(VUIBase_FindObjectsOfType) == 0x000018, "Wrong size on VUIBase_FindObjectsOfType");
static_assert(offsetof(VUIBase_FindObjectsOfType, __verse_0x0F99A7FE_type) == 0x000000, "Member 'VUIBase_FindObjectsOfType::__verse_0x0F99A7FE_type' has a wrong offset!");
static_assert(offsetof(VUIBase_FindObjectsOfType, RetVal) == 0x000008, "Member 'VUIBase_FindObjectsOfType::RetVal' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.GetAngularVelocity
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_GetAngularVelocity final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_GetAngularVelocity) == 0x000008, "Wrong alignment on VUIBase_GetAngularVelocity");
static_assert(sizeof(VUIBase_GetAngularVelocity) == 0x000008, "Wrong size on VUIBase_GetAngularVelocity");
static_assert(offsetof(VUIBase_GetAngularVelocity, RetVal) == 0x000000, "Member 'VUIBase_GetAngularVelocity::RetVal' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_GetPosition final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_GetPosition) == 0x000008, "Wrong alignment on VUIBase_GetPosition");
static_assert(sizeof(VUIBase_GetPosition) == 0x000008, "Wrong size on VUIBase_GetPosition");
static_assert(offsetof(VUIBase_GetPosition, RetVal) == 0x000000, "Member 'VUIBase_GetPosition::RetVal' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.GetRotation
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_GetRotation final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_GetRotation) == 0x000008, "Wrong alignment on VUIBase_GetRotation");
static_assert(sizeof(VUIBase_GetRotation) == 0x000008, "Wrong size on VUIBase_GetRotation");
static_assert(offsetof(VUIBase_GetRotation, RetVal) == 0x000000, "Member 'VUIBase_GetRotation::RetVal' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.GetVelocity
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_GetVelocity final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_GetVelocity) == 0x000008, "Wrong alignment on VUIBase_GetVelocity");
static_assert(sizeof(VUIBase_GetVelocity) == 0x000008, "Wrong size on VUIBase_GetVelocity");
static_assert(offsetof(VUIBase_GetVelocity, RetVal) == 0x000000, "Member 'VUIBase_GetVelocity::RetVal' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.OnPlayerConnect
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_OnPlayerConnect final
{
public:
	class UVUIPlayerController*                   __verse_0x995129C4_Controller;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_OnPlayerConnect) == 0x000008, "Wrong alignment on VUIBase_OnPlayerConnect");
static_assert(sizeof(VUIBase_OnPlayerConnect) == 0x000008, "Wrong size on VUIBase_OnPlayerConnect");
static_assert(offsetof(VUIBase_OnPlayerConnect, __verse_0x995129C4_Controller) == 0x000000, "Member 'VUIBase_OnPlayerConnect::__verse_0x995129C4_Controller' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.OnPlayerDisconnect
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_OnPlayerDisconnect final
{
public:
	class UVUIPlayerController*                   __verse_0x995129C4_Controller;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_OnPlayerDisconnect) == 0x000008, "Wrong alignment on VUIBase_OnPlayerDisconnect");
static_assert(sizeof(VUIBase_OnPlayerDisconnect) == 0x000008, "Wrong size on VUIBase_OnPlayerDisconnect");
static_assert(offsetof(VUIBase_OnPlayerDisconnect, __verse_0x995129C4_Controller) == 0x000000, "Member 'VUIBase_OnPlayerDisconnect::__verse_0x995129C4_Controller' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.SetAngularVelocity
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_SetAngularVelocity final
{
public:
	class UVector3*                               __verse_0xAA1ABDC9_rotation;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_SetAngularVelocity) == 0x000008, "Wrong alignment on VUIBase_SetAngularVelocity");
static_assert(sizeof(VUIBase_SetAngularVelocity) == 0x000008, "Wrong size on VUIBase_SetAngularVelocity");
static_assert(offsetof(VUIBase_SetAngularVelocity, __verse_0xAA1ABDC9_rotation) == 0x000000, "Member 'VUIBase_SetAngularVelocity::__verse_0xAA1ABDC9_rotation' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_SetPosition final
{
public:
	class UVector3*                               __verse_0x7AF6BB5D_position;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_SetPosition) == 0x000008, "Wrong alignment on VUIBase_SetPosition");
static_assert(sizeof(VUIBase_SetPosition) == 0x000008, "Wrong size on VUIBase_SetPosition");
static_assert(offsetof(VUIBase_SetPosition, __verse_0x7AF6BB5D_position) == 0x000000, "Member 'VUIBase_SetPosition::__verse_0x7AF6BB5D_position' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.SetRotation
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_SetRotation final
{
public:
	class UVector3*                               __verse_0xAA1ABDC9_rotation;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_SetRotation) == 0x000008, "Wrong alignment on VUIBase_SetRotation");
static_assert(sizeof(VUIBase_SetRotation) == 0x000008, "Wrong size on VUIBase_SetRotation");
static_assert(offsetof(VUIBase_SetRotation, __verse_0xAA1ABDC9_rotation) == 0x000000, "Member 'VUIBase_SetRotation::__verse_0xAA1ABDC9_rotation' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.SetVelocity
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_SetVelocity final
{
public:
	class UVector3*                               __verse_0x069EACF5_velocity;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_SetVelocity) == 0x000008, "Wrong alignment on VUIBase_SetVelocity");
static_assert(sizeof(VUIBase_SetVelocity) == 0x000008, "Wrong size on VUIBase_SetVelocity");
static_assert(offsetof(VUIBase_SetVelocity, __verse_0x069EACF5_velocity) == 0x000000, "Member 'VUIBase_SetVelocity::__verse_0x069EACF5_velocity' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.SpawnAt
// 0x0018 (0x0018 - 0x0000)
struct VUIBase_SpawnAt final
{
public:
	class UVUIBase*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x7AF6BB5D_position;                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0xAA1ABDC9_rotation;                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_SpawnAt) == 0x000008, "Wrong alignment on VUIBase_SpawnAt");
static_assert(sizeof(VUIBase_SpawnAt) == 0x000018, "Wrong size on VUIBase_SpawnAt");
static_assert(offsetof(VUIBase_SpawnAt, __verse_0x5C20106F_v) == 0x000000, "Member 'VUIBase_SpawnAt::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(VUIBase_SpawnAt, __verse_0x7AF6BB5D_position) == 0x000008, "Member 'VUIBase_SpawnAt::__verse_0x7AF6BB5D_position' has a wrong offset!");
static_assert(offsetof(VUIBase_SpawnAt, __verse_0xAA1ABDC9_rotation) == 0x000010, "Member 'VUIBase_SpawnAt::__verse_0xAA1ABDC9_rotation' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.SpawnVUI
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_SpawnVUI final
{
public:
	class UVUIBase*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_SpawnVUI) == 0x000008, "Wrong alignment on VUIBase_SpawnVUI");
static_assert(sizeof(VUIBase_SpawnVUI) == 0x000008, "Wrong size on VUIBase_SpawnVUI");
static_assert(offsetof(VUIBase_SpawnVUI, __verse_0x5C20106F_v) == 0x000000, "Member 'VUIBase_SpawnVUI::__verse_0x5C20106F_v' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.SphereOverlap
// 0x0028 (0x0028 - 0x0000)
struct VUIBase_SphereOverlap final
{
public:
	class UVector3*                               __verse_0xA82B0967_Position;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xE34F9FAC_Radius;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 __verse_0x0F99A7FE_type;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UVUIBase*>                       RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_SphereOverlap) == 0x000008, "Wrong alignment on VUIBase_SphereOverlap");
static_assert(sizeof(VUIBase_SphereOverlap) == 0x000028, "Wrong size on VUIBase_SphereOverlap");
static_assert(offsetof(VUIBase_SphereOverlap, __verse_0xA82B0967_Position) == 0x000000, "Member 'VUIBase_SphereOverlap::__verse_0xA82B0967_Position' has a wrong offset!");
static_assert(offsetof(VUIBase_SphereOverlap, __verse_0xE34F9FAC_Radius) == 0x000008, "Member 'VUIBase_SphereOverlap::__verse_0xE34F9FAC_Radius' has a wrong offset!");
static_assert(offsetof(VUIBase_SphereOverlap, __verse_0x0F99A7FE_type) == 0x000010, "Member 'VUIBase_SphereOverlap::__verse_0x0F99A7FE_type' has a wrong offset!");
static_assert(offsetof(VUIBase_SphereOverlap, RetVal) == 0x000018, "Member 'VUIBase_SphereOverlap::RetVal' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.Tick
// 0x0004 (0x0004 - 0x0000)
struct VUIBase_Tick final
{
public:
	float                                         __verse_0xE346DED5_dt;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_Tick) == 0x000004, "Wrong alignment on VUIBase_Tick");
static_assert(sizeof(VUIBase_Tick) == 0x000004, "Wrong size on VUIBase_Tick");
static_assert(offsetof(VUIBase_Tick, __verse_0xE346DED5_dt) == 0x000000, "Member 'VUIBase_Tick::__verse_0xE346DED5_dt' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.VUI_OnPossess
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_VUI_OnPossess final
{
public:
	class UVUIPlayerController*                   __verse_0x995129C4_Controller;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_VUI_OnPossess) == 0x000008, "Wrong alignment on VUIBase_VUI_OnPossess");
static_assert(sizeof(VUIBase_VUI_OnPossess) == 0x000008, "Wrong size on VUIBase_VUI_OnPossess");
static_assert(offsetof(VUIBase_VUI_OnPossess, __verse_0x995129C4_Controller) == 0x000000, "Member 'VUIBase_VUI_OnPossess::__verse_0x995129C4_Controller' has a wrong offset!");

// Function VUI_VUIBase.VUIBase.VUI_OnUnpossess
// 0x0008 (0x0008 - 0x0000)
struct VUIBase_VUI_OnUnpossess final
{
public:
	class UVUIPlayerController*                   __verse_0x995129C4_Controller;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VUIBase_VUI_OnUnpossess) == 0x000008, "Wrong alignment on VUIBase_VUI_OnUnpossess");
static_assert(sizeof(VUIBase_VUI_OnUnpossess) == 0x000008, "Wrong size on VUIBase_VUI_OnUnpossess");
static_assert(offsetof(VUIBase_VUI_OnUnpossess, __verse_0x995129C4_Controller) == 0x000000, "Member 'VUIBase_VUI_OnUnpossess::__verse_0x995129C4_Controller' has a wrong offset!");

}

