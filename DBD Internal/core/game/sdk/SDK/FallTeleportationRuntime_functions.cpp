#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FallTeleportationRuntime

#include "Basic.hpp"

#include "FallTeleportationRuntime_classes.hpp"
#include "FallTeleportationRuntime_parameters.hpp"


namespace SDK
{

// Function FallTeleportationRuntime.FortFallTeleportSpawnerComponent.HandleGamePhaseChanged
// (Final, Native, Protected)
// Parameters:
// EAthenaGamePhase                        GamePhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortFallTeleportSpawnerComponent::HandleGamePhaseChanged(EAthenaGamePhase GamePhase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGamePhaseChanged");

	Params::FortFallTeleportSpawnerComponent_HandleGamePhaseChanged Parms{};

	Parms.GamePhase = GamePhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FallTeleportationRuntime.FortFallTeleportSpawnerComponent.HandleWarmupCountdownEndTimeUpdated
// (Final, Native, Protected)
// Parameters:
// float                                   NewEndTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortFallTeleportSpawnerComponent::HandleWarmupCountdownEndTimeUpdated(float NewEndTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWarmupCountdownEndTimeUpdated");

	Params::FortFallTeleportSpawnerComponent_HandleWarmupCountdownEndTimeUpdated Parms{};

	Parms.NewEndTime = NewEndTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FallTeleportationRuntime.FortFallTeleportCheatManager.EnableFallTeleportationIndefinitely
// (Final, Exec, Native, Private)

void UFortFallTeleportCheatManager::EnableFallTeleportationIndefinitely()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnableFallTeleportationIndefinitely");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FallTeleportationRuntime.FortFallTeleportComponentBase.UpdateLastGroundLocation
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortFallTeleportComponentBase::UpdateLastGroundLocation(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateLastGroundLocation");

	Params::FortFallTeleportComponentBase_UpdateLastGroundLocation Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FallTeleportationRuntime.FortFallTeleportComponentBase.IsTeleportLocationValid
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          LocationToTest                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortFallTeleportComponentBase::IsTeleportLocationValid(const struct FVector& LocationToTest) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsTeleportLocationValid");

	Params::FortFallTeleportComponentBase_IsTeleportLocationValid Parms{};

	Parms.LocationToTest = std::move(LocationToTest);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FallTeleportationRuntime.FortFallTeleportComponentBase.IsValidActorToTeleportOn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActorToTeleportOn                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortFallTeleportComponentBase::IsValidActorToTeleportOn(class AActor* ActorToTeleportOn) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsValidActorToTeleportOn");

	Params::FortFallTeleportComponentBase_IsValidActorToTeleportOn Parms{};

	Parms.ActorToTeleportOn = ActorToTeleportOn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

