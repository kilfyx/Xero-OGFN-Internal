#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayStateMachine

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct GameplayStateMachine.ActiveGameplayStateData
// 0x0010 (0x0010 - 0x0000)
struct FActiveGameplayStateData final
{
public:
	class UGameplayState*                         GameplayState;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PreviousStateId;                                   // 0x0008(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FActiveGameplayStateData) == 0x000008, "Wrong alignment on FActiveGameplayStateData");
static_assert(sizeof(FActiveGameplayStateData) == 0x000010, "Wrong size on FActiveGameplayStateData");
static_assert(offsetof(FActiveGameplayStateData, GameplayState) == 0x000000, "Member 'FActiveGameplayStateData::GameplayState' has a wrong offset!");
static_assert(offsetof(FActiveGameplayStateData, PreviousStateId) == 0x000008, "Member 'FActiveGameplayStateData::PreviousStateId' has a wrong offset!");

// ScriptStruct GameplayStateMachine.GameplayStateTransition
// 0x0028 (0x0028 - 0x0000)
struct FGameplayStateTransition final
{
public:
	struct FGameplayTagContainer                  TransitionConditionTags;                           // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TransitionStateTag;                                // 0x0020(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayStateTransition) == 0x000008, "Wrong alignment on FGameplayStateTransition");
static_assert(sizeof(FGameplayStateTransition) == 0x000028, "Wrong size on FGameplayStateTransition");
static_assert(offsetof(FGameplayStateTransition, TransitionConditionTags) == 0x000000, "Member 'FGameplayStateTransition::TransitionConditionTags' has a wrong offset!");
static_assert(offsetof(FGameplayStateTransition, TransitionStateTag) == 0x000020, "Member 'FGameplayStateTransition::TransitionStateTag' has a wrong offset!");

// ScriptStruct GameplayStateMachine.GameplayStateSettings
// 0x0020 (0x0020 - 0x0000)
struct FGameplayStateSettings final
{
public:
	TSubclassOf<class UGameplayState>             StateClass;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StateId;                                           // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayStateTransition>       StateTransitions;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayStateSettings) == 0x000008, "Wrong alignment on FGameplayStateSettings");
static_assert(sizeof(FGameplayStateSettings) == 0x000020, "Wrong size on FGameplayStateSettings");
static_assert(offsetof(FGameplayStateSettings, StateClass) == 0x000000, "Member 'FGameplayStateSettings::StateClass' has a wrong offset!");
static_assert(offsetof(FGameplayStateSettings, StateId) == 0x000008, "Member 'FGameplayStateSettings::StateId' has a wrong offset!");
static_assert(offsetof(FGameplayStateSettings, StateTransitions) == 0x000010, "Member 'FGameplayStateSettings::StateTransitions' has a wrong offset!");

// ScriptStruct GameplayStateMachine.GameplayStateMachineItem
// 0x000C (0x0018 - 0x000C)
struct FGameplayStateMachineItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayStateMachine*                  StateMachine;                                      // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGameplayStateMachineItem) == 0x000008, "Wrong alignment on FGameplayStateMachineItem");
static_assert(sizeof(FGameplayStateMachineItem) == 0x000018, "Wrong size on FGameplayStateMachineItem");
static_assert(offsetof(FGameplayStateMachineItem, StateMachine) == 0x000010, "Member 'FGameplayStateMachineItem::StateMachine' has a wrong offset!");

// ScriptStruct GameplayStateMachine.GameplayStateMachineArray
// 0x0018 (0x0120 - 0x0108)
struct FGameplayStateMachineArray final : public FFastArraySerializer
{
public:
	class UGameplayStateMachineManager*           StateMachineManager;                               // 0x0108(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayStateMachineItem>      StateMachineItems;                                 // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGameplayStateMachineArray) == 0x000008, "Wrong alignment on FGameplayStateMachineArray");
static_assert(sizeof(FGameplayStateMachineArray) == 0x000120, "Wrong size on FGameplayStateMachineArray");
static_assert(offsetof(FGameplayStateMachineArray, StateMachineManager) == 0x000108, "Member 'FGameplayStateMachineArray::StateMachineManager' has a wrong offset!");
static_assert(offsetof(FGameplayStateMachineArray, StateMachineItems) == 0x000110, "Member 'FGameplayStateMachineArray::StateMachineItems' has a wrong offset!");

// ScriptStruct GameplayStateMachine.GameplayStateMachineData
// 0x00B8 (0x00B8 - 0x0000)
struct FGameplayStateMachineData final
{
public:
	class UGameplayStateMachine*                  StateMachine;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0xB0];                                       // 0x0008(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayStateMachineData) == 0x000008, "Wrong alignment on FGameplayStateMachineData");
static_assert(sizeof(FGameplayStateMachineData) == 0x0000B8, "Wrong size on FGameplayStateMachineData");
static_assert(offsetof(FGameplayStateMachineData, StateMachine) == 0x000000, "Member 'FGameplayStateMachineData::StateMachine' has a wrong offset!");

}

