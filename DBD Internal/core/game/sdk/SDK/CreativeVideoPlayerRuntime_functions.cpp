#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeVideoPlayerRuntime

#include "Basic.hpp"

#include "CreativeVideoPlayerRuntime_classes.hpp"
#include "CreativeVideoPlayerRuntime_parameters.hpp"


namespace SDK
{

// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.ClientLeaveFullscreenVideo
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UCreativeVideoPlayerFullscreenGameplayAbility::ClientLeaveFullscreenVideo()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientLeaveFullscreenVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.ClientTransitionToFullscreenVideo
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UCreativeVideoPlayerFullscreenGameplayAbility::ClientTransitionToFullscreenVideo()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientTransitionToFullscreenVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.EnterFullscreenState
// (Final, Native, Public, BlueprintCallable)

void UCreativeVideoPlayerFullscreenGameplayAbility::EnterFullscreenState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnterFullscreenState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.EnterFullscreenStateWithOptions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCreativeVideoPlayerFullscreenOptionsOptions                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UCreativeVideoPlayerFullscreenGameplayAbility::EnterFullscreenStateWithOptions(const struct FCreativeVideoPlayerFullscreenOptions& Options)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnterFullscreenStateWithOptions");

	Params::CreativeVideoPlayerFullscreenGameplayAbility_EnterFullscreenStateWithOptions Parms{};

	Parms.Options = std::move(Options);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.ExitFullscreenState
// (Final, Native, Public, BlueprintCallable)

void UCreativeVideoPlayerFullscreenGameplayAbility::ExitFullscreenState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ExitFullscreenState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.HandleEnterFullscreenActionPressed
// (Final, Native, Private)

void UCreativeVideoPlayerFullscreenGameplayAbility::HandleEnterFullscreenActionPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleEnterFullscreenActionPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.HandleEnterFullscreenActionReleased
// (Final, Native, Private)

void UCreativeVideoPlayerFullscreenGameplayAbility::HandleEnterFullscreenActionReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleEnterFullscreenActionReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.OnFullscreenUIEnds
// (Final, Native, Private)

void UCreativeVideoPlayerFullscreenGameplayAbility::OnFullscreenUIEnds()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnFullscreenUIEnds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.ServerEnterFullscreenMode
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UCreativeVideoPlayerFullscreenGameplayAbility::ServerEnterFullscreenMode()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerEnterFullscreenMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFullscreenGameplayAbility.ServerLeaveFullscreenMode
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UCreativeVideoPlayerFullscreenGameplayAbility::ServerLeaveFullscreenMode()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerLeaveFullscreenMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreativeVideoPlayerRuntime.CreativeVideoPlayerFunctionLibrary.ShutdownFullscreenVideoMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreativeVideoPlayerFunctionLibrary::ShutdownFullscreenVideoMode(class AController* Controller)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ShutdownFullscreenVideoMode");

	Params::CreativeVideoPlayerFunctionLibrary_ShutdownFullscreenVideoMode Parms{};

	Parms.Controller = Controller;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}

}

