#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ConcertTransport

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ConcertTransport.EConcertReliableHandshakeState
// NumValues: 0x0004
enum class EConcertReliableHandshakeState : uint8
{
	None                                     = 0,
	Negotiate                                = 1,
	Success                                  = 2,
	EConcertReliableHandshakeState_MAX       = 3,
};

// Enum ConcertTransport.EConcertResponseCode
// NumValues: 0x0007
enum class EConcertResponseCode : uint8
{
	Pending                                  = 0,
	Success                                  = 1,
	Failed                                   = 2,
	InvalidRequest                           = 3,
	UnknownRequest                           = 4,
	TimedOut                                 = 5,
	EConcertResponseCode_MAX                 = 6,
};

// Enum ConcertTransport.EConcertMessageFlags
// NumValues: 0x0004
enum class EConcertMessageFlags : uint8
{
	None                                     = 0,
	ReliableOrdered                          = 1,
	UniqueId                                 = 2,
	EConcertMessageFlags_MAX                 = 3,
};

// ScriptStruct ConcertTransport.ConcertLocalIdentifierState
// 0x0010 (0x0010 - 0x0000)
struct FConcertLocalIdentifierState final
{
public:
	TArray<class FString>                         MappedNames;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertLocalIdentifierState) == 0x000008, "Wrong alignment on FConcertLocalIdentifierState");
static_assert(sizeof(FConcertLocalIdentifierState) == 0x000010, "Wrong size on FConcertLocalIdentifierState");
static_assert(offsetof(FConcertLocalIdentifierState, MappedNames) == 0x000000, "Member 'FConcertLocalIdentifierState::MappedNames' has a wrong offset!");

// ScriptStruct ConcertTransport.ConcertMessageData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FConcertMessageData
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ConcertEndpointId;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MessageID;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MessageOrderIndex;                                 // 0x0028(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ChannelId;                                         // 0x002A(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertMessageData) == 0x000008, "Wrong alignment on FConcertMessageData");
static_assert(sizeof(FConcertMessageData) == 0x000030, "Wrong size on FConcertMessageData");
static_assert(offsetof(FConcertMessageData, ConcertEndpointId) == 0x000008, "Member 'FConcertMessageData::ConcertEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertMessageData, MessageID) == 0x000018, "Member 'FConcertMessageData::MessageID' has a wrong offset!");
static_assert(offsetof(FConcertMessageData, MessageOrderIndex) == 0x000028, "Member 'FConcertMessageData::MessageOrderIndex' has a wrong offset!");
static_assert(offsetof(FConcertMessageData, ChannelId) == 0x00002A, "Member 'FConcertMessageData::ChannelId' has a wrong offset!");

// ScriptStruct ConcertTransport.ConcertKeepAlive
// 0x0000 (0x0030 - 0x0030)
struct FConcertKeepAlive final : public FConcertMessageData
{
};
static_assert(alignof(FConcertKeepAlive) == 0x000008, "Wrong alignment on FConcertKeepAlive");
static_assert(sizeof(FConcertKeepAlive) == 0x000030, "Wrong size on FConcertKeepAlive");

// ScriptStruct ConcertTransport.ConcertAckData
// 0x0018 (0x0048 - 0x0030)
struct FConcertAckData final : public FConcertMessageData
{
public:
	int64                                         AckSendTimeTicks;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SourceMessageId;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAckData) == 0x000008, "Wrong alignment on FConcertAckData");
static_assert(sizeof(FConcertAckData) == 0x000048, "Wrong size on FConcertAckData");
static_assert(offsetof(FConcertAckData, AckSendTimeTicks) == 0x000030, "Member 'FConcertAckData::AckSendTimeTicks' has a wrong offset!");
static_assert(offsetof(FConcertAckData, SourceMessageId) == 0x000038, "Member 'FConcertAckData::SourceMessageId' has a wrong offset!");

// ScriptStruct ConcertTransport.ConcertEventData
// 0x0000 (0x0030 - 0x0030)
struct FConcertEventData : public FConcertMessageData
{
};
static_assert(alignof(FConcertEventData) == 0x000008, "Wrong alignment on FConcertEventData");
static_assert(sizeof(FConcertEventData) == 0x000030, "Wrong size on FConcertEventData");

// ScriptStruct ConcertTransport.ConcertEndpointDiscoveryEvent
// 0x0000 (0x0030 - 0x0030)
struct FConcertEndpointDiscoveryEvent : public FConcertEventData
{
};
static_assert(alignof(FConcertEndpointDiscoveryEvent) == 0x000008, "Wrong alignment on FConcertEndpointDiscoveryEvent");
static_assert(sizeof(FConcertEndpointDiscoveryEvent) == 0x000030, "Wrong size on FConcertEndpointDiscoveryEvent");

// ScriptStruct ConcertTransport.ConcertReliableHandshakeData
// 0x0010 (0x0040 - 0x0030)
struct FConcertReliableHandshakeData final : public FConcertEndpointDiscoveryEvent
{
public:
	EConcertReliableHandshakeState                HandshakeState;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x1];                                       // 0x0031(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        ReliableChannelId;                                 // 0x0032(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        NextMessageIndex;                                  // 0x0034(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         EndpointTimeoutTick;                               // 0x0038(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertReliableHandshakeData) == 0x000008, "Wrong alignment on FConcertReliableHandshakeData");
static_assert(sizeof(FConcertReliableHandshakeData) == 0x000040, "Wrong size on FConcertReliableHandshakeData");
static_assert(offsetof(FConcertReliableHandshakeData, HandshakeState) == 0x000030, "Member 'FConcertReliableHandshakeData::HandshakeState' has a wrong offset!");
static_assert(offsetof(FConcertReliableHandshakeData, ReliableChannelId) == 0x000032, "Member 'FConcertReliableHandshakeData::ReliableChannelId' has a wrong offset!");
static_assert(offsetof(FConcertReliableHandshakeData, NextMessageIndex) == 0x000034, "Member 'FConcertReliableHandshakeData::NextMessageIndex' has a wrong offset!");
static_assert(offsetof(FConcertReliableHandshakeData, EndpointTimeoutTick) == 0x000038, "Member 'FConcertReliableHandshakeData::EndpointTimeoutTick' has a wrong offset!");

// ScriptStruct ConcertTransport.ConcertEndpointClosedData
// 0x0000 (0x0030 - 0x0030)
struct FConcertEndpointClosedData final : public FConcertMessageData
{
};
static_assert(alignof(FConcertEndpointClosedData) == 0x000008, "Wrong alignment on FConcertEndpointClosedData");
static_assert(sizeof(FConcertEndpointClosedData) == 0x000030, "Wrong size on FConcertEndpointClosedData");

// ScriptStruct ConcertTransport.ConcertResponseData
// 0x0030 (0x0060 - 0x0030)
struct FConcertResponseData : public FConcertMessageData
{
public:
	struct FGuid                                  RequestMessageId;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertResponseCode                          ResponseCode;                                      // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Reason;                                            // 0x0048(0x0018)(Edit, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertResponseData) == 0x000008, "Wrong alignment on FConcertResponseData");
static_assert(sizeof(FConcertResponseData) == 0x000060, "Wrong size on FConcertResponseData");
static_assert(offsetof(FConcertResponseData, RequestMessageId) == 0x000030, "Member 'FConcertResponseData::RequestMessageId' has a wrong offset!");
static_assert(offsetof(FConcertResponseData, ResponseCode) == 0x000040, "Member 'FConcertResponseData::ResponseCode' has a wrong offset!");
static_assert(offsetof(FConcertResponseData, Reason) == 0x000048, "Member 'FConcertResponseData::Reason' has a wrong offset!");

// ScriptStruct ConcertTransport.ConcertRequestData
// 0x0000 (0x0030 - 0x0030)
struct FConcertRequestData : public FConcertMessageData
{
};
static_assert(alignof(FConcertRequestData) == 0x000008, "Wrong alignment on FConcertRequestData");
static_assert(sizeof(FConcertRequestData) == 0x000030, "Wrong size on FConcertRequestData");

// ScriptStruct ConcertTransport.ConcertEndpointSettings
// 0x000C (0x000C - 0x0000)
struct FConcertEndpointSettings final
{
public:
	bool                                          bEnableLogging;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PurgeProcessedMessageDelaySeconds;                 // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemoteEndpointTimeoutSeconds;                      // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertEndpointSettings) == 0x000004, "Wrong alignment on FConcertEndpointSettings");
static_assert(sizeof(FConcertEndpointSettings) == 0x00000C, "Wrong size on FConcertEndpointSettings");
static_assert(offsetof(FConcertEndpointSettings, bEnableLogging) == 0x000000, "Member 'FConcertEndpointSettings::bEnableLogging' has a wrong offset!");
static_assert(offsetof(FConcertEndpointSettings, PurgeProcessedMessageDelaySeconds) == 0x000004, "Member 'FConcertEndpointSettings::PurgeProcessedMessageDelaySeconds' has a wrong offset!");
static_assert(offsetof(FConcertEndpointSettings, RemoteEndpointTimeoutSeconds) == 0x000008, "Member 'FConcertEndpointSettings::RemoteEndpointTimeoutSeconds' has a wrong offset!");

}

