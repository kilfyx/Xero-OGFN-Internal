#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ConcertSyncCore

#include "Basic.hpp"

#include "Concert_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ConcertTransport_structs.hpp"


namespace SDK
{

// Enum ConcertSyncCore.EConcertDataStoreResultCode
// NumValues: 0x0007
enum class EConcertDataStoreResultCode : uint8
{
	Added                                    = 0,
	Fetched                                  = 1,
	Exchanged                                = 2,
	NotFound                                 = 3,
	TypeMismatch                             = 4,
	UnexpectedError                          = 5,
	EConcertDataStoreResultCode_MAX          = 6,
};

// Enum ConcertSyncCore.EConcertMovieScenePlayerStatus
// NumValues: 0x0008
enum class EConcertMovieScenePlayerStatus : uint8
{
	Stopped                                  = 0,
	Playing                                  = 1,
	Recording                                = 2,
	Scrubbing                                = 3,
	Jumping                                  = 4,
	Stepping                                 = 5,
	Paused                                   = 6,
	MAX                                      = 7,
};

// Enum ConcertSyncCore.EConcertSyncTransactionActivitySummaryType
// NumValues: 0x0005
enum class EConcertSyncTransactionActivitySummaryType : uint8
{
	Added                                    = 0,
	Updated                                  = 1,
	Renamed                                  = 2,
	Deleted                                  = 3,
	EConcertSyncTransactionActivitySummaryType_MAX = 4,
};

// Enum ConcertSyncCore.EConcertSyncActivityEventType
// NumValues: 0x0006
enum class EConcertSyncActivityEventType : uint8
{
	None                                     = 0,
	Connection                               = 1,
	Lock                                     = 2,
	Transaction                              = 3,
	Package                                  = 4,
	EConcertSyncActivityEventType_MAX        = 5,
};

// Enum ConcertSyncCore.EConcertSyncLockEventType
// NumValues: 0x0003
enum class EConcertSyncLockEventType : uint8
{
	Locked                                   = 0,
	Unlocked                                 = 1,
	EConcertSyncLockEventType_MAX            = 2,
};

// Enum ConcertSyncCore.EConcertSyncConnectionEventType
// NumValues: 0x0003
enum class EConcertSyncConnectionEventType : uint8
{
	Connected                                = 0,
	Disconnected                             = 1,
	EConcertSyncConnectionEventType_MAX      = 2,
};

// Enum ConcertSyncCore.EConcertPackageUpdateType
// NumValues: 0x0006
enum class EConcertPackageUpdateType : uint8
{
	Dummy                                    = 0,
	Added                                    = 1,
	Saved                                    = 2,
	Renamed                                  = 3,
	Deleted                                  = 4,
	EConcertPackageUpdateType_MAX            = 5,
};

// Enum ConcertSyncCore.EConcertPlaySessionEventType
// NumValues: 0x0005
enum class EConcertPlaySessionEventType : uint8
{
	None                                     = 0,
	BeginPlay                                = 1,
	SwitchPlay                               = 2,
	EndPlay                                  = 3,
	EConcertPlaySessionEventType_MAX         = 4,
};

// Enum ConcertSyncCore.EConcertResourceLockType
// NumValues: 0x0004
enum class EConcertResourceLockType : uint8
{
	None                                     = 0,
	Lock                                     = 1,
	Unlock                                   = 2,
	EConcertResourceLockType_MAX             = 3,
};

// ScriptStruct ConcertSyncCore.ConcertDataStore_StoreValue
// 0x0030 (0x0030 - 0x0000)
struct FConcertDataStore_StoreValue final
{
public:
	class FName                                   TypeName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Version;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConcertSessionSerializedPayload       SerializedValue;                                   // 0x0010(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_StoreValue) == 0x000008, "Wrong alignment on FConcertDataStore_StoreValue");
static_assert(sizeof(FConcertDataStore_StoreValue) == 0x000030, "Wrong size on FConcertDataStore_StoreValue");
static_assert(offsetof(FConcertDataStore_StoreValue, TypeName) == 0x000000, "Member 'FConcertDataStore_StoreValue::TypeName' has a wrong offset!");
static_assert(offsetof(FConcertDataStore_StoreValue, Version) == 0x000008, "Member 'FConcertDataStore_StoreValue::Version' has a wrong offset!");
static_assert(offsetof(FConcertDataStore_StoreValue, SerializedValue) == 0x000010, "Member 'FConcertDataStore_StoreValue::SerializedValue' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_Response
// 0x0038 (0x0038 - 0x0000)
struct FConcertDataStore_Response final
{
public:
	EConcertDataStoreResultCode                   ResultCode;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConcertDataStore_StoreValue           Value;                                             // 0x0008(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_Response) == 0x000008, "Wrong alignment on FConcertDataStore_Response");
static_assert(sizeof(FConcertDataStore_Response) == 0x000038, "Wrong size on FConcertDataStore_Response");
static_assert(offsetof(FConcertDataStore_Response, ResultCode) == 0x000000, "Member 'FConcertDataStore_Response::ResultCode' has a wrong offset!");
static_assert(offsetof(FConcertDataStore_Response, Value) == 0x000008, "Member 'FConcertDataStore_Response::Value' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_Request
// 0x0010 (0x0010 - 0x0000)
struct FConcertDataStore_Request
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_Request) == 0x000004, "Wrong alignment on FConcertDataStore_Request");
static_assert(sizeof(FConcertDataStore_Request) == 0x000010, "Wrong size on FConcertDataStore_Request");
static_assert(offsetof(FConcertDataStore_Request, Key) == 0x000000, "Member 'FConcertDataStore_Request::Key' has a wrong offset!");
static_assert(offsetof(FConcertDataStore_Request, TypeName) == 0x000008, "Member 'FConcertDataStore_Request::TypeName' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_CompareExchangeRequest
// 0x0048 (0x0058 - 0x0010)
struct FConcertDataStore_CompareExchangeRequest final : public FConcertDataStore_Request
{
public:
	uint32                                        ExpectedVersion;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConcertSessionSerializedPayload       Expected;                                          // 0x0018(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionSerializedPayload       Desired;                                           // 0x0038(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_CompareExchangeRequest) == 0x000008, "Wrong alignment on FConcertDataStore_CompareExchangeRequest");
static_assert(sizeof(FConcertDataStore_CompareExchangeRequest) == 0x000058, "Wrong size on FConcertDataStore_CompareExchangeRequest");
static_assert(offsetof(FConcertDataStore_CompareExchangeRequest, ExpectedVersion) == 0x000010, "Member 'FConcertDataStore_CompareExchangeRequest::ExpectedVersion' has a wrong offset!");
static_assert(offsetof(FConcertDataStore_CompareExchangeRequest, Expected) == 0x000018, "Member 'FConcertDataStore_CompareExchangeRequest::Expected' has a wrong offset!");
static_assert(offsetof(FConcertDataStore_CompareExchangeRequest, Desired) == 0x000038, "Member 'FConcertDataStore_CompareExchangeRequest::Desired' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_FetchOrAddRequest
// 0x0020 (0x0030 - 0x0010)
struct FConcertDataStore_FetchOrAddRequest final : public FConcertDataStore_Request
{
public:
	struct FConcertSessionSerializedPayload       SerializedValue;                                   // 0x0010(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_FetchOrAddRequest) == 0x000008, "Wrong alignment on FConcertDataStore_FetchOrAddRequest");
static_assert(sizeof(FConcertDataStore_FetchOrAddRequest) == 0x000030, "Wrong size on FConcertDataStore_FetchOrAddRequest");
static_assert(offsetof(FConcertDataStore_FetchOrAddRequest, SerializedValue) == 0x000010, "Member 'FConcertDataStore_FetchOrAddRequest::SerializedValue' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_KeyValuePair
// 0x0038 (0x0038 - 0x0000)
struct FConcertDataStore_KeyValuePair final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertDataStore_StoreValue           Value;                                             // 0x0008(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_KeyValuePair) == 0x000008, "Wrong alignment on FConcertDataStore_KeyValuePair");
static_assert(sizeof(FConcertDataStore_KeyValuePair) == 0x000038, "Wrong size on FConcertDataStore_KeyValuePair");
static_assert(offsetof(FConcertDataStore_KeyValuePair, Key) == 0x000000, "Member 'FConcertDataStore_KeyValuePair::Key' has a wrong offset!");
static_assert(offsetof(FConcertDataStore_KeyValuePair, Value) == 0x000008, "Member 'FConcertDataStore_KeyValuePair::Value' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_ReplicateEvent
// 0x0010 (0x0010 - 0x0000)
struct FConcertDataStore_ReplicateEvent final
{
public:
	TArray<struct FConcertDataStore_KeyValuePair> Values;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_ReplicateEvent) == 0x000008, "Wrong alignment on FConcertDataStore_ReplicateEvent");
static_assert(sizeof(FConcertDataStore_ReplicateEvent) == 0x000010, "Wrong size on FConcertDataStore_ReplicateEvent");
static_assert(offsetof(FConcertDataStore_ReplicateEvent, Values) == 0x000000, "Member 'FConcertDataStore_ReplicateEvent::Values' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_Text
// 0x0018 (0x0018 - 0x0000)
struct FConcertDataStore_Text final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_Text) == 0x000008, "Wrong alignment on FConcertDataStore_Text");
static_assert(sizeof(FConcertDataStore_Text) == 0x000018, "Wrong size on FConcertDataStore_Text");
static_assert(offsetof(FConcertDataStore_Text, Value) == 0x000000, "Member 'FConcertDataStore_Text::Value' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_String
// 0x0010 (0x0010 - 0x0000)
struct FConcertDataStore_String final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_String) == 0x000008, "Wrong alignment on FConcertDataStore_String");
static_assert(sizeof(FConcertDataStore_String) == 0x000010, "Wrong size on FConcertDataStore_String");
static_assert(offsetof(FConcertDataStore_String, Value) == 0x000000, "Member 'FConcertDataStore_String::Value' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_Double
// 0x0008 (0x0008 - 0x0000)
struct FConcertDataStore_Double final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_Double) == 0x000008, "Wrong alignment on FConcertDataStore_Double");
static_assert(sizeof(FConcertDataStore_Double) == 0x000008, "Wrong size on FConcertDataStore_Double");
static_assert(offsetof(FConcertDataStore_Double, Value) == 0x000000, "Member 'FConcertDataStore_Double::Value' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertDataStore_Integer
// 0x0008 (0x0008 - 0x0000)
struct FConcertDataStore_Integer final
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertDataStore_Integer) == 0x000008, "Wrong alignment on FConcertDataStore_Integer");
static_assert(sizeof(FConcertDataStore_Integer) == 0x000008, "Wrong size on FConcertDataStore_Integer");
static_assert(offsetof(FConcertDataStore_Integer, Value) == 0x000000, "Member 'FConcertDataStore_Integer::Value' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertClientPresenceEventBase
// 0x0004 (0x0004 - 0x0000)
struct FConcertClientPresenceEventBase
{
public:
	uint32                                        TransactionUpdateIndex;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertClientPresenceEventBase) == 0x000004, "Wrong alignment on FConcertClientPresenceEventBase");
static_assert(sizeof(FConcertClientPresenceEventBase) == 0x000004, "Wrong size on FConcertClientPresenceEventBase");
static_assert(offsetof(FConcertClientPresenceEventBase, TransactionUpdateIndex) == 0x000000, "Member 'FConcertClientPresenceEventBase::TransactionUpdateIndex' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertLaserData
// 0x0018 (0x0018 - 0x0000)
struct FConcertLaserData final
{
public:
	struct FVector                                LaserStart;                                        // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaserEnd;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertLaserData) == 0x000004, "Wrong alignment on FConcertLaserData");
static_assert(sizeof(FConcertLaserData) == 0x000018, "Wrong size on FConcertLaserData");
static_assert(offsetof(FConcertLaserData, LaserStart) == 0x000000, "Member 'FConcertLaserData::LaserStart' has a wrong offset!");
static_assert(offsetof(FConcertLaserData, LaserEnd) == 0x00000C, "Member 'FConcertLaserData::LaserEnd' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertClientVRPresenceUpdateEvent
// 0x006C (0x0070 - 0x0004)
struct FConcertClientVRPresenceUpdateEvent final : public FConcertClientPresenceEventBase
{
public:
	struct FVector                                LeftMotionControllerPosition;                      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  LeftMotionControllerOrientation;                   // 0x0010(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RightMotionControllerPosition;                     // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RightMotionControllerOrientation;                  // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FConcertLaserData                      Lasers[0x2];                                       // 0x0040(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertClientVRPresenceUpdateEvent) == 0x000010, "Wrong alignment on FConcertClientVRPresenceUpdateEvent");
static_assert(sizeof(FConcertClientVRPresenceUpdateEvent) == 0x000070, "Wrong size on FConcertClientVRPresenceUpdateEvent");
static_assert(offsetof(FConcertClientVRPresenceUpdateEvent, LeftMotionControllerPosition) == 0x000004, "Member 'FConcertClientVRPresenceUpdateEvent::LeftMotionControllerPosition' has a wrong offset!");
static_assert(offsetof(FConcertClientVRPresenceUpdateEvent, LeftMotionControllerOrientation) == 0x000010, "Member 'FConcertClientVRPresenceUpdateEvent::LeftMotionControllerOrientation' has a wrong offset!");
static_assert(offsetof(FConcertClientVRPresenceUpdateEvent, RightMotionControllerPosition) == 0x000020, "Member 'FConcertClientVRPresenceUpdateEvent::RightMotionControllerPosition' has a wrong offset!");
static_assert(offsetof(FConcertClientVRPresenceUpdateEvent, RightMotionControllerOrientation) == 0x000030, "Member 'FConcertClientVRPresenceUpdateEvent::RightMotionControllerOrientation' has a wrong offset!");
static_assert(offsetof(FConcertClientVRPresenceUpdateEvent, Lasers) == 0x000040, "Member 'FConcertClientVRPresenceUpdateEvent::Lasers' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertClientDesktopPresenceUpdateEvent
// 0x001C (0x0020 - 0x0004)
struct FConcertClientDesktopPresenceUpdateEvent final : public FConcertClientPresenceEventBase
{
public:
	struct FVector                                TraceStart;                                        // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovingCamera;                                     // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertClientDesktopPresenceUpdateEvent) == 0x000004, "Wrong alignment on FConcertClientDesktopPresenceUpdateEvent");
static_assert(sizeof(FConcertClientDesktopPresenceUpdateEvent) == 0x000020, "Wrong size on FConcertClientDesktopPresenceUpdateEvent");
static_assert(offsetof(FConcertClientDesktopPresenceUpdateEvent, TraceStart) == 0x000004, "Member 'FConcertClientDesktopPresenceUpdateEvent::TraceStart' has a wrong offset!");
static_assert(offsetof(FConcertClientDesktopPresenceUpdateEvent, TraceEnd) == 0x000010, "Member 'FConcertClientDesktopPresenceUpdateEvent::TraceEnd' has a wrong offset!");
static_assert(offsetof(FConcertClientDesktopPresenceUpdateEvent, bMovingCamera) == 0x00001C, "Member 'FConcertClientDesktopPresenceUpdateEvent::bMovingCamera' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertClientPresenceDataUpdateEvent
// 0x002C (0x0030 - 0x0004)
struct FConcertClientPresenceDataUpdateEvent final : public FConcertClientPresenceEventBase
{
public:
	class FName                                   WorldPath;                                         // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Orientation;                                       // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertClientPresenceDataUpdateEvent) == 0x000010, "Wrong alignment on FConcertClientPresenceDataUpdateEvent");
static_assert(sizeof(FConcertClientPresenceDataUpdateEvent) == 0x000030, "Wrong size on FConcertClientPresenceDataUpdateEvent");
static_assert(offsetof(FConcertClientPresenceDataUpdateEvent, WorldPath) == 0x000004, "Member 'FConcertClientPresenceDataUpdateEvent::WorldPath' has a wrong offset!");
static_assert(offsetof(FConcertClientPresenceDataUpdateEvent, Position) == 0x00000C, "Member 'FConcertClientPresenceDataUpdateEvent::Position' has a wrong offset!");
static_assert(offsetof(FConcertClientPresenceDataUpdateEvent, Orientation) == 0x000020, "Member 'FConcertClientPresenceDataUpdateEvent::Orientation' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertClientPresenceInVREvent
// 0x0008 (0x0008 - 0x0000)
struct FConcertClientPresenceInVREvent final
{
public:
	class FName                                   VRDevice;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertClientPresenceInVREvent) == 0x000004, "Wrong alignment on FConcertClientPresenceInVREvent");
static_assert(sizeof(FConcertClientPresenceInVREvent) == 0x000008, "Wrong size on FConcertClientPresenceInVREvent");
static_assert(offsetof(FConcertClientPresenceInVREvent, VRDevice) == 0x000000, "Member 'FConcertClientPresenceInVREvent::VRDevice' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertClientPresenceVisibilityUpdateEvent
// 0x0014 (0x0014 - 0x0000)
struct FConcertClientPresenceVisibilityUpdateEvent final
{
public:
	struct FGuid                                  ModifiedEndpointId;                                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertClientPresenceVisibilityUpdateEvent) == 0x000004, "Wrong alignment on FConcertClientPresenceVisibilityUpdateEvent");
static_assert(sizeof(FConcertClientPresenceVisibilityUpdateEvent) == 0x000014, "Wrong size on FConcertClientPresenceVisibilityUpdateEvent");
static_assert(offsetof(FConcertClientPresenceVisibilityUpdateEvent, ModifiedEndpointId) == 0x000000, "Member 'FConcertClientPresenceVisibilityUpdateEvent::ModifiedEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertClientPresenceVisibilityUpdateEvent, bVisibility) == 0x000010, "Member 'FConcertClientPresenceVisibilityUpdateEvent::bVisibility' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSequencerState
// 0x0028 (0x0028 - 0x0000)
struct FConcertSequencerState final
{
public:
	class FString                                 SequenceObjectPath;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQualifiedFrameTime                    Time;                                              // 0x0010(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertMovieScenePlayerStatus                PlayerStatus;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSequencerState) == 0x000008, "Wrong alignment on FConcertSequencerState");
static_assert(sizeof(FConcertSequencerState) == 0x000028, "Wrong size on FConcertSequencerState");
static_assert(offsetof(FConcertSequencerState, SequenceObjectPath) == 0x000000, "Member 'FConcertSequencerState::SequenceObjectPath' has a wrong offset!");
static_assert(offsetof(FConcertSequencerState, Time) == 0x000010, "Member 'FConcertSequencerState::Time' has a wrong offset!");
static_assert(offsetof(FConcertSequencerState, PlayerStatus) == 0x000020, "Member 'FConcertSequencerState::PlayerStatus' has a wrong offset!");
static_assert(offsetof(FConcertSequencerState, PlaybackSpeed) == 0x000024, "Member 'FConcertSequencerState::PlaybackSpeed' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSequencerStateSyncEvent
// 0x0010 (0x0010 - 0x0000)
struct FConcertSequencerStateSyncEvent final
{
public:
	TArray<struct FConcertSequencerState>         SequencerStates;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSequencerStateSyncEvent) == 0x000008, "Wrong alignment on FConcertSequencerStateSyncEvent");
static_assert(sizeof(FConcertSequencerStateSyncEvent) == 0x000010, "Wrong size on FConcertSequencerStateSyncEvent");
static_assert(offsetof(FConcertSequencerStateSyncEvent, SequencerStates) == 0x000000, "Member 'FConcertSequencerStateSyncEvent::SequencerStates' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSequencerStateEvent
// 0x0028 (0x0028 - 0x0000)
struct FConcertSequencerStateEvent final
{
public:
	struct FConcertSequencerState                 State;                                             // 0x0000(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSequencerStateEvent) == 0x000008, "Wrong alignment on FConcertSequencerStateEvent");
static_assert(sizeof(FConcertSequencerStateEvent) == 0x000028, "Wrong size on FConcertSequencerStateEvent");
static_assert(offsetof(FConcertSequencerStateEvent, State) == 0x000000, "Member 'FConcertSequencerStateEvent::State' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSequencerCloseEvent
// 0x0018 (0x0018 - 0x0000)
struct FConcertSequencerCloseEvent final
{
public:
	class FString                                 SequenceObjectPath;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMasterClose;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSequencerCloseEvent) == 0x000008, "Wrong alignment on FConcertSequencerCloseEvent");
static_assert(sizeof(FConcertSequencerCloseEvent) == 0x000018, "Wrong size on FConcertSequencerCloseEvent");
static_assert(offsetof(FConcertSequencerCloseEvent, SequenceObjectPath) == 0x000000, "Member 'FConcertSequencerCloseEvent::SequenceObjectPath' has a wrong offset!");
static_assert(offsetof(FConcertSequencerCloseEvent, bMasterClose) == 0x000010, "Member 'FConcertSequencerCloseEvent::bMasterClose' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSequencerOpenEvent
// 0x0010 (0x0010 - 0x0000)
struct FConcertSequencerOpenEvent final
{
public:
	class FString                                 SequenceObjectPath;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSequencerOpenEvent) == 0x000008, "Wrong alignment on FConcertSequencerOpenEvent");
static_assert(sizeof(FConcertSequencerOpenEvent) == 0x000010, "Wrong size on FConcertSequencerOpenEvent");
static_assert(offsetof(FConcertSequencerOpenEvent, SequenceObjectPath) == 0x000000, "Member 'FConcertSequencerOpenEvent::SequenceObjectPath' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncActivitySummary
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FConcertSyncActivitySummary
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSyncActivitySummary) == 0x000008, "Wrong alignment on FConcertSyncActivitySummary");
static_assert(sizeof(FConcertSyncActivitySummary) == 0x000008, "Wrong size on FConcertSyncActivitySummary");

// ScriptStruct ConcertSyncCore.ConcertSyncPackageActivitySummary
// 0x0018 (0x0020 - 0x0008)
struct FConcertSyncPackageActivitySummary final : public FConcertSyncActivitySummary
{
public:
	class FName                                   PackageName;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewPackageName;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertPackageUpdateType                     PackageUpdateType;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSave;                                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreSave;                                          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSyncPackageActivitySummary) == 0x000008, "Wrong alignment on FConcertSyncPackageActivitySummary");
static_assert(sizeof(FConcertSyncPackageActivitySummary) == 0x000020, "Wrong size on FConcertSyncPackageActivitySummary");
static_assert(offsetof(FConcertSyncPackageActivitySummary, PackageName) == 0x000008, "Member 'FConcertSyncPackageActivitySummary::PackageName' has a wrong offset!");
static_assert(offsetof(FConcertSyncPackageActivitySummary, NewPackageName) == 0x000010, "Member 'FConcertSyncPackageActivitySummary::NewPackageName' has a wrong offset!");
static_assert(offsetof(FConcertSyncPackageActivitySummary, PackageUpdateType) == 0x000018, "Member 'FConcertSyncPackageActivitySummary::PackageUpdateType' has a wrong offset!");
static_assert(offsetof(FConcertSyncPackageActivitySummary, bAutoSave) == 0x000019, "Member 'FConcertSyncPackageActivitySummary::bAutoSave' has a wrong offset!");
static_assert(offsetof(FConcertSyncPackageActivitySummary, bPreSave) == 0x00001A, "Member 'FConcertSyncPackageActivitySummary::bPreSave' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncTransactionActivitySummary
// 0x0040 (0x0048 - 0x0008)
struct FConcertSyncTransactionActivitySummary final : public FConcertSyncActivitySummary
{
public:
	EConcertSyncTransactionActivitySummaryType    TransactionSummaryType;                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TransactionTitle;                                  // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	class FName                                   PrimaryObjectName;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrimaryPackageName;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewObjectName;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumActions;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSyncTransactionActivitySummary) == 0x000008, "Wrong alignment on FConcertSyncTransactionActivitySummary");
static_assert(sizeof(FConcertSyncTransactionActivitySummary) == 0x000048, "Wrong size on FConcertSyncTransactionActivitySummary");
static_assert(offsetof(FConcertSyncTransactionActivitySummary, TransactionSummaryType) == 0x000008, "Member 'FConcertSyncTransactionActivitySummary::TransactionSummaryType' has a wrong offset!");
static_assert(offsetof(FConcertSyncTransactionActivitySummary, TransactionTitle) == 0x000010, "Member 'FConcertSyncTransactionActivitySummary::TransactionTitle' has a wrong offset!");
static_assert(offsetof(FConcertSyncTransactionActivitySummary, PrimaryObjectName) == 0x000028, "Member 'FConcertSyncTransactionActivitySummary::PrimaryObjectName' has a wrong offset!");
static_assert(offsetof(FConcertSyncTransactionActivitySummary, PrimaryPackageName) == 0x000030, "Member 'FConcertSyncTransactionActivitySummary::PrimaryPackageName' has a wrong offset!");
static_assert(offsetof(FConcertSyncTransactionActivitySummary, NewObjectName) == 0x000038, "Member 'FConcertSyncTransactionActivitySummary::NewObjectName' has a wrong offset!");
static_assert(offsetof(FConcertSyncTransactionActivitySummary, NumActions) == 0x000040, "Member 'FConcertSyncTransactionActivitySummary::NumActions' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncLockActivitySummary
// 0x0018 (0x0020 - 0x0008)
struct FConcertSyncLockActivitySummary final : public FConcertSyncActivitySummary
{
public:
	EConcertSyncLockEventType                     LockEventType;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PrimaryResourceName;                               // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrimaryPackageName;                                // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumResources;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncLockActivitySummary) == 0x000008, "Wrong alignment on FConcertSyncLockActivitySummary");
static_assert(sizeof(FConcertSyncLockActivitySummary) == 0x000020, "Wrong size on FConcertSyncLockActivitySummary");
static_assert(offsetof(FConcertSyncLockActivitySummary, LockEventType) == 0x000008, "Member 'FConcertSyncLockActivitySummary::LockEventType' has a wrong offset!");
static_assert(offsetof(FConcertSyncLockActivitySummary, PrimaryResourceName) == 0x00000C, "Member 'FConcertSyncLockActivitySummary::PrimaryResourceName' has a wrong offset!");
static_assert(offsetof(FConcertSyncLockActivitySummary, PrimaryPackageName) == 0x000014, "Member 'FConcertSyncLockActivitySummary::PrimaryPackageName' has a wrong offset!");
static_assert(offsetof(FConcertSyncLockActivitySummary, NumResources) == 0x00001C, "Member 'FConcertSyncLockActivitySummary::NumResources' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncConnectionActivitySummary
// 0x0008 (0x0010 - 0x0008)
struct FConcertSyncConnectionActivitySummary final : public FConcertSyncActivitySummary
{
public:
	EConcertSyncConnectionEventType               ConnectionEventType;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSyncConnectionActivitySummary) == 0x000008, "Wrong alignment on FConcertSyncConnectionActivitySummary");
static_assert(sizeof(FConcertSyncConnectionActivitySummary) == 0x000010, "Wrong size on FConcertSyncConnectionActivitySummary");
static_assert(offsetof(FConcertSyncConnectionActivitySummary, ConnectionEventType) == 0x000008, "Member 'FConcertSyncConnectionActivitySummary::ConnectionEventType' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncActivity
// 0x0058 (0x0058 - 0x0000)
struct FConcertSyncActivity
{
public:
	int64                                         ActivityId;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnored;                                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  EndpointId;                                        // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EventTime;                                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertSyncActivityEventType                 EventType;                                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         EventId;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSessionSerializedCborPayload   EventSummary;                                      // 0x0038(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncActivity) == 0x000008, "Wrong alignment on FConcertSyncActivity");
static_assert(sizeof(FConcertSyncActivity) == 0x000058, "Wrong size on FConcertSyncActivity");
static_assert(offsetof(FConcertSyncActivity, ActivityId) == 0x000000, "Member 'FConcertSyncActivity::ActivityId' has a wrong offset!");
static_assert(offsetof(FConcertSyncActivity, bIgnored) == 0x000008, "Member 'FConcertSyncActivity::bIgnored' has a wrong offset!");
static_assert(offsetof(FConcertSyncActivity, EndpointId) == 0x00000C, "Member 'FConcertSyncActivity::EndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSyncActivity, EventTime) == 0x000020, "Member 'FConcertSyncActivity::EventTime' has a wrong offset!");
static_assert(offsetof(FConcertSyncActivity, EventType) == 0x000028, "Member 'FConcertSyncActivity::EventType' has a wrong offset!");
static_assert(offsetof(FConcertSyncActivity, EventId) == 0x000030, "Member 'FConcertSyncActivity::EventId' has a wrong offset!");
static_assert(offsetof(FConcertSyncActivity, EventSummary) == 0x000038, "Member 'FConcertSyncActivity::EventSummary' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertPackageInfo
// 0x0038 (0x0038 - 0x0000)
struct FConcertPackageInfo final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewPackageName;                                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageFileExtension;                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertPackageUpdateType                     PackageUpdateType;                                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TransactionEventIdAtSave;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreSave;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSave;                                         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertPackageInfo) == 0x000008, "Wrong alignment on FConcertPackageInfo");
static_assert(sizeof(FConcertPackageInfo) == 0x000038, "Wrong size on FConcertPackageInfo");
static_assert(offsetof(FConcertPackageInfo, PackageName) == 0x000000, "Member 'FConcertPackageInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FConcertPackageInfo, NewPackageName) == 0x000008, "Member 'FConcertPackageInfo::NewPackageName' has a wrong offset!");
static_assert(offsetof(FConcertPackageInfo, PackageFileExtension) == 0x000010, "Member 'FConcertPackageInfo::PackageFileExtension' has a wrong offset!");
static_assert(offsetof(FConcertPackageInfo, PackageUpdateType) == 0x000020, "Member 'FConcertPackageInfo::PackageUpdateType' has a wrong offset!");
static_assert(offsetof(FConcertPackageInfo, TransactionEventIdAtSave) == 0x000028, "Member 'FConcertPackageInfo::TransactionEventIdAtSave' has a wrong offset!");
static_assert(offsetof(FConcertPackageInfo, bPreSave) == 0x000030, "Member 'FConcertPackageInfo::bPreSave' has a wrong offset!");
static_assert(offsetof(FConcertPackageInfo, bAutoSave) == 0x000031, "Member 'FConcertPackageInfo::bAutoSave' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertPackage
// 0x0058 (0x0058 - 0x0000)
struct FConcertPackage final
{
public:
	struct FConcertPackageInfo                    Info;                                              // 0x0000(0x0038)(NativeAccessSpecifierPublic)
	TArray<uint8>                                 PackageData;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileId;                                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertPackage) == 0x000008, "Wrong alignment on FConcertPackage");
static_assert(sizeof(FConcertPackage) == 0x000058, "Wrong size on FConcertPackage");
static_assert(offsetof(FConcertPackage, Info) == 0x000000, "Member 'FConcertPackage::Info' has a wrong offset!");
static_assert(offsetof(FConcertPackage, PackageData) == 0x000038, "Member 'FConcertPackage::PackageData' has a wrong offset!");
static_assert(offsetof(FConcertPackage, FileId) == 0x000048, "Member 'FConcertPackage::FileId' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncPackageEvent
// 0x0060 (0x0060 - 0x0000)
struct FConcertSyncPackageEvent final
{
public:
	int64                                         PackageRevision;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertPackage                        Package;                                           // 0x0008(0x0058)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncPackageEvent) == 0x000008, "Wrong alignment on FConcertSyncPackageEvent");
static_assert(sizeof(FConcertSyncPackageEvent) == 0x000060, "Wrong size on FConcertSyncPackageEvent");
static_assert(offsetof(FConcertSyncPackageEvent, PackageRevision) == 0x000000, "Member 'FConcertSyncPackageEvent::PackageRevision' has a wrong offset!");
static_assert(offsetof(FConcertSyncPackageEvent, Package) == 0x000008, "Member 'FConcertSyncPackageEvent::Package' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncPackageActivity
// 0x0060 (0x00B8 - 0x0058)
struct FConcertSyncPackageActivity final : public FConcertSyncActivity
{
public:
	struct FConcertSyncPackageEvent               EventData;                                         // 0x0058(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncPackageActivity) == 0x000008, "Wrong alignment on FConcertSyncPackageActivity");
static_assert(sizeof(FConcertSyncPackageActivity) == 0x0000B8, "Wrong size on FConcertSyncPackageActivity");
static_assert(offsetof(FConcertSyncPackageActivity, EventData) == 0x000058, "Member 'FConcertSyncPackageActivity::EventData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertObjectId
// 0x002C (0x002C - 0x0000)
struct FConcertObjectId final
{
public:
	class FName                                   ObjectClassPathName;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectPackageName;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectName;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectOuterPathName;                               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectExternalPackageName;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ObjectPersistentFlags;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertObjectId) == 0x000004, "Wrong alignment on FConcertObjectId");
static_assert(sizeof(FConcertObjectId) == 0x00002C, "Wrong size on FConcertObjectId");
static_assert(offsetof(FConcertObjectId, ObjectClassPathName) == 0x000000, "Member 'FConcertObjectId::ObjectClassPathName' has a wrong offset!");
static_assert(offsetof(FConcertObjectId, ObjectPackageName) == 0x000008, "Member 'FConcertObjectId::ObjectPackageName' has a wrong offset!");
static_assert(offsetof(FConcertObjectId, ObjectName) == 0x000010, "Member 'FConcertObjectId::ObjectName' has a wrong offset!");
static_assert(offsetof(FConcertObjectId, ObjectOuterPathName) == 0x000018, "Member 'FConcertObjectId::ObjectOuterPathName' has a wrong offset!");
static_assert(offsetof(FConcertObjectId, ObjectExternalPackageName) == 0x000020, "Member 'FConcertObjectId::ObjectExternalPackageName' has a wrong offset!");
static_assert(offsetof(FConcertObjectId, ObjectPersistentFlags) == 0x000028, "Member 'FConcertObjectId::ObjectPersistentFlags' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSerializedObjectData
// 0x0038 (0x0038 - 0x0000)
struct FConcertSerializedObjectData final
{
public:
	bool                                          bAllowCreate;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPendingKill;                                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NewPackageName;                                    // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewName;                                           // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewOuterPathName;                                  // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewExternalPackageName;                            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 SerializedData;                                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSerializedObjectData) == 0x000008, "Wrong alignment on FConcertSerializedObjectData");
static_assert(sizeof(FConcertSerializedObjectData) == 0x000038, "Wrong size on FConcertSerializedObjectData");
static_assert(offsetof(FConcertSerializedObjectData, bAllowCreate) == 0x000000, "Member 'FConcertSerializedObjectData::bAllowCreate' has a wrong offset!");
static_assert(offsetof(FConcertSerializedObjectData, bIsPendingKill) == 0x000001, "Member 'FConcertSerializedObjectData::bIsPendingKill' has a wrong offset!");
static_assert(offsetof(FConcertSerializedObjectData, NewPackageName) == 0x000004, "Member 'FConcertSerializedObjectData::NewPackageName' has a wrong offset!");
static_assert(offsetof(FConcertSerializedObjectData, NewName) == 0x00000C, "Member 'FConcertSerializedObjectData::NewName' has a wrong offset!");
static_assert(offsetof(FConcertSerializedObjectData, NewOuterPathName) == 0x000014, "Member 'FConcertSerializedObjectData::NewOuterPathName' has a wrong offset!");
static_assert(offsetof(FConcertSerializedObjectData, NewExternalPackageName) == 0x00001C, "Member 'FConcertSerializedObjectData::NewExternalPackageName' has a wrong offset!");
static_assert(offsetof(FConcertSerializedObjectData, SerializedData) == 0x000028, "Member 'FConcertSerializedObjectData::SerializedData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSerializedPropertyData
// 0x0018 (0x0018 - 0x0000)
struct FConcertSerializedPropertyData final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SerializedData;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSerializedPropertyData) == 0x000008, "Wrong alignment on FConcertSerializedPropertyData");
static_assert(sizeof(FConcertSerializedPropertyData) == 0x000018, "Wrong size on FConcertSerializedPropertyData");
static_assert(offsetof(FConcertSerializedPropertyData, PropertyName) == 0x000000, "Member 'FConcertSerializedPropertyData::PropertyName' has a wrong offset!");
static_assert(offsetof(FConcertSerializedPropertyData, SerializedData) == 0x000008, "Member 'FConcertSerializedPropertyData::SerializedData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertExportedObject
// 0x0088 (0x0088 - 0x0000)
struct FConcertExportedObject final
{
public:
	struct FConcertObjectId                       ObjectId;                                          // 0x0000(0x002C)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ObjectPathDepth;                                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSerializedObjectData           ObjectData;                                        // 0x0030(0x0038)(NativeAccessSpecifierPublic)
	TArray<struct FConcertSerializedPropertyData> PropertyDatas;                                     // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SerializedAnnotationData;                          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertExportedObject) == 0x000008, "Wrong alignment on FConcertExportedObject");
static_assert(sizeof(FConcertExportedObject) == 0x000088, "Wrong size on FConcertExportedObject");
static_assert(offsetof(FConcertExportedObject, ObjectId) == 0x000000, "Member 'FConcertExportedObject::ObjectId' has a wrong offset!");
static_assert(offsetof(FConcertExportedObject, ObjectPathDepth) == 0x00002C, "Member 'FConcertExportedObject::ObjectPathDepth' has a wrong offset!");
static_assert(offsetof(FConcertExportedObject, ObjectData) == 0x000030, "Member 'FConcertExportedObject::ObjectData' has a wrong offset!");
static_assert(offsetof(FConcertExportedObject, PropertyDatas) == 0x000068, "Member 'FConcertExportedObject::PropertyDatas' has a wrong offset!");
static_assert(offsetof(FConcertExportedObject, SerializedAnnotationData) == 0x000078, "Member 'FConcertExportedObject::SerializedAnnotationData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertTransactionEventBase
// 0x0088 (0x0088 - 0x0000)
struct FConcertTransactionEventBase
{
public:
	struct FGuid                                  TransactionId;                                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OperationId;                                       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TransactionEndpointId;                             // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TransactionUpdateIndex;                            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VersionIndex;                                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ModifiedPackages;                                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertObjectId                       PrimaryObjectId;                                   // 0x0048(0x002C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConcertExportedObject>         ExportedObjects;                                   // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertTransactionEventBase) == 0x000008, "Wrong alignment on FConcertTransactionEventBase");
static_assert(sizeof(FConcertTransactionEventBase) == 0x000088, "Wrong size on FConcertTransactionEventBase");
static_assert(offsetof(FConcertTransactionEventBase, TransactionId) == 0x000000, "Member 'FConcertTransactionEventBase::TransactionId' has a wrong offset!");
static_assert(offsetof(FConcertTransactionEventBase, OperationId) == 0x000010, "Member 'FConcertTransactionEventBase::OperationId' has a wrong offset!");
static_assert(offsetof(FConcertTransactionEventBase, TransactionEndpointId) == 0x000020, "Member 'FConcertTransactionEventBase::TransactionEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertTransactionEventBase, TransactionUpdateIndex) == 0x000030, "Member 'FConcertTransactionEventBase::TransactionUpdateIndex' has a wrong offset!");
static_assert(offsetof(FConcertTransactionEventBase, VersionIndex) == 0x000034, "Member 'FConcertTransactionEventBase::VersionIndex' has a wrong offset!");
static_assert(offsetof(FConcertTransactionEventBase, ModifiedPackages) == 0x000038, "Member 'FConcertTransactionEventBase::ModifiedPackages' has a wrong offset!");
static_assert(offsetof(FConcertTransactionEventBase, PrimaryObjectId) == 0x000048, "Member 'FConcertTransactionEventBase::PrimaryObjectId' has a wrong offset!");
static_assert(offsetof(FConcertTransactionEventBase, ExportedObjects) == 0x000078, "Member 'FConcertTransactionEventBase::ExportedObjects' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertTransactionFinalizedEvent
// 0x0028 (0x00B0 - 0x0088)
struct FConcertTransactionFinalizedEvent final : public FConcertTransactionEventBase
{
public:
	struct FConcertLocalIdentifierState           LocalIdentifierState;                              // 0x0088(0x0010)(NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0098(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertTransactionFinalizedEvent) == 0x000008, "Wrong alignment on FConcertTransactionFinalizedEvent");
static_assert(sizeof(FConcertTransactionFinalizedEvent) == 0x0000B0, "Wrong size on FConcertTransactionFinalizedEvent");
static_assert(offsetof(FConcertTransactionFinalizedEvent, LocalIdentifierState) == 0x000088, "Member 'FConcertTransactionFinalizedEvent::LocalIdentifierState' has a wrong offset!");
static_assert(offsetof(FConcertTransactionFinalizedEvent, Title) == 0x000098, "Member 'FConcertTransactionFinalizedEvent::Title' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncTransactionEvent
// 0x00B0 (0x00B0 - 0x0000)
struct FConcertSyncTransactionEvent final
{
public:
	struct FConcertTransactionFinalizedEvent      Transaction;                                       // 0x0000(0x00B0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncTransactionEvent) == 0x000008, "Wrong alignment on FConcertSyncTransactionEvent");
static_assert(sizeof(FConcertSyncTransactionEvent) == 0x0000B0, "Wrong size on FConcertSyncTransactionEvent");
static_assert(offsetof(FConcertSyncTransactionEvent, Transaction) == 0x000000, "Member 'FConcertSyncTransactionEvent::Transaction' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncTransactionActivity
// 0x00B0 (0x0108 - 0x0058)
struct FConcertSyncTransactionActivity final : public FConcertSyncActivity
{
public:
	struct FConcertSyncTransactionEvent           EventData;                                         // 0x0058(0x00B0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncTransactionActivity) == 0x000008, "Wrong alignment on FConcertSyncTransactionActivity");
static_assert(sizeof(FConcertSyncTransactionActivity) == 0x000108, "Wrong size on FConcertSyncTransactionActivity");
static_assert(offsetof(FConcertSyncTransactionActivity, EventData) == 0x000058, "Member 'FConcertSyncTransactionActivity::EventData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncLockEvent
// 0x0018 (0x0018 - 0x0000)
struct FConcertSyncLockEvent final
{
public:
	EConcertSyncLockEventType                     LockEventType;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ResourceNames;                                     // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncLockEvent) == 0x000008, "Wrong alignment on FConcertSyncLockEvent");
static_assert(sizeof(FConcertSyncLockEvent) == 0x000018, "Wrong size on FConcertSyncLockEvent");
static_assert(offsetof(FConcertSyncLockEvent, LockEventType) == 0x000000, "Member 'FConcertSyncLockEvent::LockEventType' has a wrong offset!");
static_assert(offsetof(FConcertSyncLockEvent, ResourceNames) == 0x000008, "Member 'FConcertSyncLockEvent::ResourceNames' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncLockActivity
// 0x0018 (0x0070 - 0x0058)
struct FConcertSyncLockActivity final : public FConcertSyncActivity
{
public:
	struct FConcertSyncLockEvent                  EventData;                                         // 0x0058(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncLockActivity) == 0x000008, "Wrong alignment on FConcertSyncLockActivity");
static_assert(sizeof(FConcertSyncLockActivity) == 0x000070, "Wrong size on FConcertSyncLockActivity");
static_assert(offsetof(FConcertSyncLockActivity, EventData) == 0x000058, "Member 'FConcertSyncLockActivity::EventData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncConnectionEvent
// 0x0001 (0x0001 - 0x0000)
struct FConcertSyncConnectionEvent final
{
public:
	EConcertSyncConnectionEventType               ConnectionEventType;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncConnectionEvent) == 0x000001, "Wrong alignment on FConcertSyncConnectionEvent");
static_assert(sizeof(FConcertSyncConnectionEvent) == 0x000001, "Wrong size on FConcertSyncConnectionEvent");
static_assert(offsetof(FConcertSyncConnectionEvent, ConnectionEventType) == 0x000000, "Member 'FConcertSyncConnectionEvent::ConnectionEventType' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncConnectionActivity
// 0x0008 (0x0060 - 0x0058)
struct FConcertSyncConnectionActivity final : public FConcertSyncActivity
{
public:
	struct FConcertSyncConnectionEvent            EventData;                                         // 0x0058(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSyncConnectionActivity) == 0x000008, "Wrong alignment on FConcertSyncConnectionActivity");
static_assert(sizeof(FConcertSyncConnectionActivity) == 0x000060, "Wrong size on FConcertSyncConnectionActivity");
static_assert(offsetof(FConcertSyncConnectionActivity, EventData) == 0x000058, "Member 'FConcertSyncConnectionActivity::EventData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncPackageEventMetaData
// 0x0040 (0x0040 - 0x0000)
struct FConcertSyncPackageEventMetaData final
{
public:
	int64                                         PackageRevision;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertPackageInfo                    PackageInfo;                                       // 0x0008(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncPackageEventMetaData) == 0x000008, "Wrong alignment on FConcertSyncPackageEventMetaData");
static_assert(sizeof(FConcertSyncPackageEventMetaData) == 0x000040, "Wrong size on FConcertSyncPackageEventMetaData");
static_assert(offsetof(FConcertSyncPackageEventMetaData, PackageRevision) == 0x000000, "Member 'FConcertSyncPackageEventMetaData::PackageRevision' has a wrong offset!");
static_assert(offsetof(FConcertSyncPackageEventMetaData, PackageInfo) == 0x000008, "Member 'FConcertSyncPackageEventMetaData::PackageInfo' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncEndpointData
// 0x00B8 (0x00B8 - 0x0000)
struct FConcertSyncEndpointData final
{
public:
	struct FConcertClientInfo                     ClientInfo;                                        // 0x0000(0x00B8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncEndpointData) == 0x000008, "Wrong alignment on FConcertSyncEndpointData");
static_assert(sizeof(FConcertSyncEndpointData) == 0x0000B8, "Wrong size on FConcertSyncEndpointData");
static_assert(offsetof(FConcertSyncEndpointData, ClientInfo) == 0x000000, "Member 'FConcertSyncEndpointData::ClientInfo' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncEndpointIdAndData
// 0x00C8 (0x00C8 - 0x0000)
struct FConcertSyncEndpointIdAndData final
{
public:
	struct FGuid                                  EndpointId;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSyncEndpointData               EndpointData;                                      // 0x0010(0x00B8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncEndpointIdAndData) == 0x000008, "Wrong alignment on FConcertSyncEndpointIdAndData");
static_assert(sizeof(FConcertSyncEndpointIdAndData) == 0x0000C8, "Wrong size on FConcertSyncEndpointIdAndData");
static_assert(offsetof(FConcertSyncEndpointIdAndData, EndpointId) == 0x000000, "Member 'FConcertSyncEndpointIdAndData::EndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSyncEndpointIdAndData, EndpointData) == 0x000010, "Member 'FConcertSyncEndpointIdAndData::EndpointData' has a wrong offset!");

// ScriptStruct ConcertSyncCore.TransactionClassFilter
// 0x0028 (0x0028 - 0x0000)
struct FTransactionClassFilter final
{
public:
	struct FSoftClassPath                         ObjectOuterClass;                                  // 0x0000(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                 ObjectClasses;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransactionClassFilter) == 0x000008, "Wrong alignment on FTransactionClassFilter");
static_assert(sizeof(FTransactionClassFilter) == 0x000028, "Wrong size on FTransactionClassFilter");
static_assert(offsetof(FTransactionClassFilter, ObjectOuterClass) == 0x000000, "Member 'FTransactionClassFilter::ObjectOuterClass' has a wrong offset!");
static_assert(offsetof(FTransactionClassFilter, ObjectClasses) == 0x000018, "Member 'FTransactionClassFilter::ObjectClasses' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertTransactionRejectedEvent
// 0x0010 (0x0010 - 0x0000)
struct FConcertTransactionRejectedEvent final
{
public:
	struct FGuid                                  TransactionId;                                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertTransactionRejectedEvent) == 0x000004, "Wrong alignment on FConcertTransactionRejectedEvent");
static_assert(sizeof(FConcertTransactionRejectedEvent) == 0x000010, "Wrong size on FConcertTransactionRejectedEvent");
static_assert(offsetof(FConcertTransactionRejectedEvent, TransactionId) == 0x000000, "Member 'FConcertTransactionRejectedEvent::TransactionId' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertTransactionSnapshotEvent
// 0x0000 (0x0088 - 0x0088)
struct FConcertTransactionSnapshotEvent final : public FConcertTransactionEventBase
{
};
static_assert(alignof(FConcertTransactionSnapshotEvent) == 0x000008, "Wrong alignment on FConcertTransactionSnapshotEvent");
static_assert(sizeof(FConcertTransactionSnapshotEvent) == 0x000088, "Wrong size on FConcertTransactionSnapshotEvent");

// ScriptStruct ConcertSyncCore.ConcertIgnoreActivityStateChangedEvent
// 0x0014 (0x0014 - 0x0000)
struct FConcertIgnoreActivityStateChangedEvent final
{
public:
	struct FGuid                                  EndpointId;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertIgnoreActivityStateChangedEvent) == 0x000004, "Wrong alignment on FConcertIgnoreActivityStateChangedEvent");
static_assert(sizeof(FConcertIgnoreActivityStateChangedEvent) == 0x000014, "Wrong size on FConcertIgnoreActivityStateChangedEvent");
static_assert(offsetof(FConcertIgnoreActivityStateChangedEvent, EndpointId) == 0x000000, "Member 'FConcertIgnoreActivityStateChangedEvent::EndpointId' has a wrong offset!");
static_assert(offsetof(FConcertIgnoreActivityStateChangedEvent, bIgnore) == 0x000010, "Member 'FConcertIgnoreActivityStateChangedEvent::bIgnore' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertPlaySessionEvent
// 0x0020 (0x0020 - 0x0000)
struct FConcertPlaySessionEvent final
{
public:
	EConcertPlaySessionEventType                  EventType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayEndpointId;                                    // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayPackageName;                                   // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSimulating;                                     // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertPlaySessionEvent) == 0x000004, "Wrong alignment on FConcertPlaySessionEvent");
static_assert(sizeof(FConcertPlaySessionEvent) == 0x000020, "Wrong size on FConcertPlaySessionEvent");
static_assert(offsetof(FConcertPlaySessionEvent, EventType) == 0x000000, "Member 'FConcertPlaySessionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FConcertPlaySessionEvent, PlayEndpointId) == 0x000004, "Member 'FConcertPlaySessionEvent::PlayEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertPlaySessionEvent, PlayPackageName) == 0x000014, "Member 'FConcertPlaySessionEvent::PlayPackageName' has a wrong offset!");
static_assert(offsetof(FConcertPlaySessionEvent, bIsSimulating) == 0x00001C, "Member 'FConcertPlaySessionEvent::bIsSimulating' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertResourceLockResponse
// 0x0058 (0x0058 - 0x0000)
struct FConcertResourceLockResponse final
{
public:
	TMap<class FName, struct FGuid>               FailedResources;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	EConcertResourceLockType                      LockType;                                          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertResourceLockResponse) == 0x000008, "Wrong alignment on FConcertResourceLockResponse");
static_assert(sizeof(FConcertResourceLockResponse) == 0x000058, "Wrong size on FConcertResourceLockResponse");
static_assert(offsetof(FConcertResourceLockResponse, FailedResources) == 0x000000, "Member 'FConcertResourceLockResponse::FailedResources' has a wrong offset!");
static_assert(offsetof(FConcertResourceLockResponse, LockType) == 0x000050, "Member 'FConcertResourceLockResponse::LockType' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertResourceLockRequest
// 0x0028 (0x0028 - 0x0000)
struct FConcertResourceLockRequest final
{
public:
	struct FGuid                                  ClientId;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ResourceNames;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertResourceLockType                      LockType;                                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertResourceLockRequest) == 0x000008, "Wrong alignment on FConcertResourceLockRequest");
static_assert(sizeof(FConcertResourceLockRequest) == 0x000028, "Wrong size on FConcertResourceLockRequest");
static_assert(offsetof(FConcertResourceLockRequest, ClientId) == 0x000000, "Member 'FConcertResourceLockRequest::ClientId' has a wrong offset!");
static_assert(offsetof(FConcertResourceLockRequest, ResourceNames) == 0x000010, "Member 'FConcertResourceLockRequest::ResourceNames' has a wrong offset!");
static_assert(offsetof(FConcertResourceLockRequest, LockType) == 0x000020, "Member 'FConcertResourceLockRequest::LockType' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertResourceLockEvent
// 0x0028 (0x0028 - 0x0000)
struct FConcertResourceLockEvent final
{
public:
	struct FGuid                                  ClientId;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ResourceNames;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertResourceLockType                      LockType;                                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertResourceLockEvent) == 0x000008, "Wrong alignment on FConcertResourceLockEvent");
static_assert(sizeof(FConcertResourceLockEvent) == 0x000028, "Wrong size on FConcertResourceLockEvent");
static_assert(offsetof(FConcertResourceLockEvent, ClientId) == 0x000000, "Member 'FConcertResourceLockEvent::ClientId' has a wrong offset!");
static_assert(offsetof(FConcertResourceLockEvent, ResourceNames) == 0x000010, "Member 'FConcertResourceLockEvent::ResourceNames' has a wrong offset!");
static_assert(offsetof(FConcertResourceLockEvent, LockType) == 0x000020, "Member 'FConcertResourceLockEvent::LockType' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertPackageRejectedEvent
// 0x0008 (0x0008 - 0x0000)
struct FConcertPackageRejectedEvent final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertPackageRejectedEvent) == 0x000004, "Wrong alignment on FConcertPackageRejectedEvent");
static_assert(sizeof(FConcertPackageRejectedEvent) == 0x000008, "Wrong size on FConcertPackageRejectedEvent");
static_assert(offsetof(FConcertPackageRejectedEvent, PackageName) == 0x000000, "Member 'FConcertPackageRejectedEvent::PackageName' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertPackageUpdateEvent
// 0x0058 (0x0058 - 0x0000)
struct FConcertPackageUpdateEvent final
{
public:
	struct FConcertPackage                        Package;                                           // 0x0000(0x0058)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertPackageUpdateEvent) == 0x000008, "Wrong alignment on FConcertPackageUpdateEvent");
static_assert(sizeof(FConcertPackageUpdateEvent) == 0x000058, "Wrong size on FConcertPackageUpdateEvent");
static_assert(offsetof(FConcertPackageUpdateEvent, Package) == 0x000000, "Member 'FConcertPackageUpdateEvent::Package' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncEventResponse
// 0x0020 (0x0020 - 0x0000)
struct FConcertSyncEventResponse final
{
public:
	struct FConcertSessionSerializedPayload       Event;                                             // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncEventResponse) == 0x000008, "Wrong alignment on FConcertSyncEventResponse");
static_assert(sizeof(FConcertSyncEventResponse) == 0x000020, "Wrong size on FConcertSyncEventResponse");
static_assert(offsetof(FConcertSyncEventResponse, Event) == 0x000000, "Member 'FConcertSyncEventResponse::Event' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertSyncEventRequest
// 0x0010 (0x0010 - 0x0000)
struct FConcertSyncEventRequest final
{
public:
	EConcertSyncActivityEventType                 EventType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         EventId;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSyncEventRequest) == 0x000008, "Wrong alignment on FConcertSyncEventRequest");
static_assert(sizeof(FConcertSyncEventRequest) == 0x000010, "Wrong size on FConcertSyncEventRequest");
static_assert(offsetof(FConcertSyncEventRequest, EventType) == 0x000000, "Member 'FConcertSyncEventRequest::EventType' has a wrong offset!");
static_assert(offsetof(FConcertSyncEventRequest, EventId) == 0x000008, "Member 'FConcertSyncEventRequest::EventId' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertWorkspaceSyncCompletedEvent
// 0x0001 (0x0001 - 0x0000)
struct FConcertWorkspaceSyncCompletedEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertWorkspaceSyncCompletedEvent) == 0x000001, "Wrong alignment on FConcertWorkspaceSyncCompletedEvent");
static_assert(sizeof(FConcertWorkspaceSyncCompletedEvent) == 0x000001, "Wrong size on FConcertWorkspaceSyncCompletedEvent");

// ScriptStruct ConcertSyncCore.ConcertWorkspaceSyncRequestedEvent
// 0x0018 (0x0018 - 0x0000)
struct FConcertWorkspaceSyncRequestedEvent final
{
public:
	int64                                         FirstActivityIdToSync;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LastActivityIdToSync;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLiveSync;                                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertWorkspaceSyncRequestedEvent) == 0x000008, "Wrong alignment on FConcertWorkspaceSyncRequestedEvent");
static_assert(sizeof(FConcertWorkspaceSyncRequestedEvent) == 0x000018, "Wrong size on FConcertWorkspaceSyncRequestedEvent");
static_assert(offsetof(FConcertWorkspaceSyncRequestedEvent, FirstActivityIdToSync) == 0x000000, "Member 'FConcertWorkspaceSyncRequestedEvent::FirstActivityIdToSync' has a wrong offset!");
static_assert(offsetof(FConcertWorkspaceSyncRequestedEvent, LastActivityIdToSync) == 0x000008, "Member 'FConcertWorkspaceSyncRequestedEvent::LastActivityIdToSync' has a wrong offset!");
static_assert(offsetof(FConcertWorkspaceSyncRequestedEvent, bEnableLiveSync) == 0x000010, "Member 'FConcertWorkspaceSyncRequestedEvent::bEnableLiveSync' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertWorkspaceSyncEventBase
// 0x0004 (0x0004 - 0x0000)
struct FConcertWorkspaceSyncEventBase
{
public:
	int32                                         NumRemainingSyncEvents;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertWorkspaceSyncEventBase) == 0x000004, "Wrong alignment on FConcertWorkspaceSyncEventBase");
static_assert(sizeof(FConcertWorkspaceSyncEventBase) == 0x000004, "Wrong size on FConcertWorkspaceSyncEventBase");
static_assert(offsetof(FConcertWorkspaceSyncEventBase, NumRemainingSyncEvents) == 0x000000, "Member 'FConcertWorkspaceSyncEventBase::NumRemainingSyncEvents' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertWorkspaceSyncLockEvent
// 0x0054 (0x0058 - 0x0004)
struct FConcertWorkspaceSyncLockEvent final : public FConcertWorkspaceSyncEventBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FGuid>               LockedResources;                                   // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertWorkspaceSyncLockEvent) == 0x000008, "Wrong alignment on FConcertWorkspaceSyncLockEvent");
static_assert(sizeof(FConcertWorkspaceSyncLockEvent) == 0x000058, "Wrong size on FConcertWorkspaceSyncLockEvent");
static_assert(offsetof(FConcertWorkspaceSyncLockEvent, LockedResources) == 0x000008, "Member 'FConcertWorkspaceSyncLockEvent::LockedResources' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertWorkspaceSyncActivityEvent
// 0x0024 (0x0028 - 0x0004)
struct FConcertWorkspaceSyncActivityEvent final : public FConcertWorkspaceSyncEventBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConcertSessionSerializedPayload       Activity;                                          // 0x0008(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertWorkspaceSyncActivityEvent) == 0x000008, "Wrong alignment on FConcertWorkspaceSyncActivityEvent");
static_assert(sizeof(FConcertWorkspaceSyncActivityEvent) == 0x000028, "Wrong size on FConcertWorkspaceSyncActivityEvent");
static_assert(offsetof(FConcertWorkspaceSyncActivityEvent, Activity) == 0x000008, "Member 'FConcertWorkspaceSyncActivityEvent::Activity' has a wrong offset!");

// ScriptStruct ConcertSyncCore.ConcertWorkspaceSyncEndpointEvent
// 0x00CC (0x00D0 - 0x0004)
struct FConcertWorkspaceSyncEndpointEvent final : public FConcertWorkspaceSyncEventBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConcertSyncEndpointIdAndData          Endpoint;                                          // 0x0008(0x00C8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertWorkspaceSyncEndpointEvent) == 0x000008, "Wrong alignment on FConcertWorkspaceSyncEndpointEvent");
static_assert(sizeof(FConcertWorkspaceSyncEndpointEvent) == 0x0000D0, "Wrong size on FConcertWorkspaceSyncEndpointEvent");
static_assert(offsetof(FConcertWorkspaceSyncEndpointEvent, Endpoint) == 0x000008, "Member 'FConcertWorkspaceSyncEndpointEvent::Endpoint' has a wrong offset!");

}

