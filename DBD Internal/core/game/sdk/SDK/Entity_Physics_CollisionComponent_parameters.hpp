#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Entity_Physics_CollisionComponent

#include "Basic.hpp"

#include "Entity_Physics_DOFMovementMode_structs.hpp"


namespace SDK::Params
{

// Function Entity_Physics_CollisionComponent.CollisionComponent.GetCollisionProfileName
// 0x0010 (0x0010 - 0x0000)
struct CollisionComponent_GetCollisionProfileName final
{
public:
	class FString                                 RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(CollisionComponent_GetCollisionProfileName) == 0x000008, "Wrong alignment on CollisionComponent_GetCollisionProfileName");
static_assert(sizeof(CollisionComponent_GetCollisionProfileName) == 0x000010, "Wrong size on CollisionComponent_GetCollisionProfileName");
static_assert(offsetof(CollisionComponent_GetCollisionProfileName, RetVal) == 0x000000, "Member 'CollisionComponent_GetCollisionProfileName::RetVal' has a wrong offset!");

// Function Entity_Physics_CollisionComponent.CollisionComponent.getEnabled
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_getEnabled final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(CollisionComponent_getEnabled) == 0x000001, "Wrong alignment on CollisionComponent_getEnabled");
static_assert(sizeof(CollisionComponent_getEnabled) == 0x000001, "Wrong size on CollisionComponent_getEnabled");

// Function Entity_Physics_CollisionComponent.CollisionComponent.getGravityEnabled
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_getGravityEnabled final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(CollisionComponent_getGravityEnabled) == 0x000001, "Wrong alignment on CollisionComponent_getGravityEnabled");
static_assert(sizeof(CollisionComponent_getGravityEnabled) == 0x000001, "Wrong size on CollisionComponent_getGravityEnabled");

// Function Entity_Physics_CollisionComponent.CollisionComponent.getMovable
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_getMovable final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(CollisionComponent_getMovable) == 0x000001, "Wrong alignment on CollisionComponent_getMovable");
static_assert(sizeof(CollisionComponent_getMovable) == 0x000001, "Wrong size on CollisionComponent_getMovable");

// Function Entity_Physics_CollisionComponent.CollisionComponent.getSendHitEventsOnCollide
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_getSendHitEventsOnCollide final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(CollisionComponent_getSendHitEventsOnCollide) == 0x000001, "Wrong alignment on CollisionComponent_getSendHitEventsOnCollide");
static_assert(sizeof(CollisionComponent_getSendHitEventsOnCollide) == 0x000001, "Wrong size on CollisionComponent_getSendHitEventsOnCollide");

// Function Entity_Physics_CollisionComponent.CollisionComponent.getSendOverlapEvents
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_getSendOverlapEvents final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(CollisionComponent_getSendOverlapEvents) == 0x000001, "Wrong alignment on CollisionComponent_getSendOverlapEvents");
static_assert(sizeof(CollisionComponent_getSendOverlapEvents) == 0x000001, "Wrong size on CollisionComponent_getSendOverlapEvents");

// Function Entity_Physics_CollisionComponent.CollisionComponent.getUseContinuousCollisionDetection
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_getUseContinuousCollisionDetection final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(CollisionComponent_getUseContinuousCollisionDetection) == 0x000001, "Wrong alignment on CollisionComponent_getUseContinuousCollisionDetection");
static_assert(sizeof(CollisionComponent_getUseContinuousCollisionDetection) == 0x000001, "Wrong size on CollisionComponent_getUseContinuousCollisionDetection");

// Function Entity_Physics_CollisionComponent.CollisionComponent.SetCollisionProfileName
// 0x0010 (0x0010 - 0x0000)
struct CollisionComponent_SetCollisionProfileName final
{
public:
	class FString                                 __verse_0x29B886CB_CollisionProfile;               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(CollisionComponent_SetCollisionProfileName) == 0x000008, "Wrong alignment on CollisionComponent_SetCollisionProfileName");
static_assert(sizeof(CollisionComponent_SetCollisionProfileName) == 0x000010, "Wrong size on CollisionComponent_SetCollisionProfileName");
static_assert(offsetof(CollisionComponent_SetCollisionProfileName, __verse_0x29B886CB_CollisionProfile) == 0x000000, "Member 'CollisionComponent_SetCollisionProfileName::__verse_0x29B886CB_CollisionProfile' has a wrong offset!");

// Function Entity_Physics_CollisionComponent.CollisionComponent.setCustomDegreeOfFreedomConstrain
// 0x0008 (0x0008 - 0x0000)
struct CollisionComponent_setCustomDegreeOfFreedomConstrain final
{
public:
	class UVector3*                               __verse_0x64488B5B_CustomMovementPlaneNormal;      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CollisionComponent_setCustomDegreeOfFreedomConstrain) == 0x000008, "Wrong alignment on CollisionComponent_setCustomDegreeOfFreedomConstrain");
static_assert(sizeof(CollisionComponent_setCustomDegreeOfFreedomConstrain) == 0x000008, "Wrong size on CollisionComponent_setCustomDegreeOfFreedomConstrain");
static_assert(offsetof(CollisionComponent_setCustomDegreeOfFreedomConstrain, __verse_0x64488B5B_CustomMovementPlaneNormal) == 0x000000, "Member 'CollisionComponent_setCustomDegreeOfFreedomConstrain::__verse_0x64488B5B_CustomMovementPlaneNormal' has a wrong offset!");

// Function Entity_Physics_CollisionComponent.CollisionComponent.setDegreeOfFreedomContraint
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_setDegreeOfFreedomContraint final
{
public:
	EDOFMovementMode                              __verse_0xC6FC7EEF_MovementMode;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CollisionComponent_setDegreeOfFreedomContraint) == 0x000001, "Wrong alignment on CollisionComponent_setDegreeOfFreedomContraint");
static_assert(sizeof(CollisionComponent_setDegreeOfFreedomContraint) == 0x000001, "Wrong size on CollisionComponent_setDegreeOfFreedomContraint");
static_assert(offsetof(CollisionComponent_setDegreeOfFreedomContraint, __verse_0xC6FC7EEF_MovementMode) == 0x000000, "Member 'CollisionComponent_setDegreeOfFreedomContraint::__verse_0xC6FC7EEF_MovementMode' has a wrong offset!");

// Function Entity_Physics_CollisionComponent.CollisionComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_SetEnabled final
{
public:
	uint8                                         __verse_0xD50E43B9_InIsEnabled : 1;                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor))
};
static_assert(alignof(CollisionComponent_SetEnabled) == 0x000001, "Wrong alignment on CollisionComponent_SetEnabled");
static_assert(sizeof(CollisionComponent_SetEnabled) == 0x000001, "Wrong size on CollisionComponent_SetEnabled");

// Function Entity_Physics_CollisionComponent.CollisionComponent.setGravityEnabled
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_setGravityEnabled final
{
public:
	uint8                                         __verse_0x322B83BC_EnableGravity : 1;              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor))
};
static_assert(alignof(CollisionComponent_setGravityEnabled) == 0x000001, "Wrong alignment on CollisionComponent_setGravityEnabled");
static_assert(sizeof(CollisionComponent_setGravityEnabled) == 0x000001, "Wrong size on CollisionComponent_setGravityEnabled");

// Function Entity_Physics_CollisionComponent.CollisionComponent.setMovable
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_setMovable final
{
public:
	uint8                                         __verse_0xD261A0E8_IsMovable : 1;                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor))
};
static_assert(alignof(CollisionComponent_setMovable) == 0x000001, "Wrong alignment on CollisionComponent_setMovable");
static_assert(sizeof(CollisionComponent_setMovable) == 0x000001, "Wrong size on CollisionComponent_setMovable");

// Function Entity_Physics_CollisionComponent.CollisionComponent.setSendHitEventsOnCollide
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_setSendHitEventsOnCollide final
{
public:
	uint8                                         __verse_0x9FB5B901_EnableHitEvents : 1;            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor))
};
static_assert(alignof(CollisionComponent_setSendHitEventsOnCollide) == 0x000001, "Wrong alignment on CollisionComponent_setSendHitEventsOnCollide");
static_assert(sizeof(CollisionComponent_setSendHitEventsOnCollide) == 0x000001, "Wrong size on CollisionComponent_setSendHitEventsOnCollide");

// Function Entity_Physics_CollisionComponent.CollisionComponent.setSendOverlapEvents
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_setSendOverlapEvents final
{
public:
	uint8                                         __verse_0xD2175A3C_EnableOverlapEvents : 1;        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor))
};
static_assert(alignof(CollisionComponent_setSendOverlapEvents) == 0x000001, "Wrong alignment on CollisionComponent_setSendOverlapEvents");
static_assert(sizeof(CollisionComponent_setSendOverlapEvents) == 0x000001, "Wrong size on CollisionComponent_setSendOverlapEvents");

// Function Entity_Physics_CollisionComponent.CollisionComponent.setUseContinuousCollisionDetection
// 0x0001 (0x0001 - 0x0000)
struct CollisionComponent_setUseContinuousCollisionDetection final
{
public:
	uint8                                         __verse_0xD79DBFC5_UseCCD : 1;                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor))
};
static_assert(alignof(CollisionComponent_setUseContinuousCollisionDetection) == 0x000001, "Wrong alignment on CollisionComponent_setUseContinuousCollisionDetection");
static_assert(sizeof(CollisionComponent_setUseContinuousCollisionDetection) == 0x000001, "Wrong size on CollisionComponent_setUseContinuousCollisionDetection");

// Function Entity_Physics_CollisionComponent.Context_CollisionComponent_WaitBeginOverlap.Update
// 0x0004 (0x0004 - 0x0000)
struct Context_CollisionComponent_WaitBeginOverlap_Update final
{
public:
	int32                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_CollisionComponent_WaitBeginOverlap_Update) == 0x000004, "Wrong alignment on Context_CollisionComponent_WaitBeginOverlap_Update");
static_assert(sizeof(Context_CollisionComponent_WaitBeginOverlap_Update) == 0x000004, "Wrong size on Context_CollisionComponent_WaitBeginOverlap_Update");
static_assert(offsetof(Context_CollisionComponent_WaitBeginOverlap_Update, RetVal) == 0x000000, "Member 'Context_CollisionComponent_WaitBeginOverlap_Update::RetVal' has a wrong offset!");

// Function Entity_Physics_CollisionComponent.Context_CollisionComponent_WaitEndOverlap.Update
// 0x0004 (0x0004 - 0x0000)
struct Context_CollisionComponent_WaitEndOverlap_Update final
{
public:
	int32                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_CollisionComponent_WaitEndOverlap_Update) == 0x000004, "Wrong alignment on Context_CollisionComponent_WaitEndOverlap_Update");
static_assert(sizeof(Context_CollisionComponent_WaitEndOverlap_Update) == 0x000004, "Wrong size on Context_CollisionComponent_WaitEndOverlap_Update");
static_assert(offsetof(Context_CollisionComponent_WaitEndOverlap_Update, RetVal) == 0x000000, "Member 'Context_CollisionComponent_WaitEndOverlap_Update::RetVal' has a wrong offset!");

// Function Entity_Physics_CollisionComponent.Context_CollisionComponent_WaitHit.Update
// 0x0004 (0x0004 - 0x0000)
struct Context_CollisionComponent_WaitHit_Update final
{
public:
	int32                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_CollisionComponent_WaitHit_Update) == 0x000004, "Wrong alignment on Context_CollisionComponent_WaitHit_Update");
static_assert(sizeof(Context_CollisionComponent_WaitHit_Update) == 0x000004, "Wrong size on Context_CollisionComponent_WaitHit_Update");
static_assert(offsetof(Context_CollisionComponent_WaitHit_Update, RetVal) == 0x000000, "Member 'Context_CollisionComponent_WaitHit_Update::RetVal' has a wrong offset!");

}

