#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ClamberingCodeRuntime

#include "Basic.hpp"

#include "ClamberingCodeRuntime_classes.hpp"
#include "ClamberingCodeRuntime_parameters.hpp"


namespace SDK
{

// Function ClamberingCodeRuntime.ClamberingComponent.BP_HandleClamberingStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EClamberingState                        OldClamberingState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EClamberingState                        NewClamberingState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_HandleClamberingStateChanged(const EClamberingState OldClamberingState, const EClamberingState NewClamberingState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleClamberingStateChanged");

	Params::ClamberingComponent_BP_HandleClamberingStateChanged Parms{};

	Parms.OldClamberingState = OldClamberingState;
	Parms.NewClamberingState = NewClamberingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_HandleSynchedActionStarted
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FSynchedActionInfo               SynchedActionInfo                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_HandleSynchedActionStarted(const struct FSynchedActionInfo& SynchedActionInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleSynchedActionStarted");

	Params::ClamberingComponent_BP_HandleSynchedActionStarted Parms{};

	Parms.SynchedActionInfo = std::move(SynchedActionInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.DrawDebugHUD
// (Final, Native, Protected)
// Parameters:
// class AHUD*                             HUD                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::DrawDebugHUD(class AHUD* HUD, class UCanvas* Canvas)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DrawDebugHUD");

	Params::ClamberingComponent_DrawDebugHUD Parms{};

	Parms.HUD = HUD;
	Parms.Canvas = Canvas;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleClamberingTargetInActivationRange
// (Event, Protected, BlueprintEvent)

void UClamberingComponent::HandleClamberingTargetInActivationRange()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleClamberingTargetInActivationRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleClamberingTargetOutOfActivationRange
// (Event, Protected, BlueprintEvent)

void UClamberingComponent::HandleClamberingTargetOutOfActivationRange()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleClamberingTargetOutOfActivationRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerASCInitialized
// (Final, Native, Protected)
// Parameters:
// class UFortAbilitySystemComponent*      AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerASCInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent, class AFortPlayerPawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOwnerASCInitialized");

	Params::ClamberingComponent_HandleOwnerASCInitialized Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AffectedPawn = AffectedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerASCInvalidated
// (Final, Native, Protected)

void UClamberingComponent::HandleOwnerASCInvalidated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOwnerASCInvalidated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerDBNO
// (Final, Native, Protected)

void UClamberingComponent::HandleOwnerDBNO()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOwnerDBNO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerDied
// (Final, Native, Protected)
// Parameters:
// class AFortPawn*                        DeadPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerDied(class AFortPawn* DeadPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOwnerDied");

	Params::ClamberingComponent_HandleOwnerDied Parms{};

	Parms.DeadPawn = DeadPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerJumpInput
// (Final, Native, Protected)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerJumpInput(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOwnerJumpInput");

	Params::ClamberingComponent_HandleOwnerJumpInput Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerMovementModeChanged
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PreviousMovementMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOwnerMovementModeChanged");

	Params::ClamberingComponent_HandleOwnerMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PreviousMovementMode = PreviousMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerTeleported
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AFortPawn*                        TeleportedOwner                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerTeleported(class AFortPawn* TeleportedOwner)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOwnerTeleported");

	Params::ClamberingComponent_HandleOwnerTeleported Parms{};

	Parms.TeleportedOwner = TeleportedOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetActorDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleTargetActorDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTargetActorDestroyed");

	Params::ClamberingComponent_HandleTargetActorDestroyed Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetActorHealthChanged
// (Final, Native, Protected)

void UClamberingComponent::HandleTargetActorHealthChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTargetActorHealthChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetingDataInvalid
// (Event, Protected, BlueprintEvent)

void UClamberingComponent::HandleTargetingDataInvalid()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTargetingDataInvalid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetingDataValid
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FClamberingTargetingData         TargetingData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleTargetingDataValid(const struct FClamberingTargetingData& TargetingData)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTargetingDataValid");

	Params::ClamberingComponent_HandleTargetingDataValid Parms{};

	Parms.TargetingData = std::move(TargetingData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.NetMulticast_ClamberingLedgeFailed
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// EClamberingFailedReason                 FailedReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EClamberingState                        FailedState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::NetMulticast_ClamberingLedgeFailed(EClamberingFailedReason FailedReason, EClamberingState FailedState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_ClamberingLedgeFailed");

	Params::ClamberingComponent_NetMulticast_ClamberingLedgeFailed Parms{};

	Parms.FailedReason = FailedReason;
	Parms.FailedState = FailedState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnMutatorUpdated
// (Final, Native, Protected)

void UClamberingComponent::OnMutatorUpdated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMutatorUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnPlayerStatePawnSet
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPlayerStatePawnSet");

	Params::ClamberingComponent_OnPlayerStatePawnSet Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnRep_ReplicatedClamberingState
// (Final, Native, Protected)

void UClamberingComponent::OnRep_ReplicatedClamberingState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ReplicatedClamberingState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnRep_ReplicatedLastTeleportTime
// (Final, Native, Protected)

void UClamberingComponent::OnRep_ReplicatedLastTeleportTime()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ReplicatedLastTeleportTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnRep_ReplicatedTargetingData
// (Final, Native, Protected)

void UClamberingComponent::OnRep_ReplicatedTargetingData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ReplicatedTargetingData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.RegisterMutatorUpdatedDelegate
// (Final, Native, Protected)
// Parameters:
// class APawn*                            AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::RegisterMutatorUpdatedDelegate(class APawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterMutatorUpdatedDelegate");

	Params::ClamberingComponent_RegisterMutatorUpdatedDelegate Parms{};

	Parms.AffectedPawn = AffectedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.ServerStartClambering
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FReplicatedClamberingTargetingDataInReplicatedTargetingData                              (ConstParm, Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// double                                  ClientLastTeleportTime                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::ServerStartClambering(const struct FReplicatedClamberingTargetingData& InReplicatedTargetingData, const double ClientLastTeleportTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerStartClambering");

	Params::ClamberingComponent_ServerStartClambering Parms{};

	Parms.InReplicatedTargetingData = std::move(InReplicatedTargetingData);
	Parms.ClientLastTeleportTime = ClientLastTeleportTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.SetTutorialModeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::SetTutorialModeEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTutorialModeEnabled");

	Params::ClamberingComponent_SetTutorialModeEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.UnregisterMutatorUpdatedDelegate
// (Final, Native, Protected)

void UClamberingComponent::UnregisterMutatorUpdatedDelegate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnregisterMutatorUpdatedDelegate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_CanStartClambering
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// bool                                    bCanStartClambering                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_CanStartClambering(bool* bCanStartClambering) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_CanStartClambering");

	Params::ClamberingComponent_BP_CanStartClambering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanStartClambering != nullptr)
		*bCanStartClambering = Parms.bCanStartClambering;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_CanStartTargeting
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// bool                                    bCanStartTargeting                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_CanStartTargeting(bool* bCanStartTargeting) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_CanStartTargeting");

	Params::ClamberingComponent_BP_CanStartTargeting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanStartTargeting != nullptr)
		*bCanStartTargeting = Parms.bCanStartTargeting;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_IsValidTargetActor
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValidTargetActor                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_IsValidTargetActor(const class AActor* TargetActor, bool* bIsValidTargetActor) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_IsValidTargetActor");

	Params::ClamberingComponent_BP_IsValidTargetActor Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bIsValidTargetActor != nullptr)
		*bIsValidTargetActor = Parms.bIsValidTargetActor;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_TutorialModeDisabled
// (Event, Protected, BlueprintEvent, Const)

void UClamberingComponent::BP_TutorialModeDisabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_TutorialModeDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_TutorialModeEnabled
// (Event, Protected, BlueprintEvent, Const)

void UClamberingComponent::BP_TutorialModeEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_TutorialModeEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.IsAutoClamberingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::IsAutoClamberingEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsAutoClamberingEnabled");

	Params::ClamberingComponent_IsAutoClamberingEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingComponent.IsClamberingEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::IsClamberingEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsClamberingEnabled");

	Params::ClamberingComponent_IsClamberingEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingComponent.IsTutorialModeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::IsTutorialModeEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsTutorialModeEnabled");

	Params::ClamberingComponent_IsTutorialModeEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingComponent.ShouldShowClamberIndicator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::ShouldShowClamberIndicator() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShouldShowClamberIndicator");

	Params::ClamberingComponent_ShouldShowClamberIndicator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingLibrary.PerformClamberingTargeting
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FClamberingTargetingData         OutTargetingData                                       (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingLibrary::PerformClamberingTargeting(const class ACharacter* Character, struct FClamberingTargetingData* OutTargetingData)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("PerformClamberingTargeting");

	Params::ClamberingLibrary_PerformClamberingTargeting Parms{};

	Parms.Character = Character;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (OutTargetingData != nullptr)
		*OutTargetingData = std::move(Parms.OutTargetingData);

	return Parms.ReturnValue;
}

}

