#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GooseUI

#include "Basic.hpp"

#include "GooseUI_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GooseUI.GooseInventoryWidget.OpenWidget
// 0x0010 (0x0010 - 0x0000)
struct GooseInventoryWidget_OpenWidget final
{
public:
	class UTexture2D*                             IconTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDef;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseInventoryWidget_OpenWidget) == 0x000008, "Wrong alignment on GooseInventoryWidget_OpenWidget");
static_assert(sizeof(GooseInventoryWidget_OpenWidget) == 0x000010, "Wrong size on GooseInventoryWidget_OpenWidget");
static_assert(offsetof(GooseInventoryWidget_OpenWidget, IconTexture) == 0x000000, "Member 'GooseInventoryWidget_OpenWidget::IconTexture' has a wrong offset!");
static_assert(offsetof(GooseInventoryWidget_OpenWidget, ItemDef) == 0x000008, "Member 'GooseInventoryWidget_OpenWidget::ItemDef' has a wrong offset!");

// Function GooseUI.GooseWidgetBase.OnUpdateNumberOfPlanes
// 0x0008 (0x0008 - 0x0000)
struct GooseWidgetBase_OnUpdateNumberOfPlanes final
{
public:
	int32                                         FriendlyPlaneCount;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyPlaneCount;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseWidgetBase_OnUpdateNumberOfPlanes) == 0x000004, "Wrong alignment on GooseWidgetBase_OnUpdateNumberOfPlanes");
static_assert(sizeof(GooseWidgetBase_OnUpdateNumberOfPlanes) == 0x000008, "Wrong size on GooseWidgetBase_OnUpdateNumberOfPlanes");
static_assert(offsetof(GooseWidgetBase_OnUpdateNumberOfPlanes, FriendlyPlaneCount) == 0x000000, "Member 'GooseWidgetBase_OnUpdateNumberOfPlanes::FriendlyPlaneCount' has a wrong offset!");
static_assert(offsetof(GooseWidgetBase_OnUpdateNumberOfPlanes, EnemyPlaneCount) == 0x000004, "Member 'GooseWidgetBase_OnUpdateNumberOfPlanes::EnemyPlaneCount' has a wrong offset!");

// Function GooseUI.GooseLeaderboardWidget.UpdateLeaderboardUI
// 0x0010 (0x0010 - 0x0000)
struct GooseLeaderboardWidget_UpdateLeaderboardUI final
{
public:
	TArray<struct FGooseLeaderboardData>          SortedLeaderboardInfo;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseLeaderboardWidget_UpdateLeaderboardUI) == 0x000008, "Wrong alignment on GooseLeaderboardWidget_UpdateLeaderboardUI");
static_assert(sizeof(GooseLeaderboardWidget_UpdateLeaderboardUI) == 0x000010, "Wrong size on GooseLeaderboardWidget_UpdateLeaderboardUI");
static_assert(offsetof(GooseLeaderboardWidget_UpdateLeaderboardUI, SortedLeaderboardInfo) == 0x000000, "Member 'GooseLeaderboardWidget_UpdateLeaderboardUI::SortedLeaderboardInfo' has a wrong offset!");

// Function GooseUI.GoosePlanePickupWidget.OpenWidget
// 0x0028 (0x0028 - 0x0000)
struct GoosePlanePickupWidget_OpenWidget final
{
public:
	int32                                         DisplayIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChestName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoosePlanePickupWidget_OpenWidget) == 0x000008, "Wrong alignment on GoosePlanePickupWidget_OpenWidget");
static_assert(sizeof(GoosePlanePickupWidget_OpenWidget) == 0x000028, "Wrong size on GoosePlanePickupWidget_OpenWidget");
static_assert(offsetof(GoosePlanePickupWidget_OpenWidget, DisplayIndex) == 0x000000, "Member 'GoosePlanePickupWidget_OpenWidget::DisplayIndex' has a wrong offset!");
static_assert(offsetof(GoosePlanePickupWidget_OpenWidget, ChestName) == 0x000004, "Member 'GoosePlanePickupWidget_OpenWidget::ChestName' has a wrong offset!");
static_assert(offsetof(GoosePlanePickupWidget_OpenWidget, DisplayText) == 0x000010, "Member 'GoosePlanePickupWidget_OpenWidget::DisplayText' has a wrong offset!");

// Function GooseUI.GoosePlaneWeaponWidget.OpenWidget
// 0x0048 (0x0048 - 0x0000)
struct GoosePlaneWeaponWidget_OpenWidget final
{
public:
	int32                                         DisplayIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGooseWeaponDisplayData                InDisplayData;                                     // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GoosePlaneWeaponWidget_OpenWidget) == 0x000008, "Wrong alignment on GoosePlaneWeaponWidget_OpenWidget");
static_assert(sizeof(GoosePlaneWeaponWidget_OpenWidget) == 0x000048, "Wrong size on GoosePlaneWeaponWidget_OpenWidget");
static_assert(offsetof(GoosePlaneWeaponWidget_OpenWidget, DisplayIndex) == 0x000000, "Member 'GoosePlaneWeaponWidget_OpenWidget::DisplayIndex' has a wrong offset!");
static_assert(offsetof(GoosePlaneWeaponWidget_OpenWidget, InDisplayData) == 0x000008, "Member 'GoosePlaneWeaponWidget_OpenWidget::InDisplayData' has a wrong offset!");
static_assert(offsetof(GoosePlaneWeaponWidget_OpenWidget, StartTime) == 0x000040, "Member 'GoosePlaneWeaponWidget_OpenWidget::StartTime' has a wrong offset!");

// Function GooseUI.GooseRadarIconWidget.OnNewIconState
// 0x0001 (0x0001 - 0x0000)
struct GooseRadarIconWidget_OnNewIconState final
{
public:
	ERadarIconState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseRadarIconWidget_OnNewIconState) == 0x000001, "Wrong alignment on GooseRadarIconWidget_OnNewIconState");
static_assert(sizeof(GooseRadarIconWidget_OnNewIconState) == 0x000001, "Wrong size on GooseRadarIconWidget_OnNewIconState");
static_assert(offsetof(GooseRadarIconWidget_OnNewIconState, NewState) == 0x000000, "Member 'GooseRadarIconWidget_OnNewIconState::NewState' has a wrong offset!");

// Function GooseUI.GooseRadarWidgetBase.OnPlaneRep
// 0x0010 (0x0010 - 0x0000)
struct GooseRadarWidgetBase_OnPlaneRep final
{
public:
	TArray<class AFortAthenaVehicle*>             Planes;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseRadarWidgetBase_OnPlaneRep) == 0x000008, "Wrong alignment on GooseRadarWidgetBase_OnPlaneRep");
static_assert(sizeof(GooseRadarWidgetBase_OnPlaneRep) == 0x000010, "Wrong size on GooseRadarWidgetBase_OnPlaneRep");
static_assert(offsetof(GooseRadarWidgetBase_OnPlaneRep, Planes) == 0x000000, "Member 'GooseRadarWidgetBase_OnPlaneRep::Planes' has a wrong offset!");

// Function GooseUI.GooseTargetLeadingWidget.OnPlayerControllerPawnChanged
// 0x0008 (0x0008 - 0x0000)
struct GooseTargetLeadingWidget_OnPlayerControllerPawnChanged final
{
public:
	class AFortPawn*                              NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseTargetLeadingWidget_OnPlayerControllerPawnChanged) == 0x000008, "Wrong alignment on GooseTargetLeadingWidget_OnPlayerControllerPawnChanged");
static_assert(sizeof(GooseTargetLeadingWidget_OnPlayerControllerPawnChanged) == 0x000008, "Wrong size on GooseTargetLeadingWidget_OnPlayerControllerPawnChanged");
static_assert(offsetof(GooseTargetLeadingWidget_OnPlayerControllerPawnChanged, NewPawn) == 0x000000, "Member 'GooseTargetLeadingWidget_OnPlayerControllerPawnChanged::NewPawn' has a wrong offset!");

// Function GooseUI.GooseTargetLeadingWidget.OnPlayerWeaponChanged
// 0x0018 (0x0018 - 0x0000)
struct GooseTargetLeadingWidget_OnPlayerWeaponChanged final
{
public:
	class AFortPawn*                              InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            InNewWeapon;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            InPlayerWeapon;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseTargetLeadingWidget_OnPlayerWeaponChanged) == 0x000008, "Wrong alignment on GooseTargetLeadingWidget_OnPlayerWeaponChanged");
static_assert(sizeof(GooseTargetLeadingWidget_OnPlayerWeaponChanged) == 0x000018, "Wrong size on GooseTargetLeadingWidget_OnPlayerWeaponChanged");
static_assert(offsetof(GooseTargetLeadingWidget_OnPlayerWeaponChanged, InPawn) == 0x000000, "Member 'GooseTargetLeadingWidget_OnPlayerWeaponChanged::InPawn' has a wrong offset!");
static_assert(offsetof(GooseTargetLeadingWidget_OnPlayerWeaponChanged, InNewWeapon) == 0x000008, "Member 'GooseTargetLeadingWidget_OnPlayerWeaponChanged::InNewWeapon' has a wrong offset!");
static_assert(offsetof(GooseTargetLeadingWidget_OnPlayerWeaponChanged, InPlayerWeapon) == 0x000010, "Member 'GooseTargetLeadingWidget_OnPlayerWeaponChanged::InPlayerWeapon' has a wrong offset!");

// Function GooseUI.GooseTargetLeadingWidget.ShowLeadingReticle
// 0x0001 (0x0001 - 0x0000)
struct GooseTargetLeadingWidget_ShowLeadingReticle final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseTargetLeadingWidget_ShowLeadingReticle) == 0x000001, "Wrong alignment on GooseTargetLeadingWidget_ShowLeadingReticle");
static_assert(sizeof(GooseTargetLeadingWidget_ShowLeadingReticle) == 0x000001, "Wrong size on GooseTargetLeadingWidget_ShowLeadingReticle");
static_assert(offsetof(GooseTargetLeadingWidget_ShowLeadingReticle, bShow) == 0x000000, "Member 'GooseTargetLeadingWidget_ShowLeadingReticle::bShow' has a wrong offset!");

// Function GooseUI.GooseTargetLeadingWidget.UpdateLeadingReticlePosition
// 0x0010 (0x0010 - 0x0000)
struct GooseTargetLeadingWidget_UpdateLeadingReticlePosition final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseTargetLeadingWidget_UpdateLeadingReticlePosition) == 0x000004, "Wrong alignment on GooseTargetLeadingWidget_UpdateLeadingReticlePosition");
static_assert(sizeof(GooseTargetLeadingWidget_UpdateLeadingReticlePosition) == 0x000010, "Wrong size on GooseTargetLeadingWidget_UpdateLeadingReticlePosition");
static_assert(offsetof(GooseTargetLeadingWidget_UpdateLeadingReticlePosition, TargetPosition) == 0x000000, "Member 'GooseTargetLeadingWidget_UpdateLeadingReticlePosition::TargetPosition' has a wrong offset!");
static_assert(offsetof(GooseTargetLeadingWidget_UpdateLeadingReticlePosition, InDeltaTime) == 0x00000C, "Member 'GooseTargetLeadingWidget_UpdateLeadingReticlePosition::InDeltaTime' has a wrong offset!");

}

