#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Vector4_V

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Vector4_V.Vector4_V.Create
// 0x0018 (0x0018 - 0x0000)
struct Vector4_V_Create final
{
public:
	float                                         __verse_0x3205F605_inX;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x57624ABD_inY;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xB9CDFFAF_inZ;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x6415955D_inW;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector4_V*                             RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector4_V_Create) == 0x000008, "Wrong alignment on Vector4_V_Create");
static_assert(sizeof(Vector4_V_Create) == 0x000018, "Wrong size on Vector4_V_Create");
static_assert(offsetof(Vector4_V_Create, __verse_0x3205F605_inX) == 0x000000, "Member 'Vector4_V_Create::__verse_0x3205F605_inX' has a wrong offset!");
static_assert(offsetof(Vector4_V_Create, __verse_0x57624ABD_inY) == 0x000004, "Member 'Vector4_V_Create::__verse_0x57624ABD_inY' has a wrong offset!");
static_assert(offsetof(Vector4_V_Create, __verse_0xB9CDFFAF_inZ) == 0x000008, "Member 'Vector4_V_Create::__verse_0xB9CDFFAF_inZ' has a wrong offset!");
static_assert(offsetof(Vector4_V_Create, __verse_0x6415955D_inW) == 0x00000C, "Member 'Vector4_V_Create::__verse_0x6415955D_inW' has a wrong offset!");
static_assert(offsetof(Vector4_V_Create, RetVal) == 0x000010, "Member 'Vector4_V_Create::RetVal' has a wrong offset!");

// Function Math_Vector4_V.Vector4_V.createZero
// 0x0008 (0x0008 - 0x0000)
struct Vector4_V_createZero final
{
public:
	class UVector4_V*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector4_V_createZero) == 0x000008, "Wrong alignment on Vector4_V_createZero");
static_assert(sizeof(Vector4_V_createZero) == 0x000008, "Wrong size on Vector4_V_createZero");
static_assert(offsetof(Vector4_V_createZero, RetVal) == 0x000000, "Member 'Vector4_V_createZero::RetVal' has a wrong offset!");

// Function Math_Vector4_V.Vector4_V.Equals
// 0x0010 (0x0010 - 0x0000)
struct Vector4_V_Equals final
{
public:
	class UVector4_V*                             __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Vector4_V_Equals) == 0x000008, "Wrong alignment on Vector4_V_Equals");
static_assert(sizeof(Vector4_V_Equals) == 0x000010, "Wrong size on Vector4_V_Equals");
static_assert(offsetof(Vector4_V_Equals, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector4_V_Equals::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector4_V_Equals, __verse_0xB4A6AEEC_tolerance) == 0x000008, "Member 'Vector4_V_Equals::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Vector4_V.Vector4_V.ToString
// 0x0010 (0x0010 - 0x0000)
struct Vector4_V_ToString final
{
public:
	class FString                                 RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Vector4_V_ToString) == 0x000008, "Wrong alignment on Vector4_V_ToString");
static_assert(sizeof(Vector4_V_ToString) == 0x000010, "Wrong size on Vector4_V_ToString");
static_assert(offsetof(Vector4_V_ToString, RetVal) == 0x000000, "Member 'Vector4_V_ToString::RetVal' has a wrong offset!");

}

