#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Throw_HeldObject

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Throw_HeldObject.GA_Throw_HeldObject_C
// 0x0168 (0x0C20 - 0x0AB8)
class UGA_Throw_HeldObject_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbilityKeyPressed;                                 // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InThrowWindup;                                     // 0x0AC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ACA[0x2];                                      // 0x0ACA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalThrowAngle;                              // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTossPitch;                                      // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrenadeTargetingOriginOffset;                      // 0x0AD4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrenadeTargetingOriginOffset_Crouched;             // 0x0AE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AEC[0x4];                                      // 0x0AEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortProjectileBase*                    SpawnedProjectile;                                 // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayEffectContainerSpec       ExplosionEffectContainerSpec;                      // 0x0AF8(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_DefaultExplosion;                               // 0x0BB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CookMonage;                                        // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ThrowMontage;                                      // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_OnThrow;                                        // 0x0BC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ProjectileTrajectory_C*             TrajectoryIndicator;                               // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TrajectoryIndicatorClass;                          // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyMaxSpeed;                                     // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyGravity;                                      // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyExtent;                                       // 0x0BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyTimeStep;                                     // 0x0BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_InWindup;                                       // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            Handle_GE_InWindup;                                // 0x0BF8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnedOnEquip;                                    // 0x0C00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C01[0x7];                                      // 0x0C01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_HeldObject_Parent_C*                 HeldObject;                                        // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ProjectileTrajectory_C*             ProjectileTrajectorySocketed;                      // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TrajectoryIndicatorSocketedClass;                  // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Throw_HeldObject(int32 EntryPoint);
	void OnAbilityInputReleased();
	void K2_ActivateAbility();
	void UpdateTrajectory();
	void CleanupTrajectoryIndicatorOnUnequip();
	void InitTrajectoryVariables();
	void ThrowProjectile();
	void K2_OnEndAbility(bool bWasCancelled);
	void AttemptSpawnThrownProjectile();
	void OnFinish_5115EDCE4339523BE389D09CA4A2AECC();
	void Triggered_9DD11B80484829AF1E8DC5ACFC965E7A(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_9DD11B80484829AF1E8DC5ACFC965E7A(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_9DD11B80484829AF1E8DC5ACFC965E7A(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void PrethrowSetup();
	void SpawnThrownProjectile(class UClass* ProjectileClass_0, const struct FVector& ProjectileSpawnLocation, const struct FRotator& ProjectileSpawnDirection, const struct FFortGameplayEffectContainerSpec& ExplosionEffectContainerSpec_0, float ProjectileInitialSpeed, float ProjectileGravityScale, class AFortProjectileBase** SpawnedProjectile_0);
	void OnHeldObjectThrown(class AFortProjectileBase* SpawnedProjectile_0);
	void OnHeldObjectSetup();
	void SetupDummyProjectile();
	void UpdateTrajectorySpline();
	void PostThrowCleanup();
	void CleanupTrajectory();
	void SetupDummyProjectileSocketed();
	void HitValidSocket(const struct FHitResult& HitResult, bool* CanSocket);
	void GetProjectileTrajectoryPoints(TArray<struct FVector>* OutSplinePoints, TArray<struct FVector>* OutSplineTangents, struct FHitResult* OutHitResult);
	class AFortProjectileTrajectory* SpawnTrajectoryIndicator(bool bSpawnOnEquip);

	void GetSpawnLocationAndRotation(struct FVector* Location, struct FRotator* Rotation) const;
	void GetOwningPlayer(class AFortPlayerPawn** Player_Pawn) const;
	TSubclassOf<class AFortProjectileTrajectory> GetProjectileTrajectoryActor() const;
	bool ShouldOnlyShowTrajectoryOnUse() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Throw_HeldObject_C">();
	}
	static class UGA_Throw_HeldObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Throw_HeldObject_C>();
	}
};
static_assert(alignof(UGA_Throw_HeldObject_C) == 0x000008, "Wrong alignment on UGA_Throw_HeldObject_C");
static_assert(sizeof(UGA_Throw_HeldObject_C) == 0x000C20, "Wrong size on UGA_Throw_HeldObject_C");
static_assert(offsetof(UGA_Throw_HeldObject_C, UberGraphFrame) == 0x000AB8, "Member 'UGA_Throw_HeldObject_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, PlayerPawn) == 0x000AC0, "Member 'UGA_Throw_HeldObject_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, AbilityKeyPressed) == 0x000AC8, "Member 'UGA_Throw_HeldObject_C::AbilityKeyPressed' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, InThrowWindup) == 0x000AC9, "Member 'UGA_Throw_HeldObject_C::InThrowWindup' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, AdditionalThrowAngle) == 0x000ACC, "Member 'UGA_Throw_HeldObject_C::AdditionalThrowAngle' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, MaxTossPitch) == 0x000AD0, "Member 'UGA_Throw_HeldObject_C::MaxTossPitch' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, GrenadeTargetingOriginOffset) == 0x000AD4, "Member 'UGA_Throw_HeldObject_C::GrenadeTargetingOriginOffset' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, GrenadeTargetingOriginOffset_Crouched) == 0x000AE0, "Member 'UGA_Throw_HeldObject_C::GrenadeTargetingOriginOffset_Crouched' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, SpawnedProjectile) == 0x000AF0, "Member 'UGA_Throw_HeldObject_C::SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, ExplosionEffectContainerSpec) == 0x000AF8, "Member 'UGA_Throw_HeldObject_C::ExplosionEffectContainerSpec' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, EC_DefaultExplosion) == 0x000BB0, "Member 'UGA_Throw_HeldObject_C::EC_DefaultExplosion' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, CookMonage) == 0x000BB8, "Member 'UGA_Throw_HeldObject_C::CookMonage' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, ThrowMontage) == 0x000BC0, "Member 'UGA_Throw_HeldObject_C::ThrowMontage' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, GC_OnThrow) == 0x000BC8, "Member 'UGA_Throw_HeldObject_C::GC_OnThrow' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, TrajectoryIndicator) == 0x000BD0, "Member 'UGA_Throw_HeldObject_C::TrajectoryIndicator' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, TrajectoryIndicatorClass) == 0x000BD8, "Member 'UGA_Throw_HeldObject_C::TrajectoryIndicatorClass' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, DummyMaxSpeed) == 0x000BE0, "Member 'UGA_Throw_HeldObject_C::DummyMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, DummyGravity) == 0x000BE4, "Member 'UGA_Throw_HeldObject_C::DummyGravity' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, DummyExtent) == 0x000BE8, "Member 'UGA_Throw_HeldObject_C::DummyExtent' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, DummyTimeStep) == 0x000BEC, "Member 'UGA_Throw_HeldObject_C::DummyTimeStep' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, GE_InWindup) == 0x000BF0, "Member 'UGA_Throw_HeldObject_C::GE_InWindup' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, Handle_GE_InWindup) == 0x000BF8, "Member 'UGA_Throw_HeldObject_C::Handle_GE_InWindup' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, SpawnedOnEquip) == 0x000C00, "Member 'UGA_Throw_HeldObject_C::SpawnedOnEquip' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, HeldObject) == 0x000C08, "Member 'UGA_Throw_HeldObject_C::HeldObject' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, ProjectileTrajectorySocketed) == 0x000C10, "Member 'UGA_Throw_HeldObject_C::ProjectileTrajectorySocketed' has a wrong offset!");
static_assert(offsetof(UGA_Throw_HeldObject_C, TrajectoryIndicatorSocketedClass) == 0x000C18, "Member 'UGA_Throw_HeldObject_C::TrajectoryIndicatorSocketedClass' has a wrong offset!");

}

