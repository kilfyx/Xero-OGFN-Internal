#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HmxAudio

#include "Basic.hpp"

#include "HmxAudio_classes.hpp"
#include "HmxAudio_parameters.hpp"


namespace SDK
{

// Function HmxAudio.MusicAssetBase.GetLengthMs
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicAssetBase::GetLengthMs() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthMs");

	Params::MusicAssetBase_GetLengthMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.BTDecorator_StopAfterSpan.OnNextBeat
// (Final, Native, Private)
// Parameters:
// int32                                   beatNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   beatInBar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_StopAfterSpan::OnNextBeat(int32 beatNumber, int32 beatInBar)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextBeat");

	Params::BTDecorator_StopAfterSpan_OnNextBeat Parms{};

	Parms.beatNumber = beatNumber;
	Parms.beatInBar = beatInBar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTDecorator_StopAfterSpan.OnNextMeasure
// (Final, Native, Private)
// Parameters:
// int32                                   measureNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_StopAfterSpan::OnNextMeasure(int32 measureNumber)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextMeasure");

	Params::BTDecorator_StopAfterSpan_OnNextMeasure Parms{};

	Parms.measureNumber = measureNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTDecorator_StopAtMidiMsg.OnNoteOffMessage
// (Final, Native, Private)
// Parameters:
// class FString                           CursorName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Note                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_StopAtMidiMsg::OnNoteOffMessage(const class FString& CursorName, int32 Channel, int32 Note)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNoteOffMessage");

	Params::BTDecorator_StopAtMidiMsg_OnNoteOffMessage Parms{};

	Parms.CursorName = std::move(CursorName);
	Parms.Channel = Channel;
	Parms.Note = Note;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTDecorator_StopAtMidiMsg.OnNoteOnMessage
// (Final, Native, Private)
// Parameters:
// class FString                           CursorName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Note                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_StopAtMidiMsg::OnNoteOnMessage(const class FString& CursorName, int32 Channel, int32 Note, int32 Velocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNoteOnMessage");

	Params::BTDecorator_StopAtMidiMsg_OnNoteOnMessage Parms{};

	Parms.CursorName = std::move(CursorName);
	Parms.Channel = Channel;
	Parms.Note = Note;
	Parms.Velocity = Velocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTDecorator_StopAtMidiMsg.OnTextMessage
// (Final, Native, Private)
// Parameters:
// class FString                           CursorName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_StopAtMidiMsg::OnTextMessage(const class FString& CursorName, const class FString& Text)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTextMessage");

	Params::BTDecorator_StopAtMidiMsg_OnTextMessage Parms{};

	Parms.CursorName = std::move(CursorName);
	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTDecorator_StopAtNext.OnNextBeat
// (Final, Native, Private)
// Parameters:
// int32                                   beatNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   beatInBar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_StopAtNext::OnNextBeat(int32 beatNumber, int32 beatInBar)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextBeat");

	Params::BTDecorator_StopAtNext_OnNextBeat Parms{};

	Parms.beatNumber = beatNumber;
	Parms.beatInBar = beatInBar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTDecorator_StopAtNext.OnNextMeasure
// (Final, Native, Private)
// Parameters:
// int32                                   measureNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_StopAtNext::OnNextMeasure(int32 measureNumber)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextMeasure");

	Params::BTDecorator_StopAtNext_OnNextMeasure Parms{};

	Parms.measureNumber = measureNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTTask_WaitForMidiMsg.OnNoteOffMessage
// (Final, Native, Private)
// Parameters:
// class FString                           CursorName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Note                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTTask_WaitForMidiMsg::OnNoteOffMessage(const class FString& CursorName, int32 Channel, int32 Note)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNoteOffMessage");

	Params::BTTask_WaitForMidiMsg_OnNoteOffMessage Parms{};

	Parms.CursorName = std::move(CursorName);
	Parms.Channel = Channel;
	Parms.Note = Note;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTTask_WaitForMidiMsg.OnNoteOnMessage
// (Final, Native, Private)
// Parameters:
// class FString                           CursorName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Note                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTTask_WaitForMidiMsg::OnNoteOnMessage(const class FString& CursorName, int32 Channel, int32 Note, int32 Velocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNoteOnMessage");

	Params::BTTask_WaitForMidiMsg_OnNoteOnMessage Parms{};

	Parms.CursorName = std::move(CursorName);
	Parms.Channel = Channel;
	Parms.Note = Note;
	Parms.Velocity = Velocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTTask_WaitForMidiMsg.OnTextMessage
// (Final, Native, Private)
// Parameters:
// class FString                           CursorName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTTask_WaitForMidiMsg::OnTextMessage(const class FString& CursorName, const class FString& Text)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTextMessage");

	Params::BTTask_WaitForMidiMsg_OnTextMessage Parms{};

	Parms.CursorName = std::move(CursorName);
	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTTask_WaitForNext.OnNextBeat
// (Final, Native, Private)
// Parameters:
// int32                                   beatNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   beatInBar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTTask_WaitForNext::OnNextBeat(int32 beatNumber, int32 beatInBar)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextBeat");

	Params::BTTask_WaitForNext_OnNextBeat Parms{};

	Parms.beatNumber = beatNumber;
	Parms.beatInBar = beatInBar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTTask_WaitForNext.OnNextMeasure
// (Final, Native, Private)
// Parameters:
// int32                                   measureNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTTask_WaitForNext::OnNextMeasure(int32 measureNumber)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextMeasure");

	Params::BTTask_WaitForNext_OnNextMeasure Parms{};

	Parms.measureNumber = measureNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTTask_WaitForSpan.OnNextBeat
// (Final, Native, Private)
// Parameters:
// int32                                   beatNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   beatInBar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTTask_WaitForSpan::OnNextBeat(int32 beatNumber, int32 beatInBar)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextBeat");

	Params::BTTask_WaitForSpan_OnNextBeat Parms{};

	Parms.beatNumber = beatNumber;
	Parms.beatInBar = beatInBar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.BTTask_WaitForSpan.OnNextMeasure
// (Final, Native, Private)
// Parameters:
// int32                                   measureNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTTask_WaitForSpan::OnNextMeasure(int32 measureNumber)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNextMeasure");

	Params::BTTask_WaitForSpan_OnNextMeasure Parms{};

	Parms.measureNumber = measureNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HmxAudioBlueprintUtil.FrequencyToMidiNote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   freq                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHmxAudioBlueprintUtil::FrequencyToMidiNote(float freq)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("FrequencyToMidiNote");

	Params::HmxAudioBlueprintUtil_FrequencyToMidiNote Parms{};

	Parms.freq = freq;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HmxAudioBlueprintUtil.GetAudioLatencyMs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          worldContextObj                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHmxAudioBlueprintUtil::GetAudioLatencyMs(class UObject* worldContextObj)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetAudioLatencyMs");

	Params::HmxAudioBlueprintUtil_GetAudioLatencyMs Parms{};

	Parms.worldContextObj = worldContextObj;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HmxAudioBlueprintUtil.GetNoteNameFromNoteNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   midiNoteNumber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHmxAudioBlueprintUtil::GetNoteNameFromNoteNumber(int32 midiNoteNumber)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetNoteNameFromNoteNumber");

	Params::HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber Parms{};

	Parms.midiNoteNumber = midiNoteNumber;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HmxAudioBlueprintUtil.GetNoteNumberFromNoteName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHmxAudioBlueprintUtil::GetNoteNumberFromNoteName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetNoteNumberFromNoteName");

	Params::HmxAudioBlueprintUtil_GetNoteNumberFromNoteName Parms{};

	Parms.Name_0 = std::move(Name_0);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HmxAudioBlueprintUtil.GetNoteOctaveFromNoteNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   midiNoteNumber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHmxAudioBlueprintUtil::GetNoteOctaveFromNoteNumber(int32 midiNoteNumber)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetNoteOctaveFromNoteNumber");

	Params::HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber Parms{};

	Parms.midiNoteNumber = midiNoteNumber;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HmxAudioBlueprintUtil.GetVideoLatencyMs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          worldContextObj                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHmxAudioBlueprintUtil::GetVideoLatencyMs(class UObject* worldContextObj)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetVideoLatencyMs");

	Params::HmxAudioBlueprintUtil_GetVideoLatencyMs Parms{};

	Parms.worldContextObj = worldContextObj;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HmxAudioBlueprintUtil.SetAudioLatencyMs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          worldContextObj                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAudioLatencyMs                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHmxAudioBlueprintUtil::SetAudioLatencyMs(class UObject* worldContextObj, float InAudioLatencyMs)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetAudioLatencyMs");

	Params::HmxAudioBlueprintUtil_SetAudioLatencyMs Parms{};

	Parms.worldContextObj = worldContextObj;
	Parms.InAudioLatencyMs = InAudioLatencyMs;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HmxAudioBlueprintUtil.SetVideoLatencyMs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          worldContextObj                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InVideoLatencyMs                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHmxAudioBlueprintUtil::SetVideoLatencyMs(class UObject* worldContextObj, float InVideoLatencyMs)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetVideoLatencyMs");

	Params::HmxAudioBlueprintUtil_SetVideoLatencyMs Parms{};

	Parms.worldContextObj = worldContextObj;
	Parms.InVideoLatencyMs = InVideoLatencyMs;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiNoteFunctionLibrary.ByteToMidiNote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   InByte                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNote                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiNote UMidiNoteFunctionLibrary::ByteToMidiNote(uint8 InByte)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ByteToMidiNote");

	Params::MidiNoteFunctionLibrary_ByteToMidiNote Parms{};

	Parms.InByte = InByte;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxMidiNote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMidiNote                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiNote UMidiNoteFunctionLibrary::GetMaxMidiNote()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMaxMidiNote");

	Params::MidiNoteFunctionLibrary_GetMaxMidiNote Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxNoteNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UMidiNoteFunctionLibrary::GetMaxNoteNumber()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMaxNoteNumber");

	Params::MidiNoteFunctionLibrary_GetMaxNoteNumber Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxNoteVelocity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UMidiNoteFunctionLibrary::GetMaxNoteVelocity()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMaxNoteVelocity");

	Params::MidiNoteFunctionLibrary_GetMaxNoteVelocity Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxNumNotes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiNoteFunctionLibrary::GetMaxNumNotes()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMaxNumNotes");

	Params::MidiNoteFunctionLibrary_GetMaxNumNotes Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.GetMinMidiNote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMidiNote                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiNote UMidiNoteFunctionLibrary::GetMinMidiNote()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMinMidiNote");

	Params::MidiNoteFunctionLibrary_GetMinMidiNote Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.GetMinNoteNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UMidiNoteFunctionLibrary::GetMinNoteNumber()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMinNoteNumber");

	Params::MidiNoteFunctionLibrary_GetMinNoteNumber Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.GetMinNoteVelocity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UMidiNoteFunctionLibrary::GetMinNoteVelocity()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMinNoteVelocity");

	Params::MidiNoteFunctionLibrary_GetMinNoteVelocity Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.IntToMidiNote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   inInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNote                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiNote UMidiNoteFunctionLibrary::IntToMidiNote(int32 inInt)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IntToMidiNote");

	Params::MidiNoteFunctionLibrary_IntToMidiNote Parms{};

	Parms.inInt = inInt;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.MakeLiteralMidiNote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMidiNote                        Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMidiNote                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiNote UMidiNoteFunctionLibrary::MakeLiteralMidiNote(const struct FMidiNote& Value)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MakeLiteralMidiNote");

	Params::MidiNoteFunctionLibrary_MakeLiteralMidiNote Parms{};

	Parms.Value = std::move(Value);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.MidiNoteToByte
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMidiNote                        InMidiNote                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UMidiNoteFunctionLibrary::MidiNoteToByte(const struct FMidiNote& InMidiNote)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MidiNoteToByte");

	Params::MidiNoteFunctionLibrary_MidiNoteToByte Parms{};

	Parms.InMidiNote = std::move(InMidiNote);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiNoteFunctionLibrary.MidiNoteToInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMidiNote                        InMidiNote                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiNoteFunctionLibrary::MidiNoteToInt(const struct FMidiNote& InMidiNote)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MidiNoteToInt");

	Params::MidiNoteFunctionLibrary_MidiNoteToInt Parms{};

	Parms.InMidiNote = std::move(InMidiNote);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTickFunctionLibrary.BeatToTick
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   inBeat                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicalTickFunctionLibrary::BeatToTick(float inBeat)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("BeatToTick");

	Params::MusicalTickFunctionLibrary_BeatToTick Parms{};

	Parms.inBeat = inBeat;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTickFunctionLibrary.GetBeatsPerTick
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicalTickFunctionLibrary::GetBeatsPerTick()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetBeatsPerTick");

	Params::MusicalTickFunctionLibrary_GetBeatsPerTick Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTickFunctionLibrary.GetTicksPerBeat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicalTickFunctionLibrary::GetTicksPerBeat()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetTicksPerBeat");

	Params::MusicalTickFunctionLibrary_GetTicksPerBeat Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTickFunctionLibrary.GetTicksPerBeatInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicalTickFunctionLibrary::GetTicksPerBeatInt()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetTicksPerBeatInt");

	Params::MusicalTickFunctionLibrary_GetTicksPerBeatInt Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTickFunctionLibrary.TickToBeat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   inTick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicalTickFunctionLibrary::TickToBeat(float inTick)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("TickToBeat");

	Params::MusicalTickFunctionLibrary_TickToBeat Parms{};

	Parms.inTick = inTick;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.ClampTickSpan
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTickSpan                        Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTickSpan                        clampSpan                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTickSpan                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FTickSpan UTickSpanFuncitonLibrary::ClampTickSpan(const struct FTickSpan& Target, const struct FTickSpan& clampSpan)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ClampTickSpan");

	Params::TickSpanFuncitonLibrary_ClampTickSpan Parms{};

	Parms.Target = std::move(Target);
	Parms.clampSpan = std::move(clampSpan);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.ClampTickSpanByRef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTickSpan                        Target                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTickSpan                        clampSpan                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTickSpan                        Result                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UTickSpanFuncitonLibrary::ClampTickSpanByRef(struct FTickSpan& Target, const struct FTickSpan& clampSpan, struct FTickSpan* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ClampTickSpanByRef");

	Params::TickSpanFuncitonLibrary_ClampTickSpanByRef Parms{};

	Parms.Target = std::move(Target);
	Parms.clampSpan = std::move(clampSpan);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	Target = std::move(Parms.Target);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function HmxAudio.TickSpanFuncitonLibrary.GetEndBeat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTickSpan                        Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTickSpanFuncitonLibrary::GetEndBeat(const struct FTickSpan& Target)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetEndBeat");

	Params::TickSpanFuncitonLibrary_GetEndBeat Parms{};

	Parms.Target = std::move(Target);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.GetEndTick
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTickSpan                        Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTickSpanFuncitonLibrary::GetEndTick(const struct FTickSpan& Target)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetEndTick");

	Params::TickSpanFuncitonLibrary_GetEndTick Parms{};

	Parms.Target = std::move(Target);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.GetLengthBeats
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTickSpan                        Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTickSpanFuncitonLibrary::GetLengthBeats(const struct FTickSpan& Target)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetLengthBeats");

	Params::TickSpanFuncitonLibrary_GetLengthBeats Parms{};

	Parms.Target = std::move(Target);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.GetLengthTicks
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTickSpan                        Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTickSpanFuncitonLibrary::GetLengthTicks(const struct FTickSpan& Target)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetLengthTicks");

	Params::TickSpanFuncitonLibrary_GetLengthTicks Parms{};

	Parms.Target = std::move(Target);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.GetOffsetBeat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTickSpan                        Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTickSpanFuncitonLibrary::GetOffsetBeat(const struct FTickSpan& Target)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetOffsetBeat");

	Params::TickSpanFuncitonLibrary_GetOffsetBeat Parms{};

	Parms.Target = std::move(Target);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.GetOffsetTick
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTickSpan                        Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTickSpanFuncitonLibrary::GetOffsetTick(const struct FTickSpan& Target)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetOffsetTick");

	Params::TickSpanFuncitonLibrary_GetOffsetTick Parms{};

	Parms.Target = std::move(Target);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.MakeTickSpan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTickSpan                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FTickSpan UTickSpanFuncitonLibrary::MakeTickSpan(int32 Offset, int32 Length)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MakeTickSpan");

	Params::TickSpanFuncitonLibrary_MakeTickSpan Parms{};

	Parms.Offset = Offset;
	Parms.Length = Length;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.TickSpanFuncitonLibrary.MakeTickSpanFromBeats
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTickSpan                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FTickSpan UTickSpanFuncitonLibrary::MakeTickSpanFromBeats(float Offset, float Length)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MakeTickSpanFromBeats");

	Params::TickSpanFuncitonLibrary_MakeTickSpanFromBeats Parms{};

	Parms.Offset = Offset;
	Parms.Length = Length;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicSequence.AppendTimeSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMidiMusicTimeSlotArgs           args                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UMidiMusicTimeSlot*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicTimeSlot* UMidiMusicSequence::AppendTimeSlot(const struct FMidiMusicTimeSlotArgs& args)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AppendTimeSlot");

	Params::MidiMusicSequence_AppendTimeSlot Parms{};

	Parms.args = std::move(args);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicSequence.InsertTimeSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMidiMusicTimeSlotArgs           args                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UMidiMusicTimeSlot*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicTimeSlot* UMidiMusicSequence::InsertTimeSlot(const struct FMidiMusicTimeSlotArgs& args)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InsertTimeSlot");

	Params::MidiMusicSequence_InsertTimeSlot Parms{};

	Parms.args = std::move(args);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicSequence.FindTimeSlotAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMidiMusicTimeSlot*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicTimeSlot* UMidiMusicSequence::FindTimeSlotAt(int32 Index_0) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindTimeSlotAt");

	Params::MidiMusicSequence_FindTimeSlotAt Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicSequence.FindTimeSlotAtTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMidiMusicTimeSlot*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicTimeSlot* UMidiMusicSequence::FindTimeSlotAtTick(int32 Tick) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindTimeSlotAtTick");

	Params::MidiMusicSequence_FindTimeSlotAtTick Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicSequence.GetLastTimeSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMidiMusicTimeSlot*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicTimeSlot* UMidiMusicSequence::GetLastTimeSlot() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLastTimeSlot");

	Params::MidiMusicSequence_GetLastTimeSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inCurrentPage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetCurrentPage(int32 inCurrentPage)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCurrentPage");

	Params::MidiMusicTimeSlot_SetCurrentPage Parms{};

	Parms.inCurrentPage = inCurrentPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetEnabled(bool InEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::MidiMusicTimeSlot_SetEnabled Parms{};

	Parms.InEnabled = InEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.SetLengthTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inLength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetLengthTick(int32 inLength)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLengthTick");

	Params::MidiMusicTimeSlot_SetLengthTick Parms{};

	Parms.inLength = inLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.SetMidiMusicItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiMusicInterface>inMidiMusicItem                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetMidiMusicItem(TScriptInterface<class IMidiMusicInterface> inMidiMusicItem)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMidiMusicItem");

	Params::MidiMusicTimeSlot_SetMidiMusicItem Parms{};

	Parms.inMidiMusicItem = inMidiMusicItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.SetNumPages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inNumPages                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetNumPages(int32 inNumPages)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumPages");

	Params::MidiMusicTimeSlot_SetNumPages Parms{};

	Parms.inNumPages = inNumPages;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.SetOffsetTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InOffset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetOffsetTick(int32 InOffset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOffsetTick");

	Params::MidiMusicTimeSlot_SetOffsetTick Parms{};

	Parms.InOffset = InOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.SetPages
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<bool>                            inPages                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetPages(const TArray<bool>& inPages)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPages");

	Params::MidiMusicTimeSlot_SetPages Parms{};

	Parms.inPages = std::move(inPages);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.SetTickSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FTickSpan                        inTickSpan                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UMidiMusicTimeSlot::SetTickSpan(const struct FTickSpan& inTickSpan)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTickSpan");

	Params::MidiMusicTimeSlot_SetTickSpan Parms{};

	Parms.inTickSpan = std::move(inTickSpan);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMusicTimeSlot.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentPage");

	Params::MidiMusicTimeSlot_GetCurrentPage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMidiMusicTimeSlot::GetEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEnabled");

	Params::MidiMusicTimeSlot_GetEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetEndBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetEndBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEndBeat");

	Params::MidiMusicTimeSlot_GetEndBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetEndTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetEndTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEndTick");

	Params::MidiMusicTimeSlot_GetEndTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetIndexInSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetIndexInSequence() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetIndexInSequence");

	Params::MidiMusicTimeSlot_GetIndexInSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetLengthBeats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetLengthBeats() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthBeats");

	Params::MidiMusicTimeSlot_GetLengthBeats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetLengthTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetLengthTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthTick");

	Params::MidiMusicTimeSlot_GetLengthTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetMidiMusicItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IMidiMusicInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IMidiMusicInterface> UMidiMusicTimeSlot::GetMidiMusicItem() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiMusicItem");

	Params::MidiMusicTimeSlot_GetMidiMusicItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetNumPages
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetNumPages() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumPages");

	Params::MidiMusicTimeSlot_GetNumPages Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetOffsetBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetOffsetBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetOffsetBeat");

	Params::MidiMusicTimeSlot_GetOffsetBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetOffsetTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMidiMusicTimeSlot::GetOffsetTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetOffsetTick");

	Params::MidiMusicTimeSlot_GetOffsetTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetPages
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<bool>                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<bool> UMidiMusicTimeSlot::GetPages() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPages");

	Params::MidiMusicTimeSlot_GetPages Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MidiMusicTimeSlot.GetTickSpan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTickSpan                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FTickSpan UMidiMusicTimeSlot::GetTickSpan() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTickSpan");

	Params::MidiMusicTimeSlot_GetTickSpan Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalGridEvent.Cancel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicalGridEvent::Cancel()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Cancel");

	Params::MusicalGridEvent_Cancel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalGridEvent.GetProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicalGridEvent::GetProgress()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetProgress");

	Params::MusicalGridEvent_GetProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalGridEvent.OnTriggered
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMusicalGridEvent::OnTriggered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.StepSequencerTrack.AppendGridSquares
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   appendSquares                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    copyStates                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    copyMusicItems                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::AppendGridSquares(int32 appendSquares, bool copyStates, bool copyMusicItems)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AppendGridSquares");

	Params::StepSequencerTrack_AppendGridSquares Parms{};

	Parms.appendSquares = appendSquares;
	Parms.copyStates = copyStates;
	Parms.copyMusicItems = copyMusicItems;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.InitGridSquares
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inGridSquareNum                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   inMaxGridSquares                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   inGridSquareBeats                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::InitGridSquares(int32 inGridSquareNum, int32 inMaxGridSquares, float inGridSquareBeats)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InitGridSquares");

	Params::StepSequencerTrack_InitGridSquares Parms{};

	Parms.inGridSquareNum = inGridSquareNum;
	Parms.inMaxGridSquares = inMaxGridSquares;
	Parms.inGridSquareBeats = inGridSquareBeats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.OnTimeSlotEnabledChanged
// (Final, Native, Private)
// Parameters:
// class UMidiMusicTimeSlot*               timeSlot                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::OnTimeSlotEnabledChanged(class UMidiMusicTimeSlot* timeSlot)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTimeSlotEnabledChanged");

	Params::StepSequencerTrack_OnTimeSlotEnabledChanged Parms{};

	Parms.timeSlot = timeSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.OnTimeSlotMusicItemChanged
// (Final, Native, Private)
// Parameters:
// class UMidiMusicTimeSlot*               timeSlot                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::OnTimeSlotMusicItemChanged(class UMidiMusicTimeSlot* timeSlot)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTimeSlotMusicItemChanged");

	Params::StepSequencerTrack_OnTimeSlotMusicItemChanged Parms{};

	Parms.timeSlot = timeSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.OnTimeSlotTimeSpanChanged
// (Final, Native, Private)
// Parameters:
// class UMidiMusicTimeSlot*               timeSlot                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::OnTimeSlotTimeSpanChanged(class UMidiMusicTimeSlot* timeSlot)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTimeSlotTimeSpanChanged");

	Params::StepSequencerTrack_OnTimeSlotTimeSpanChanged Parms{};

	Parms.timeSlot = timeSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.PopGridSquares
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   popSquares                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::PopGridSquares(int32 popSquares)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PopGridSquares");

	Params::StepSequencerTrack_PopGridSquares Parms{};

	Parms.popSquares = popSquares;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetCurrentPage(int32 Page)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCurrentPage");

	Params::StepSequencerTrack_SetCurrentPage Parms{};

	Parms.Page = Page;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetGridSquareBeats
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   inGridSquareBeats                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetGridSquareBeats(float inGridSquareBeats)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGridSquareBeats");

	Params::StepSequencerTrack_SetGridSquareBeats Parms{};

	Parms.inGridSquareBeats = inGridSquareBeats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetGridSquareState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   gridSquareIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isOn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetGridSquareState(int32 gridSquareIndex, bool isOn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGridSquareState");

	Params::StepSequencerTrack_SetGridSquareState Parms{};

	Parms.gridSquareIndex = gridSquareIndex;
	Parms.isOn = isOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetGridSquareStateOnPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   gridSquareIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isOn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetGridSquareStateOnPage(int32 gridSquareIndex, int32 PageIndex, bool isOn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGridSquareStateOnPage");

	Params::StepSequencerTrack_SetGridSquareStateOnPage Parms{};

	Parms.gridSquareIndex = gridSquareIndex;
	Parms.PageIndex = PageIndex;
	Parms.isOn = isOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetMusicItemAtGridSquare
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   gridSquareIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IMidiMusicInterface>MusicItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetMusicItemAtGridSquare(int32 gridSquareIndex, TScriptInterface<class IMidiMusicInterface> MusicItem)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicItemAtGridSquare");

	Params::StepSequencerTrack_SetMusicItemAtGridSquare Parms{};

	Parms.gridSquareIndex = gridSquareIndex;
	Parms.MusicItem = MusicItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetMusicItemForWholeTrack
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiMusicInterface>MusicItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetMusicItemForWholeTrack(TScriptInterface<class IMidiMusicInterface> MusicItem)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicItemForWholeTrack");

	Params::StepSequencerTrack_SetMusicItemForWholeTrack Parms{};

	Parms.MusicItem = MusicItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetMusicItemsInTrack
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TScriptInterface<class IMidiMusicInterface>>musicItems                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetMusicItemsInTrack(const TArray<TScriptInterface<class IMidiMusicInterface>>& musicItems)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicItemsInTrack");

	Params::StepSequencerTrack_SetMusicItemsInTrack Parms{};

	Parms.musicItems = std::move(musicItems);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.SetNumPages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inNumPages                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::SetNumPages(int32 inNumPages)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumPages");

	Params::StepSequencerTrack_SetNumPages Parms{};

	Parms.inNumPages = inNumPages;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.ToggleGridSquareState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   gridSquareIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerTrack::ToggleGridSquareState(int32 gridSquareIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ToggleGridSquareState");

	Params::StepSequencerTrack_ToggleGridSquareState Parms{};

	Parms.gridSquareIndex = gridSquareIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerTrack.FindGridSquareAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMidiMusicTimeSlot*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicTimeSlot* UStepSequencerTrack::FindGridSquareAtIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindGridSquareAtIndex");

	Params::StepSequencerTrack_FindGridSquareAtIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerTrack.FindGridSquareAtTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMidiMusicTimeSlot*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicTimeSlot* UStepSequencerTrack::FindGridSquareAtTick(int32 Tick) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindGridSquareAtTick");

	Params::StepSequencerTrack_FindGridSquareAtTick Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerTrack.GetEndTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerTrack::GetEndTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEndTick");

	Params::StepSequencerTrack_GetEndTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerTrack.GetGridSquareBeats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerTrack::GetGridSquareBeats() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGridSquareBeats");

	Params::StepSequencerTrack_GetGridSquareBeats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerTrack.GetGridSquareState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   gridSquareIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStepSequencerTrack::GetGridSquareState(int32 gridSquareIndex) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGridSquareState");

	Params::StepSequencerTrack_GetGridSquareState Parms{};

	Parms.gridSquareIndex = gridSquareIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerTrack.GetNumGridSquares
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerTrack::GetNumGridSquares() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumGridSquares");

	Params::StepSequencerTrack_GetNumGridSquares Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerTrack.TicksPerSquare
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerTrack::TicksPerSquare() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TicksPerSquare");

	Params::StepSequencerTrack_TicksPerSquare Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.Continue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::Continue()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Continue");

	Params::HarmonixPlayerComponentBase_Continue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.FadeAndStop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::FadeAndStop(float Seconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FadeAndStop");

	Params::HarmonixPlayerComponentBase_FadeAndStop Parms{};

	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetHarmonixHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHarmonixHandle*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixHandle* UHarmonixPlayerComponentBase::GetHarmonixHandle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetHarmonixHandle");

	Params::HarmonixPlayerComponentBase_GetHarmonixHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetSyncClip
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UHarmonixPlayerComponentBase*     syncClip_0                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMusicPlayerComponentBase*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicPlayerComponentBase* UHarmonixPlayerComponentBase::GetSyncClip(class UHarmonixPlayerComponentBase* syncClip_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSyncClip");

	Params::HarmonixPlayerComponentBase_GetSyncClip Parms{};

	Parms.syncClip_0 = syncClip_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::Pause()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Pause");

	Params::HarmonixPlayerComponentBase_Pause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetGain(float Gain_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGain");

	Params::HarmonixPlayerComponentBase_SetGain Parms{};

	Parms.Gain_0 = Gain_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    mute_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetMute(bool mute_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMute");

	Params::HarmonixPlayerComponentBase_SetMute Parms{};

	Parms.mute_0 = mute_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetParameterValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::SetParameterValue(class FName Name_0, float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetParameterValue");

	Params::HarmonixPlayerComponentBase_SetParameterValue Parms{};

	Parms.Name_0 = Name_0;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetPlayEmitterFindMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPlayEmitterFindMethod                  Method                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetPlayEmitterFindMethod(EPlayEmitterFindMethod Method)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPlayEmitterFindMethod");

	Params::HarmonixPlayerComponentBase_SetPlayEmitterFindMethod Parms{};

	Parms.Method = Method;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetStartPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAudioClipStartPosition                 Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetStartPosition(EAudioClipStartPosition Pos)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStartPosition");

	Params::HarmonixPlayerComponentBase_SetStartPosition Parms{};

	Parms.Pos = Pos;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetSyncClip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicPlayerComponentBase*        syncClip_0                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetSyncClip(class UMusicPlayerComponentBase* syncClip_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSyncClip");

	Params::HarmonixPlayerComponentBase_SetSyncClip Parms{};

	Parms.syncClip_0 = syncClip_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetSyncEmitterSpec
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESyncEmitterFindMethod                  syncEmitterSpec_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetSyncEmitterSpec(ESyncEmitterFindMethod syncEmitterSpec_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSyncEmitterSpec");

	Params::HarmonixPlayerComponentBase_SetSyncEmitterSpec Parms{};

	Parms.syncEmitterSpec_0 = syncEmitterSpec_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetTickOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetTickOffset(int32 Tick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTickOffset");

	Params::HarmonixPlayerComponentBase_SetTickOffset Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.SetVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Volume_0                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPlayerComponentBase::SetVolume(float Volume_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVolume");

	Params::HarmonixPlayerComponentBase_SetVolume Parms{};

	Parms.Volume_0 = Volume_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPlayerComponentBase.Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::Stop()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Stop");

	Params::HarmonixPlayerComponentBase_Stop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.Trigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::Trigger()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Trigger");

	Params::HarmonixPlayerComponentBase_Trigger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetElapsedMs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixPlayerComponentBase::GetElapsedMs() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetElapsedMs");

	Params::HarmonixPlayerComponentBase_GetElapsedMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetParameterValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::GetParameterValue(class FName Name_0, float* Value) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetParameterValue");

	Params::HarmonixPlayerComponentBase_GetParameterValue Parms{};

	Parms.Name_0 = Name_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetSecsUntilNextPlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixPlayerComponentBase::GetSecsUntilNextPlay() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSecsUntilNextPlay");

	Params::HarmonixPlayerComponentBase_GetSecsUntilNextPlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetStartPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAudioClipStartPosition                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAudioClipStartPosition UHarmonixPlayerComponentBase::GetStartPosition() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStartPosition");

	Params::HarmonixPlayerComponentBase_GetStartPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetSyncEmitterSpec
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESyncEmitterFindMethod                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESyncEmitterFindMethod UHarmonixPlayerComponentBase::GetSyncEmitterSpec() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSyncEmitterSpec");

	Params::HarmonixPlayerComponentBase_GetSyncEmitterSpec Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.GetTickOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHarmonixPlayerComponentBase::GetTickOffset() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTickOffset");

	Params::HarmonixPlayerComponentBase_GetTickOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.IsFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::IsFinished() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsFinished");

	Params::HarmonixPlayerComponentBase_IsFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.IsNotPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::IsNotPlaying() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsNotPlaying");

	Params::HarmonixPlayerComponentBase_IsNotPlaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.IsPaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::IsPaused() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPaused");

	Params::HarmonixPlayerComponentBase_IsPaused Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::IsPlaying() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPlaying");

	Params::HarmonixPlayerComponentBase_IsPlaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.IsStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::IsStarted() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsStarted");

	Params::HarmonixPlayerComponentBase_IsStarted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPlayerComponentBase.IsTriggered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixPlayerComponentBase::IsTriggered() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsTriggered");

	Params::HarmonixPlayerComponentBase_IsTriggered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.RepeatableMusicalAssetPlayerComponentBase.GetContinuationMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFAudioContinuationMode                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFAudioContinuationMode URepeatableMusicalAssetPlayerComponentBase::GetContinuationMode() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuationMode");

	Params::RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.SynthesizerComponentBase.AllNotesOff
// (Final, Native, Protected, BlueprintCallable)

void USynthesizerComponentBase::AllNotesOff()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AllNotesOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.SynthesizerComponentBase.AllNotesOffQuantized
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UQuartzClockHandle*               InClockHandle                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuartzQuantizationBoundary      InQuantizationBoundary                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)>InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::AllNotesOffQuantized(class UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, const TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)>& InDelegate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AllNotesOffQuantized");

	Params::SynthesizerComponentBase_AllNotesOffQuantized Parms{};

	Parms.InClockHandle = InClockHandle;
	Parms.InQuantizationBoundary = std::move(InQuantizationBoundary);
	Parms.InDelegate = InDelegate;

	UObject::ProcessEvent(Func, &Parms);

	InClockHandle = Parms.InClockHandle;
	InQuantizationBoundary = std::move(Parms.InQuantizationBoundary);
}


// Function HmxAudio.SynthesizerComponentBase.GetController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMidiControllerID                       ControllerId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCCSetting                       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCCSetting USynthesizerComponentBase::GetController(int32 midiChannel, EMidiControllerID ControllerId)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetController");

	Params::SynthesizerComponentBase_GetController Parms{};

	Parms.midiChannel = midiChannel;
	Parms.ControllerId = ControllerId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.SynthesizerComponentBase.GetPitchbend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPBSetting                       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPBSetting USynthesizerComponentBase::GetPitchbend(int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPitchbend");

	Params::SynthesizerComponentBase_GetPitchbend Parms{};

	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.SynthesizerComponentBase.GetSynthHandle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UInstrumentHandle*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInstrumentHandle* USynthesizerComponentBase::GetSynthHandle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSynthHandle");

	Params::SynthesizerComponentBase_GetSynthHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.SynthesizerComponentBase.NoteOff
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   midiCh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::NoteOff(const struct FMidiNote& Note_0, int32 midiCh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOff");

	Params::SynthesizerComponentBase_NoteOff Parms{};

	Parms.Note_0 = std::move(Note_0);
	Parms.midiCh = midiCh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.NoteOffQuantized
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UQuartzClockHandle*               InClockHandle                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuartzQuantizationBoundary      InQuantizationBoundary                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)>InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   midiCh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::NoteOffQuantized(class UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, const TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)>& InDelegate, const struct FMidiNote& Note_0, int32 midiCh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOffQuantized");

	Params::SynthesizerComponentBase_NoteOffQuantized Parms{};

	Parms.InClockHandle = InClockHandle;
	Parms.InQuantizationBoundary = std::move(InQuantizationBoundary);
	Parms.InDelegate = InDelegate;
	Parms.Note_0 = std::move(Note_0);
	Parms.midiCh = midiCh;

	UObject::ProcessEvent(Func, &Parms);

	InClockHandle = Parms.InClockHandle;
	InQuantizationBoundary = std::move(Parms.InQuantizationBoundary);
}


// Function HmxAudio.SynthesizerComponentBase.NoteOn
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Velocity_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::NoteOn(const struct FMidiNote& Note_0, int32 Velocity_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOn");

	Params::SynthesizerComponentBase_NoteOn Parms{};

	Parms.Note_0 = std::move(Note_0);
	Parms.Velocity_0 = Velocity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.NoteOnChannel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Velocity_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiCh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::NoteOnChannel(const struct FMidiNote& Note_0, int32 Velocity_0, int32 midiCh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOnChannel");

	Params::SynthesizerComponentBase_NoteOnChannel Parms{};

	Parms.Note_0 = std::move(Note_0);
	Parms.Velocity_0 = Velocity_0;
	Parms.midiCh = midiCh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.NoteOnChannelWithOffset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Velocity_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   msOffset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiCh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::NoteOnChannelWithOffset(const struct FMidiNote& Note_0, int32 Velocity_0, float msOffset, int32 midiCh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOnChannelWithOffset");

	Params::SynthesizerComponentBase_NoteOnChannelWithOffset Parms{};

	Parms.Note_0 = std::move(Note_0);
	Parms.Velocity_0 = Velocity_0;
	Parms.msOffset = msOffset;
	Parms.midiCh = midiCh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.NoteOnQuantized
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UQuartzClockHandle*               InClockHandle                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuartzQuantizationBoundary      InQuantizationBoundary                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)>InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Velocity_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiCh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::NoteOnQuantized(class UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, const TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)>& InDelegate, const struct FMidiNote& Note_0, int32 Velocity_0, int32 midiCh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOnQuantized");

	Params::SynthesizerComponentBase_NoteOnQuantized Parms{};

	Parms.InClockHandle = InClockHandle;
	Parms.InQuantizationBoundary = std::move(InQuantizationBoundary);
	Parms.InDelegate = InDelegate;
	Parms.Note_0 = std::move(Note_0);
	Parms.Velocity_0 = Velocity_0;
	Parms.midiCh = midiCh;

	UObject::ProcessEvent(Func, &Parms);

	InClockHandle = Parms.InClockHandle;
	InQuantizationBoundary = std::move(Parms.InQuantizationBoundary);
}


// Function HmxAudio.SynthesizerComponentBase.NoteOnWithOffset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Velocity_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   msOffset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::NoteOnWithOffset(const struct FMidiNote& Note_0, int32 Velocity_0, float msOffset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOnWithOffset");

	Params::SynthesizerComponentBase_NoteOnWithOffset Parms{};

	Parms.Note_0 = std::move(Note_0);
	Parms.Velocity_0 = Velocity_0;
	Parms.msOffset = msOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.SetController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMidiControllerID                       ControllerId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::SetController(int32 midiChannel, EMidiControllerID ControllerId, int32 Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetController");

	Params::SynthesizerComponentBase_SetController Parms{};

	Parms.midiChannel = midiChannel;
	Parms.ControllerId = ControllerId;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.SetNote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMidiNote                        Note_0                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::SetNote(const struct FMidiNote& Note_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNote");

	Params::SynthesizerComponentBase_SetNote Parms{};

	Parms.Note_0 = std::move(Note_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.SetPitchBend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::SetPitchBend(int32 midiChannel, float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPitchBend");

	Params::SynthesizerComponentBase_SetPitchBend Parms{};

	Parms.midiChannel = midiChannel;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.SynthesizerComponentBase.SetVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Velocity_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USynthesizerComponentBase::SetVelocity(int32 Velocity_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVelocity");

	Params::SynthesizerComponentBase_SetVelocity Parms{};

	Parms.Velocity_0 = Velocity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.DaggerSynthComponent.SetDaggerPatch
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UDaggerPatchAsset> Patch                                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaggerSynthComponent::SetDaggerPatch(TSoftObjectPtr<class UDaggerPatchAsset> Patch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDaggerPatch");

	Params::DaggerSynthComponent_SetDaggerPatch Parms{};

	Parms.Patch = Patch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.FusionSynthComponent.SetFusionPatch
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UFusionPatchAsset> Patch                                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFusionSynthComponent::SetFusionPatch(TSoftObjectPtr<class UFusionPatchAsset> Patch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFusionPatch");

	Params::FusionSynthComponent_SetFusionPatch Parms{};

	Parms.Patch = Patch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MediaMusicTimelineGenerator.CalculateSongPosAtTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSongPos                         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSongPos UMediaMusicTimelineGenerator::CalculateSongPosAtTick(float Tick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateSongPosAtTick");

	Params::MediaMusicTimelineGenerator_CalculateSongPosAtTick Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MediaMusicTimelineGenerator.GetElapsedMs
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMediaMusicTimelineGenerator::GetElapsedMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetElapsedMs");

	Params::MediaMusicTimelineGenerator_GetElapsedMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MediaMusicTimelineGenerator.GetLengthMs
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMediaMusicTimelineGenerator::GetLengthMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthMs");

	Params::MediaMusicTimelineGenerator_GetLengthMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MediaMusicTimelineGenerator.GetMusicHandle
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMusicHandle*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicHandle* UMediaMusicTimelineGenerator::GetMusicHandle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMusicHandle");

	Params::MediaMusicTimelineGenerator_GetMusicHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MediaMusicTimelineGenerator.SetMediaSoundComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMediaSoundComponent*             InMediaSoundComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMediaMusicTimelineGenerator::SetMediaSoundComponent(class UMediaSoundComponent* InMediaSoundComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMediaSoundComponent");

	Params::MediaMusicTimelineGenerator_SetMediaSoundComponent Parms{};

	Parms.InMediaSoundComponent = InMediaSoundComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMsgBroadcasterComponent.SetEmitter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           InEmitter                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMsgBroadcasterComponent::SetEmitter(class UMusicEmitterComponent* InEmitter)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEmitter");

	Params::MidiMsgBroadcasterComponent_SetEmitter Parms{};

	Parms.InEmitter = InEmitter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMsgBroadcasterComponent.SetMusicHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     InHandle                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMsgBroadcasterComponent::SetMusicHandle(class UMusicHandle* InHandle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicHandle");

	Params::MidiMsgBroadcasterComponent_SetMusicHandle Parms{};

	Parms.InHandle = InHandle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MidiMsgBroadcasterComponent.SetMusicPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicPlayerComponentBase*        InMusicPlayer                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiMsgBroadcasterComponent::SetMusicPlayer(class UMusicPlayerComponentBase* InMusicPlayer)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicPlayer");

	Params::MidiMsgBroadcasterComponent_SetMusicPlayer Parms{};

	Parms.InMusicPlayer = InMusicPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.FindTextEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MarkerText                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           midiTrackName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicPlayerComponentBase::FindTextEvent(const class FString& MarkerText, const class FString& midiTrackName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindTextEvent");

	Params::MusicPlayerComponentBase_FindTextEvent Parms{};

	Parms.MarkerText = std::move(MarkerText);
	Parms.midiTrackName = std::move(midiTrackName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetBar
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicPlayerComponentBase::GetBar(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBar");

	Params::MusicPlayerComponentBase_GetBar Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicPlayerComponentBase::GetBeat(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBeat");

	Params::MusicPlayerComponentBase_GetBeat Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetBeatSpan
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicPlayerComponentBase::GetBeatSpan(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBeatSpan");

	Params::MusicPlayerComponentBase_GetBeatSpan Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetCurrentSection
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMusicPlayerComponentBase::GetCurrentSection()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentSection");

	Params::MusicPlayerComponentBase_GetCurrentSection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetCurrentTempo
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicPlayerComponentBase::GetCurrentTempo()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentTempo");

	Params::MusicPlayerComponentBase_GetCurrentTempo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetLengthInTicks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicPlayerComponentBase::GetLengthInTicks()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthInTicks");

	Params::MusicPlayerComponentBase_GetLengthInTicks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetMeasureSpan
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicTimebase                          inTimebas                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicPlayerComponentBase::GetMeasureSpan(EMusicTimebase inTimebas, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMeasureSpan");

	Params::MusicPlayerComponentBase_GetMeasureSpan Parms{};

	Parms.inTimebas = inTimebas;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetMusicHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicHandle* UMusicPlayerComponentBase::GetMusicHandle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMusicHandle");

	Params::MusicPlayerComponentBase_GetMusicHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetSongPos
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSongPos                         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSongPos UMusicPlayerComponentBase::GetSongPos(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSongPos");

	Params::MusicPlayerComponentBase_GetSongPos Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicPlayerComponentBase::GetTick(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTick");

	Params::MusicPlayerComponentBase_GetTick Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.RegisterMusicalEventRouter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicalEventRouterComponentBase* router                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::RegisterMusicalEventRouter(class UMusicalEventRouterComponentBase* router)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterMusicalEventRouter");

	Params::MusicPlayerComponentBase_RegisterMusicalEventRouter Parms{};

	Parms.router = router;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.Seek
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   positionMs                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::Seek(float positionMs)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Seek");

	Params::MusicPlayerComponentBase_Seek Parms{};

	Parms.positionMs = positionMs;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SeekToTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   seekTick                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SeekToTick(int32 seekTick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SeekToTick");

	Params::MusicPlayerComponentBase_SeekToTick Parms{};

	Parms.seekTick = seekTick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetAllTracksMute
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetAllTracksMute(bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAllTracksMute");

	Params::MusicPlayerComponentBase_SetAllTracksMute Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetLoopViaStartEndBar
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   loopStartBar                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   loopEndBar                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicPlayerComponentBase::SetLoopViaStartEndBar(int32 loopStartBar, int32 loopEndBar, int32 Count)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLoopViaStartEndBar");

	Params::MusicPlayerComponentBase_SetLoopViaStartEndBar Parms{};

	Parms.loopStartBar = loopStartBar;
	Parms.loopEndBar = loopEndBar;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.SetLoopViaStartEndTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   loopStartTick                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   loopEndTick                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicPlayerComponentBase::SetLoopViaStartEndTick(int32 loopStartTick, int32 loopEndTick, int32 Count)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLoopViaStartEndTick");

	Params::MusicPlayerComponentBase_SetLoopViaStartEndTick Parms{};

	Parms.loopStartTick = loopStartTick;
	Parms.loopEndTick = loopEndTick;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.SetMaintainPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    maintainPitch                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetMaintainPitch(bool maintainPitch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMaintainPitch");

	Params::MusicPlayerComponentBase_SetMaintainPitch Parms{};

	Parms.maintainPitch = maintainPitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetSpeed(float Speed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpeed");

	Params::MusicPlayerComponentBase_SetSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetSpeedToAchieveTempo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BPM                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    maintainPitch                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetSpeedToAchieveTempo(float BPM, bool maintainPitch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpeedToAchieveTempo");

	Params::MusicPlayerComponentBase_SetSpeedToAchieveTempo Parms{};

	Parms.BPM = BPM;
	Parms.maintainPitch = maintainPitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetTrackDb
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           trackName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   db                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetTrackDb(const class FString& trackName, float db, float Seconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrackDb");

	Params::MusicPlayerComponentBase_SetTrackDb Parms{};

	Parms.trackName = std::move(trackName);
	Parms.db = db;
	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetTrackGain
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           trackName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   trackGain                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetTrackGain(const class FString& trackName, float trackGain, float Seconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrackGain");

	Params::MusicPlayerComponentBase_SetTrackGain Parms{};

	Parms.trackName = std::move(trackName);
	Parms.trackGain = trackGain;
	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetTrackMute
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTrackChannelSpecifier           trackInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetTrackMute(const struct FTrackChannelSpecifier& trackInfo, bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrackMute");

	Params::MusicPlayerComponentBase_SetTrackMute Parms{};

	Parms.trackInfo = std::move(trackInfo);
	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.SetTransposition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Semitones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::SetTransposition(int32 Semitones)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTransposition");

	Params::MusicPlayerComponentBase_SetTransposition Parms{};

	Parms.Semitones = Semitones;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.UnregisterMusicalEventRouter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicalEventRouterComponentBase* router                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicPlayerComponentBase::UnregisterMusicalEventRouter(class UMusicalEventRouterComponentBase* router)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnregisterMusicalEventRouter");

	Params::MusicPlayerComponentBase_UnregisterMusicalEventRouter Parms{};

	Parms.router = router;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicPlayerComponentBase.CalculateSongPosAtMs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSongPos                         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSongPos UMusicPlayerComponentBase::CalculateSongPosAtMs(float ms) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateSongPosAtMs");

	Params::MusicPlayerComponentBase_CalculateSongPosAtMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.CalculateSongPosAtTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   inTick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSongPos                         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSongPos UMusicPlayerComponentBase::CalculateSongPosAtTick(float inTick) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateSongPosAtTick");

	Params::MusicPlayerComponentBase_CalculateSongPosAtTick Parms{};

	Parms.inTick = inTick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicPlayerComponentBase::GetSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpeed");

	Params::MusicPlayerComponentBase_GetSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicPlayerComponentBase.GetTempoAtTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   atTick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicPlayerComponentBase::GetTempoAtTick(int32 atTick) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTempoAtTick");

	Params::MusicPlayerComponentBase_GetTempoAtTick Parms{};

	Parms.atTick = atTick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalEventRouterComponentBase.AttachToMusicHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     Handle                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicalEventRouterComponentBase::AttachToMusicHandle(class UMusicHandle* Handle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AttachToMusicHandle");

	Params::MusicalEventRouterComponentBase_AttachToMusicHandle Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalEventRouterComponentBase.DetachFromAllMusicHandles
// (Final, Native, Public, BlueprintCallable)

void UMusicalEventRouterComponentBase::DetachFromAllMusicHandles()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DetachFromAllMusicHandles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicalEventRouterComponentBase.DetachFromMusicHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     Handle                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicalEventRouterComponentBase::DetachFromMusicHandle(class UMusicHandle* Handle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DetachFromMusicHandle");

	Params::MusicalEventRouterComponentBase_DetachFromMusicHandle Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalEventRouterComponentBase.IsAttached
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicalEventRouterComponentBase::IsAttached()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsAttached");

	Params::MusicalEventRouterComponentBase_IsAttached Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.SchedulerBasedMusicalEventRouterComponentBase.SecsUntilNextFire
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USchedulerBasedMusicalEventRouterComponentBase::SecsUntilNextFire()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SecsUntilNextFire");

	Params::SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalGridEventRouterComponent.OnTriggered
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMusicalGridEventRouterComponent::OnTriggered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicalTimespanSequencerComponent._ClockIsDying
// (Final, Native, Public)

void UMusicalTimespanSequencerComponent::_ClockIsDying()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_ClockIsDying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicalTimespanSequencerComponent.Cancel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicalTimespanSequencerComponent::Cancel()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Cancel");

	Params::MusicalTimespanSequencerComponent_Cancel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTimespanSequencerComponent.GetProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicalTimespanSequencerComponent::GetProgress()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetProgress");

	Params::MusicalTimespanSequencerComponent_GetProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTimespanSequencerComponent.OnCanceled
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMusicalTimespanSequencerComponent::OnCanceled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCanceled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicalTimespanSequencerComponent.OnSeeked
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMusicalTimeSpan                 nextTrigger                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UMusicalTimespanSequencerComponent::OnSeeked(struct FMusicalTimeSpan* nextTrigger)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSeeked");

	Params::MusicalTimespanSequencerComponent_OnSeeked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (nextTrigger != nullptr)
		*nextTrigger = std::move(Parms.nextTrigger);
}


// Function HmxAudio.MusicalTimespanSequencerComponent.OnTriggered
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMusicalTimeSpan                 nextTrigger                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UMusicalTimespanSequencerComponent::OnTriggered(struct FMusicalTimeSpan* nextTrigger)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTriggered");

	Params::MusicalTimespanSequencerComponent_OnTriggered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (nextTrigger != nullptr)
		*nextTrigger = std::move(Parms.nextTrigger);
}


// Function HmxAudio.MusicalTimespanSequencerComponent.Running
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicalTimespanSequencerComponent::Running()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Running");

	Params::MusicalTimespanSequencerComponent_Running Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicalTimespanSequencerComponent.SetMusicClock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOldMusicClockComponent*          clock                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicalTimespanSequencerComponent::SetMusicClock(class UOldMusicClockComponent* clock)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicClock");

	Params::MusicalTimespanSequencerComponent_SetMusicClock Parms{};

	Parms.clock = clock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicalTimespanSequencerComponent.StartOnNextBeat
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMTSResult                              Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   waitMinimumTicks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   waitMinimumMs                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicalTimespanSequencerComponent::StartOnNextBeat(EMTSResult* Result, int32 waitMinimumTicks, float waitMinimumMs)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartOnNextBeat");

	Params::MusicalTimespanSequencerComponent_StartOnNextBeat Parms{};

	Parms.waitMinimumTicks = waitMinimumTicks;
	Parms.waitMinimumMs = waitMinimumMs;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function HmxAudio.MusicalTimespanSequencerComponent.StartOnNextDownBeat
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMTSResult                              Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   waitMinimumTicks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   waitMinimumMs                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicalTimespanSequencerComponent::StartOnNextDownBeat(EMTSResult* Result, int32 waitMinimumTicks, float waitMinimumMs)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartOnNextDownBeat");

	Params::MusicalTimespanSequencerComponent_StartOnNextDownBeat Parms{};

	Parms.waitMinimumTicks = waitMinimumTicks;
	Parms.waitMinimumMs = waitMinimumMs;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function HmxAudio.MusicEmitterComponent.GetWorldsDefaultMusicEmitter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          worldContextObj                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMusicEmitterComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicEmitterComponent* UMusicEmitterComponent::GetWorldsDefaultMusicEmitter(class UObject* worldContextObj)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetWorldsDefaultMusicEmitter");

	Params::MusicEmitterComponent_GetWorldsDefaultMusicEmitter Parms{};

	Parms.worldContextObj = worldContextObj;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicEmitterComponent.ContinueAllSounds
// (Final, Native, Public, BlueprintCallable)

void UMusicEmitterComponent::ContinueAllSounds()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ContinueAllSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicEmitterComponent.GetBar
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicEmitterComponent::GetBar()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBar");

	Params::MusicEmitterComponent_GetBar Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicEmitterComponent.GetBeat
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicEmitterComponent::GetBeat()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBeat");

	Params::MusicEmitterComponent_GetBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicEmitterComponent.GetParameter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicEmitterComponent::GetParameter(class FName Parameter, float* OutVal)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetParameter");

	Params::MusicEmitterComponent_GetParameter Parms{};

	Parms.Parameter = Parameter;

	UObject::ProcessEvent(Func, &Parms);

	if (OutVal != nullptr)
		*OutVal = Parms.OutVal;

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicEmitterComponent.InsertDynamicSourceEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundEffectSourcePreset*         EffectPreset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicEmitterComponent::InsertDynamicSourceEffect(class USoundEffectSourcePreset* EffectPreset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InsertDynamicSourceEffect");

	Params::MusicEmitterComponent_InsertDynamicSourceEffect Parms{};

	Parms.EffectPreset = EffectPreset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicEmitterComponent.KillAllSounds
// (Final, Native, Public, BlueprintCallable)

void UMusicEmitterComponent::KillAllSounds()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("KillAllSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicEmitterComponent.PauseAllSounds
// (Final, Native, Public, BlueprintCallable)

void UMusicEmitterComponent::PauseAllSounds()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PauseAllSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicEmitterComponent.PlayInstrument
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPlayInstrumentArgs              args                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UInstrumentHandle*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInstrumentHandle* UMusicEmitterComponent::PlayInstrument(const struct FPlayInstrumentArgs& args)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlayInstrument");

	Params::MusicEmitterComponent_PlayInstrument Parms{};

	Parms.args = std::move(args);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicEmitterComponent.PlayMusic
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPlayMusicArgs                   args                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UMusicHandle*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicHandle* UMusicEmitterComponent::PlayMusic(const struct FPlayMusicArgs& args)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlayMusic");

	Params::MusicEmitterComponent_PlayMusic Parms{};

	Parms.args = std::move(args);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicEmitterComponent.RemoveDynamicSourceEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundEffectSourcePreset*         EffectPreset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicEmitterComponent::RemoveDynamicSourceEffect(class USoundEffectSourcePreset* EffectPreset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveDynamicSourceEffect");

	Params::MusicEmitterComponent_RemoveDynamicSourceEffect Parms{};

	Parms.EffectPreset = EffectPreset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicEmitterComponent.SetParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicEmitterComponent::SetParameter(class FName Parameter, float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetParameter");

	Params::MusicEmitterComponent_SetParameter Parms{};

	Parms.Parameter = Parameter;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicEmitterComponent.StopAllSounds
// (Final, Native, Public, BlueprintCallable)

void UMusicEmitterComponent::StopAllSounds()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopAllSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.MusicEmitterComponent.GetSection
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMusicEmitterComponent::GetSection() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSection");

	Params::MusicEmitterComponent_GetSection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicEmitterComponent.GetTimeAuthorityHandle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMusicHandle*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicHandle* UMusicEmitterComponent::GetTimeAuthorityHandle() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTimeAuthorityHandle");

	Params::MusicEmitterComponent_GetTimeAuthorityHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicTimelinePlayerComponent.GetLengthTimeSigAndNativeTempo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   numMeasures                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BPM                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   denom                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicTimelinePlayerComponent::GetLengthTimeSigAndNativeTempo(int32* numMeasures, float* BPM, int32* Num, int32* denom)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthTimeSigAndNativeTempo");

	Params::MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (numMeasures != nullptr)
		*numMeasures = Parms.numMeasures;

	if (BPM != nullptr)
		*BPM = Parms.BPM;

	if (Num != nullptr)
		*Num = Parms.Num;

	if (denom != nullptr)
		*denom = Parms.denom;
}


// Function HmxAudio.MusicTimelinePlayerComponent.GetTimeSignature
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Numerator                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Denominator                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicTimelinePlayerComponent::GetTimeSignature(int32* Numerator, int32* Denominator)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTimeSignature");

	Params::MusicTimelinePlayerComponent_GetTimeSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Numerator != nullptr)
		*Numerator = Parms.Numerator;

	if (Denominator != nullptr)
		*Denominator = Parms.Denominator;
}


// Function HmxAudio.MusicTimelinePlayerComponent.SetLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newMeasures                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicTimelinePlayerComponent::SetLength(int32 newMeasures)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLength");

	Params::MusicTimelinePlayerComponent_SetLength Parms{};

	Parms.newMeasures = newMeasures;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicTimelinePlayerComponent.SetLengthTimeSigAndNativeTempo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newMeasures                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BPM                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   denom                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicTimelinePlayerComponent::SetLengthTimeSigAndNativeTempo(int32 newMeasures, float BPM, int32 Num, int32 denom)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLengthTimeSigAndNativeTempo");

	Params::MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo Parms{};

	Parms.newMeasures = newMeasures;
	Parms.BPM = BPM;
	Parms.Num = Num;
	Parms.denom = denom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicTimelinePlayerComponent.SetTimelineNativeTempo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newTempo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ApplyNow                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicTimelinePlayerComponent::SetTimelineNativeTempo(float newTempo, bool ApplyNow)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimelineNativeTempo");

	Params::MusicTimelinePlayerComponent_SetTimelineNativeTempo Parms{};

	Parms.newTempo = newTempo;
	Parms.ApplyNow = ApplyNow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicTimelinePlayerComponent.SetTimelineNativeTempoImmediate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newTempo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicTimelinePlayerComponent::SetTimelineNativeTempoImmediate(float newTempo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimelineNativeTempoImmediate");

	Params::MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate Parms{};

	Parms.newTempo = newTempo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicTimelinePlayerComponent.SetTimeSignature
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Numerator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Denominator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicTimelinePlayerComponent::SetTimeSignature(int32 Numerator, int32 Denominator)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSignature");

	Params::MusicTimelinePlayerComponent_SetTimeSignature Parms{};

	Parms.Numerator = Numerator;
	Parms.Denominator = Denominator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.OldMusicClockComponent.CreateMusicClock
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Start_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOldMusicClockComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOldMusicClockComponent* UOldMusicClockComponent::CreateMusicClock(class UObject* WorldContextObject, class UMusicEmitterComponent* Emitter, EHarmonixHandleValidity* Result, bool Start_0)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateMusicClock");

	Params::OldMusicClockComponent_CreateMusicClock Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Emitter = Emitter;
	Parms.Start_0 = Start_0;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.MusicalBeatDelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   beats                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMusicHandle*                     MusicHandle                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UOldMusicClockComponent::MusicalBeatDelay(class UObject* WorldContextObject, float beats, EMusicTimebase inTimeBase, class UMusicHandle* MusicHandle, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MusicalBeatDelay");

	Params::OldMusicClockComponent_MusicalBeatDelay Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.beats = beats;
	Parms.inTimeBase = inTimeBase;
	Parms.MusicHandle = MusicHandle;
	Parms.LatentInfo = std::move(LatentInfo);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function HmxAudio.OldMusicClockComponent.MusicalTickDelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ticks                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMusicHandle*                     MusicHandle                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UOldMusicClockComponent::MusicalTickDelay(class UObject* WorldContextObject, int32 ticks, EMusicTimebase inTimeBase, class UMusicHandle* MusicHandle, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MusicalTickDelay");

	Params::OldMusicClockComponent_MusicalTickDelay Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ticks = ticks;
	Parms.inTimeBase = inTimeBase;
	Parms.MusicHandle = MusicHandle;
	Parms.LatentInfo = std::move(LatentInfo);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function HmxAudio.OldMusicClockComponent.Continue
// (Final, Native, Public, BlueprintCallable)

void UOldMusicClockComponent::Continue()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Continue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.OldMusicClockComponent.GetMusicHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicHandle* UOldMusicClockComponent::GetMusicHandle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMusicHandle");

	Params::OldMusicClockComponent_GetMusicHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.Pause
// (Final, Native, Public, BlueprintCallable)

void UOldMusicClockComponent::Pause()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Pause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.OldMusicClockComponent.SetMusicHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     sh                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOldMusicClockComponent::SetMusicHandle(class UMusicHandle* sh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicHandle");

	Params::OldMusicClockComponent_SetMusicHandle Parms{};

	Parms.sh = sh;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.SpawnMusicalGridEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EOldScheduleResult                      outResult                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMusicalTimeSpan                 gridConfig                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   holdOffMs                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   holdOffTicks                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    repeating                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMusicalGridEvent>    EventType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMusicalGridEvent*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicalGridEvent* UOldMusicClockComponent::SpawnMusicalGridEvent(EOldScheduleResult* outResult, const struct FMusicalTimeSpan& gridConfig, float holdOffMs, int32 holdOffTicks, bool repeating, TSubclassOf<class UMusicalGridEvent> EventType, class UObject* Parent, class FName Name_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SpawnMusicalGridEvent");

	Params::OldMusicClockComponent_SpawnMusicalGridEvent Parms{};

	Parms.gridConfig = std::move(gridConfig);
	Parms.holdOffMs = holdOffMs;
	Parms.holdOffTicks = holdOffTicks;
	Parms.repeating = repeating;
	Parms.EventType = EventType;
	Parms.Parent = Parent;
	Parms.Name_0 = Name_0;

	UObject::ProcessEvent(Func, &Parms);

	if (outResult != nullptr)
		*outResult = Parms.outResult;

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.Start
// (Final, Native, Public, BlueprintCallable)

void UOldMusicClockComponent::Start()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.OldMusicClockComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void UOldMusicClockComponent::Stop()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.OldMusicClockComponent.WatchEmitter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOldMusicClockComponent::WatchEmitter(class UMusicEmitterComponent* Emitter, bool Start)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("WatchEmitter");

	Params::OldMusicClockComponent_WatchEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.Start = Start;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.OldMusicClockComponent.GetBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBeat");

	Params::OldMusicClockComponent_GetBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetBeatInMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetBeatInMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBeatInMeasure");

	Params::OldMusicClockComponent_GetBeatInMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetCurentMsPerPulse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetCurentMsPerPulse() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurentMsPerPulse");

	Params::OldMusicClockComponent_GetCurentMsPerPulse Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetCurrentMsPerBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetCurrentMsPerBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentMsPerBeat");

	Params::OldMusicClockComponent_GetCurrentMsPerBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetCurrentMsPerMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetCurrentMsPerMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentMsPerMeasure");

	Params::OldMusicClockComponent_GetCurrentMsPerMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetCurrentMsPerTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetCurrentMsPerTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentMsPerTick");

	Params::OldMusicClockComponent_GetCurrentMsPerTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetCurrentTicksPerMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetCurrentTicksPerMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentTicksPerMeasure");

	Params::OldMusicClockComponent_GetCurrentTicksPerMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetCurrentTicksPerPulse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetCurrentTicksPerPulse() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentTicksPerPulse");

	Params::OldMusicClockComponent_GetCurrentTicksPerPulse Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetDeltaBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetDeltaBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDeltaBeat");

	Params::OldMusicClockComponent_GetDeltaBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetDeltaMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetDeltaMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDeltaMeasure");

	Params::OldMusicClockComponent_GetDeltaMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetDeltaTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetDeltaTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDeltaTick");

	Params::OldMusicClockComponent_GetDeltaTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetFractionalBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetFractionalBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFractionalBeat");

	Params::OldMusicClockComponent_GetFractionalBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetFractionalBeatInMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetFractionalBeatInMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFractionalBeatInMeasure");

	Params::OldMusicClockComponent_GetFractionalBeatInMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetFractionalMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetFractionalMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFractionalMeasure");

	Params::OldMusicClockComponent_GetFractionalMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetFractionalTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetFractionalTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFractionalTick");

	Params::OldMusicClockComponent_GetFractionalTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetFractionalTickInBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetFractionalTickInBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFractionalTickInBeat");

	Params::OldMusicClockComponent_GetFractionalTickInBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetFractionalTickInMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetFractionalTickInMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFractionalTickInMeasure");

	Params::OldMusicClockComponent_GetFractionalTickInMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMeasure");

	Params::OldMusicClockComponent_GetMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetSeconds() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSeconds");

	Params::OldMusicClockComponent_GetSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetSongPos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSongPos                   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSongPos UOldMusicClockComponent::GetSongPos() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSongPos");

	Params::OldMusicClockComponent_GetSongPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOldMusicClockState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOldMusicClockState UOldMusicClockComponent::GetState() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetState");

	Params::OldMusicClockComponent_GetState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTick");

	Params::OldMusicClockComponent_GetTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetTickInBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetTickInBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTickInBeat");

	Params::OldMusicClockComponent_GetTickInBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetTickInMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOldMusicClockComponent::GetTickInMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTickInMeasure");

	Params::OldMusicClockComponent_GetTickInMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetTicksPerMeasure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetTicksPerMeasure() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTicksPerMeasure");

	Params::OldMusicClockComponent_GetTicksPerMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.GetTicksPerPulse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::GetTicksPerPulse() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTicksPerPulse");

	Params::OldMusicClockComponent_GetTicksPerPulse Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.MeasureSpanProgress
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMusicalTimeSpan                 span                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::MeasureSpanProgress(const struct FMusicalTimeSpan& span) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("MeasureSpanProgress");

	Params::OldMusicClockComponent_MeasureSpanProgress Parms{};

	Parms.span = std::move(span);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.MeasureTimeSinceSpan
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMusicalTimeSpan                 span                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::MeasureTimeSinceSpan(const struct FMusicalTimeSpan& span) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("MeasureTimeSinceSpan");

	Params::OldMusicClockComponent_MeasureTimeSinceSpan Parms{};

	Parms.span = std::move(span);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.MeasureTimeUntilSpan
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMusicalTimeSpan                 span                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::MeasureTimeUntilSpan(const struct FMusicalTimeSpan& span) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("MeasureTimeUntilSpan");

	Params::OldMusicClockComponent_MeasureTimeUntilSpan Parms{};

	Parms.span = std::move(span);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.OldMusicClockComponent.MsToFractionalTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOldMusicClockComponent::MsToFractionalTick(float ms) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("MsToFractionalTick");

	Params::OldMusicClockComponent_MsToFractionalTick Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.AppendSteps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::AppendSteps(int32 numSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AppendSteps");

	Params::StepSequencerComponent_AppendSteps Parms{};

	Parms.numSteps = numSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.ApplySaveToTrack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStepSequencerTrack*              track                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::ApplySaveToTrack(class UStepSequencerTrack* track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplySaveToTrack");

	Params::StepSequencerComponent_ApplySaveToTrack Parms{};

	Parms.track = track;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.ApplyTemplate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSequencerSave                   Template                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UStepSequencerComponent::ApplyTemplate(const struct FSequencerSave& Template)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyTemplate");

	Params::StepSequencerComponent_ApplyTemplate Parms{};

	Parms.Template = std::move(Template);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.CreateNewTrack
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTrackArgs                       args                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UStepSequencerTrack*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStepSequencerTrack* UStepSequencerComponent::CreateNewTrack(const struct FTrackArgs& args)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CreateNewTrack");

	Params::StepSequencerComponent_CreateNewTrack Parms{};

	Parms.args = std::move(args);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.MakeNewMidiSongFromTracks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMidiMusicAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiMusicAsset* UStepSequencerComponent::MakeNewMidiSongFromTracks()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("MakeNewMidiSongFromTracks");

	Params::StepSequencerComponent_MakeNewMidiSongFromTracks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.OnAnyGridSquareStateChanged
// (Final, Native, Private)
// Parameters:
// class UStepSequencerTrack*              track                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::OnAnyGridSquareStateChanged(class UStepSequencerTrack* track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAnyGridSquareStateChanged");

	Params::StepSequencerComponent_OnAnyGridSquareStateChanged Parms{};

	Parms.track = track;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.OnGridSquareStateChanged
// (Final, Native, Private)
// Parameters:
// class UStepSequencerTrack*              track                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMidiMusicTimeSlot*               timeSlot                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::OnGridSquareStateChanged(class UStepSequencerTrack* track, class UMidiMusicTimeSlot* timeSlot)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnGridSquareStateChanged");

	Params::StepSequencerComponent_OnGridSquareStateChanged Parms{};

	Parms.track = track;
	Parms.timeSlot = timeSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.OnRep_SequencerSave
// (Final, Native, Private)

void UStepSequencerComponent::OnRep_SequencerSave()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_SequencerSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.StepSequencerComponent.PopSteps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::PopSteps(int32 numSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PopSteps");

	Params::StepSequencerComponent_PopSteps Parms{};

	Parms.numSteps = numSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.RemoveAllTracks
// (Final, Native, Public, BlueprintCallable)

void UStepSequencerComponent::RemoveAllTracks()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveAllTracks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.StepSequencerComponent.RemoveTrack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStepSequencerTrack*              track                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStepSequencerComponent::RemoveTrack(class UStepSequencerTrack* track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveTrack");

	Params::StepSequencerComponent_RemoveTrack Parms{};

	Parms.track = track;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.RemoveTrackAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStepSequencerComponent::RemoveTrackAt(int32 Index_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveTrackAt");

	Params::StepSequencerComponent_RemoveTrackAt Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.SetBeatLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BeatLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::SetBeatLength(float BeatLength)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBeatLength");

	Params::StepSequencerComponent_SetBeatLength Parms{};

	Parms.BeatLength = BeatLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inCurrentPage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::SetCurrentPage(int32 inCurrentPage)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCurrentPage");

	Params::StepSequencerComponent_SetCurrentPage Parms{};

	Parms.inCurrentPage = inCurrentPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.SetMonophonic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewMonophonic                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::SetMonophonic(bool bNewMonophonic)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMonophonic");

	Params::StepSequencerComponent_SetMonophonic Parms{};

	Parms.bNewMonophonic = bNewMonophonic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.SetNumberPages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inPages                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::SetNumberPages(int32 inPages)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumberPages");

	Params::StepSequencerComponent_SetNumberPages Parms{};

	Parms.inPages = inPages;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.UpdateMidiSongOnMidiMusicPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMidiMusicPlayerComponent*        InMidiMusicPlayerComponent                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceRefresh                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStepSequencerComponent::UpdateMidiSongOnMidiMusicPlayer(class UMidiMusicPlayerComponent* InMidiMusicPlayerComponent, bool ForceRefresh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateMidiSongOnMidiMusicPlayer");

	Params::StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer Parms{};

	Parms.InMidiMusicPlayerComponent = InMidiMusicPlayerComponent;
	Parms.ForceRefresh = ForceRefresh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.StepSequencerComponent.FindTrackAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStepSequencerTrack*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStepSequencerTrack* UStepSequencerComponent::FindTrackAt(int32 Index_0) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindTrackAt");

	Params::StepSequencerComponent_FindTrackAt Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerComponent::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentPage");

	Params::StepSequencerComponent_GetCurrentPage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.GetLengthTicks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerComponent::GetLengthTicks() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthTicks");

	Params::StepSequencerComponent_GetLengthTicks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.GetMaxNumSteps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerComponent::GetMaxNumSteps() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMaxNumSteps");

	Params::StepSequencerComponent_GetMaxNumSteps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.GetNumSteps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerComponent::GetNumSteps() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumSteps");

	Params::StepSequencerComponent_GetNumSteps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.StepSequencerComponent.GetNumTracks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UStepSequencerComponent::GetNumTracks() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumTracks");

	Params::StepSequencerComponent_GetNumTracks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.CreateHarmonixAnalyzerInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixAnalyzerEffectSettings  InSettings                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UHarmonixAnalyzerSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixAnalyzerSourceEffectPreset* UHarmonixAnalyzerSourceEffectPreset::CreateHarmonixAnalyzerInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixAnalyzerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixAnalyzerInstanceOnEmitter");

	Params::HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.GetHarmonixAnalyzerResults
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             AnalyzerName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixAnalyzerEffectResults   Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ResetMonoPeakDb                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::GetHarmonixAnalyzerResults(class FName AnalyzerName, struct FHarmonixAnalyzerEffectResults* Result, bool ResetMonoPeakDb)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetHarmonixAnalyzerResults");

	Params::HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults Parms{};

	Parms.AnalyzerName = AnalyzerName;
	Parms.ResetMonoPeakDb = ResetMonoPeakDb;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.GetResults
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerEffectResults   Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ResetMonoPeakDb                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::GetResults(struct FHarmonixAnalyzerEffectResults* Result, bool ResetMonoPeakDb)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetResults");

	Params::HarmonixAnalyzerSourceEffectPreset_GetResults Parms{};

	Parms.ResetMonoPeakDb = ResetMonoPeakDb;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.HardResetVUMeter
// (Final, Native, Public, BlueprintCallable)

void UHarmonixAnalyzerSourceEffectPreset::HardResetVUMeter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HardResetVUMeter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.ResetDynamicRangeMeter
// (Final, Native, Public, BlueprintCallable)

void UHarmonixAnalyzerSourceEffectPreset::ResetDynamicRangeMeter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetDynamicRangeMeter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.ResetDynamicRangePeaks
// (Final, Native, Public, BlueprintCallable)

void UHarmonixAnalyzerSourceEffectPreset::ResetDynamicRangePeaks()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetDynamicRangePeaks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankBandEndHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankBandEndHz(int32 bandIndex, float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankBandEndHz");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz Parms{};

	Parms.bandIndex = bandIndex;
	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankBandOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankBandOutputSettings(int32 bandIndex, const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankBandOutputSettings");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings Parms{};

	Parms.bandIndex = bandIndex;
	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankBandStartHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankBandStartHz(int32 bandIndex, float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankBandStartHz");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz Parms{};

	Parms.bandIndex = bandIndex;
	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankEnabled");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankFallMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankFallMs(int32 bandIndex, float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankFallMs");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs Parms{};

	Parms.bandIndex = bandIndex;
	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankMaxDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   dbMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankMaxDB(int32 bandIndex, float dbMax)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankMaxDB");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB Parms{};

	Parms.bandIndex = bandIndex;
	Parms.dbMax = dbMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankRangeDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   dbRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankRangeDB(int32 bandIndex, float dbRange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankRangeDB");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB Parms{};

	Parms.bandIndex = bandIndex;
	Parms.dbRange = dbRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankRiseMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetBandFilterBankRiseMs(int32 bandIndex, float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankRiseMs");

	Params::HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs Parms{};

	Parms.bandIndex = bandIndex;
	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterAlphas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   highRising                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   highFalling                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   lowRising                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   lowFalling                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetDynamicRangeMeterAlphas(float highRising, float highFalling, float lowRising, float lowFalling)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterAlphas");

	Params::HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas Parms{};

	Parms.highRising = highRising;
	Parms.highFalling = highFalling;
	Parms.lowRising = lowRising;
	Parms.lowFalling = lowFalling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetDynamicRangeMeterEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterEnabled");

	Params::HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Cutoff                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetDynamicRangeMeterFilter(bool Enable, float Cutoff)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterFilter");

	Params::HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter Parms{};

	Parms.Enable = Enable;
	Parms.Cutoff = Cutoff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterRmsWindow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Frames                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetDynamicRangeMeterRmsWindow(int32 Frames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterRmsWindow");

	Params::HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow Parms{};

	Parms.Frames = Frames;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixAnalyzerSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTEnabled");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTEqualLoudnessWeights
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTEqualLoudnessWeights(bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTEqualLoudnessWeights");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTFallMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTFallMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTFallMs");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTLength(int32 Num)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTLength");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTLength Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMaxDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTMaxDB(float dbMax)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMaxDB");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB Parms{};

	Parms.dbMax = dbMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMaxFrequencyHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTMaxFrequencyHz(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMaxFrequencyHz");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMelScaleBinning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTMelScaleBinning(bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMelScaleBinning");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMinFrequencyHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTMinFrequencyHz(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMinFrequencyHz");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTNumResultBins
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTNumResultBins(int32 Num)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTNumResultBins");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTOutputSettings");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTRangeDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTRangeDB(float dbRange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTRangeDB");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB Parms{};

	Parms.dbRange = dbRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTRiseMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetFFTRiseMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTRiseMs");

	Params::HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetNumBandFilterBankBands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Bands                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetNumBandFilterBankBands(int32 Bands)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumBandFilterBankBands");

	Params::HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands Parms{};

	Parms.Bands = Bands;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetSemitoneFilterBankEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankEnabled");

	Params::HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankMinMidiNote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   min_0                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetSemitoneFilterBankMinMidiNote(int32 min_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankMinMidiNote");

	Params::HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote Parms{};

	Parms.min_0 = min_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankNumMidiNotes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetSemitoneFilterBankNumMidiNotes(int32 Num)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankNumMidiNotes");

	Params::HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetSemitoneFilterBankOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankOutputSettings");

	Params::HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerEffectSettings  InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetSettings(const struct FHarmonixAnalyzerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixAnalyzerSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetVUMeterEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterEnabled");

	Params::HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterFallMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetVUMeterFallMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterFallMs");

	Params::HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterMaxDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetVUMeterMaxDB(float dbMax)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterMaxDB");

	Params::HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB Parms{};

	Parms.dbMax = dbMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterRangeDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetVUMeterRangeDB(float dbRange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterRangeDB");

	Params::HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB Parms{};

	Parms.dbRange = dbRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterRiseMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetVUMeterRiseMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterRiseMs");

	Params::HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetVUOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUOutputSettings");

	Params::HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetWaveformEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformEnabled");

	Params::HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformNumBinsHeld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numBins                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetWaveformNumBinsHeld(int32 numBins)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformNumBinsHeld");

	Params::HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld Parms{};

	Parms.numBins = numBins;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformNumBinsPerSecond
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numBinsPerSecond                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetWaveformNumBinsPerSecond(int32 numBinsPerSecond)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformNumBinsPerSecond");

	Params::HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond Parms{};

	Parms.numBinsPerSecond = numBinsPerSecond;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetWaveformOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformOutputSettings");

	Params::HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformSmoothingDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SmoothingDistance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetWaveformSmoothingDistance(int32 SmoothingDistance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformSmoothingDistance");

	Params::HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance Parms{};

	Parms.SmoothingDistance = SmoothingDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformSmoothingFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   smoothingFactor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSourceEffectPreset::SetWaveformSmoothingFactor(float smoothingFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformSmoothingFactor");

	Params::HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor Parms{};

	Parms.smoothingFactor = smoothingFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.CreateHarmonixAnalyzerInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixAnalyzerEffectSettings  InSettings                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UHarmonixAnalyzerSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixAnalyzerSubmixEffectPreset* UHarmonixAnalyzerSubmixEffectPreset::CreateHarmonixAnalyzerInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixAnalyzerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixAnalyzerInstanceOnSubmix");

	Params::HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.GetResults
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerEffectResults   Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ResetMonoPeakDb                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::GetResults(struct FHarmonixAnalyzerEffectResults* Result, bool ResetMonoPeakDb)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetResults");

	Params::HarmonixAnalyzerSubmixEffectPreset_GetResults Parms{};

	Parms.ResetMonoPeakDb = ResetMonoPeakDb;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.HardResetVUMeter
// (Final, Native, Public, BlueprintCallable)

void UHarmonixAnalyzerSubmixEffectPreset::HardResetVUMeter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HardResetVUMeter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.ResetDynamicRangeMeter
// (Final, Native, Public, BlueprintCallable)

void UHarmonixAnalyzerSubmixEffectPreset::ResetDynamicRangeMeter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetDynamicRangeMeter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.ResetDynamicRangePeaks
// (Final, Native, Public, BlueprintCallable)

void UHarmonixAnalyzerSubmixEffectPreset::ResetDynamicRangePeaks()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetDynamicRangePeaks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankBandEndHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankBandEndHz(int32 bandIndex, float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankBandEndHz");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz Parms{};

	Parms.bandIndex = bandIndex;
	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankBandOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankBandOutputSettings(int32 bandIndex, const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankBandOutputSettings");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings Parms{};

	Parms.bandIndex = bandIndex;
	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankBandStartHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankBandStartHz(int32 bandIndex, float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankBandStartHz");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz Parms{};

	Parms.bandIndex = bandIndex;
	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankEnabled");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankFallMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankFallMs(int32 bandIndex, float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankFallMs");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs Parms{};

	Parms.bandIndex = bandIndex;
	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankMaxDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   dbMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankMaxDB(int32 bandIndex, float dbMax)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankMaxDB");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB Parms{};

	Parms.bandIndex = bandIndex;
	Parms.dbMax = dbMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankRangeDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   dbRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankRangeDB(int32 bandIndex, float dbRange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankRangeDB");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB Parms{};

	Parms.bandIndex = bandIndex;
	Parms.dbRange = dbRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankRiseMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetBandFilterBankRiseMs(int32 bandIndex, float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBandFilterBankRiseMs");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs Parms{};

	Parms.bandIndex = bandIndex;
	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterAlphas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   highRising                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   highFalling                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   lowRising                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   lowFalling                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetDynamicRangeMeterAlphas(float highRising, float highFalling, float lowRising, float lowFalling)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterAlphas");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas Parms{};

	Parms.highRising = highRising;
	Parms.highFalling = highFalling;
	Parms.lowRising = lowRising;
	Parms.lowFalling = lowFalling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetDynamicRangeMeterEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterEnabled");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Cutoff                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetDynamicRangeMeterFilter(bool Enable, float Cutoff)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterFilter");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter Parms{};

	Parms.Enable = Enable;
	Parms.Cutoff = Cutoff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterRmsWindow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Frames                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetDynamicRangeMeterRmsWindow(int32 Frames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDynamicRangeMeterRmsWindow");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow Parms{};

	Parms.Frames = Frames;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTEnabled");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTEqualLoudnessWeights
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTEqualLoudnessWeights(bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTEqualLoudnessWeights");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTFallMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTFallMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTFallMs");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTLength(int32 Num)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTLength");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTLength Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMaxDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTMaxDB(float dbMax)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMaxDB");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB Parms{};

	Parms.dbMax = dbMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMaxFrequencyHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTMaxFrequencyHz(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMaxFrequencyHz");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMelScaleBinning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTMelScaleBinning(bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMelScaleBinning");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMinFrequencyHz
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTMinFrequencyHz(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTMinFrequencyHz");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTNumResultBins
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTNumResultBins(int32 Num)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTNumResultBins");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTOutputSettings");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTRangeDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTRangeDB(float dbRange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTRangeDB");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB Parms{};

	Parms.dbRange = dbRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTRiseMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetFFTRiseMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFFTRiseMs");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetNumBandFilterBankBands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Bands                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetNumBandFilterBankBands(int32 Bands)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumBandFilterBankBands");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands Parms{};

	Parms.Bands = Bands;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetSemitoneFilterBankEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankEnabled");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankMinMidiNote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   min_0                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetSemitoneFilterBankMinMidiNote(int32 min_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankMinMidiNote");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote Parms{};

	Parms.min_0 = min_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankNumMidiNotes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetSemitoneFilterBankNumMidiNotes(int32 Num)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankNumMidiNotes");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetSemitoneFilterBankOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSemitoneFilterBankOutputSettings");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerEffectSettings  InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetSettings(const struct FHarmonixAnalyzerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetVUMeterEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterEnabled");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterFallMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetVUMeterFallMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterFallMs");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterMaxDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetVUMeterMaxDB(float dbMax)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterMaxDB");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB Parms{};

	Parms.dbMax = dbMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterRangeDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   dbRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetVUMeterRangeDB(float dbRange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterRangeDB");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB Parms{};

	Parms.dbRange = dbRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterRiseMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetVUMeterRiseMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUMeterRiseMs");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetVUOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVUOutputSettings");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    E                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetWaveformEnabled(bool E)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformEnabled");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled Parms{};

	Parms.E = E;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformNumBinsHeld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numBins                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetWaveformNumBinsHeld(int32 numBins)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformNumBinsHeld");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld Parms{};

	Parms.numBins = numBins;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformNumBinsPerSecond
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numBinsPerSecond                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetWaveformNumBinsPerSecond(int32 numBinsPerSecond)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformNumBinsPerSecond");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond Parms{};

	Parms.numBinsPerSecond = numBinsPerSecond;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformOutputSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixAnalyzerOutputSettings  outSsettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetWaveformOutputSettings(const struct FHarmonixAnalyzerOutputSettings& outSsettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformOutputSettings");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings Parms{};

	Parms.outSsettings = std::move(outSsettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformSmoothingDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SmoothingDistance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetWaveformSmoothingDistance(int32 SmoothingDistance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformSmoothingDistance");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance Parms{};

	Parms.SmoothingDistance = SmoothingDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformSmoothingFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   smoothingFactor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixAnalyzerSubmixEffectPreset::SetWaveformSmoothingFactor(float smoothingFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWaveformSmoothingFactor");

	Params::HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor Parms{};

	Parms.smoothingFactor = smoothingFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.CreateHarmonixBitCrusherInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixBitCrusherEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixBitCrusherSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixBitCrusherSourceEffectPreset* UHarmonixBitCrusherSourceEffectPreset::CreateHarmonixBitCrusherInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixBitCrusherEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixBitCrusherInstanceOnEmitter");

	Params::HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetCrush
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECrushedBitDepth                        crushLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSourceEffectPreset::SetCrush(ECrushedBitDepth crushLevel, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCrush");

	Params::HarmonixBitCrusherSourceEffectPreset_SetCrush Parms{};

	Parms.crushLevel = crushLevel;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixBitCrusherSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetInputGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   inGain                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSourceEffectPreset::SetInputGain(float inGain, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInputGain");

	Params::HarmonixBitCrusherSourceEffectPreset_SetInputGain Parms{};

	Parms.inGain = inGain;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetOutputGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   outGain                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSourceEffectPreset::SetOutputGain(float outGain, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOutputGain");

	Params::HarmonixBitCrusherSourceEffectPreset_SetOutputGain Parms{};

	Parms.outGain = outGain;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetSampleHoldFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   sampleHoldFactor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSourceEffectPreset::SetSampleHoldFactor(int32 sampleHoldFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSampleHoldFactor");

	Params::HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor Parms{};

	Parms.sampleHoldFactor = sampleHoldFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixBitCrusherEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSourceEffectPreset::SetSettings(const struct FHarmonixBitCrusherEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixBitCrusherSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetWet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   wet                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSourceEffectPreset::SetWet(float wet, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWet");

	Params::HarmonixBitCrusherSourceEffectPreset_SetWet Parms{};

	Parms.wet = wet;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.CreateHarmonixBitCrusherInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixBitCrusherEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixBitCrusherSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixBitCrusherSubmixEffectPreset* UHarmonixBitCrusherSubmixEffectPreset::CreateHarmonixBitCrusherInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixBitCrusherEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixBitCrusherInstanceOnSubmix");

	Params::HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetCrush
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECrushedBitDepth                        crushLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSubmixEffectPreset::SetCrush(ECrushedBitDepth crushLevel, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCrush");

	Params::HarmonixBitCrusherSubmixEffectPreset_SetCrush Parms{};

	Parms.crushLevel = crushLevel;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixBitCrusherSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetInputGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   inGain                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSubmixEffectPreset::SetInputGain(float inGain, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInputGain");

	Params::HarmonixBitCrusherSubmixEffectPreset_SetInputGain Parms{};

	Parms.inGain = inGain;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetOutputGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   outGain                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSubmixEffectPreset::SetOutputGain(float outGain, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOutputGain");

	Params::HarmonixBitCrusherSubmixEffectPreset_SetOutputGain Parms{};

	Parms.outGain = outGain;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetSampleHoldFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   sampleHoldFactor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSubmixEffectPreset::SetSampleHoldFactor(int32 sampleHoldFactor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSampleHoldFactor");

	Params::HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor Parms{};

	Parms.sampleHoldFactor = sampleHoldFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixBitCrusherEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSubmixEffectPreset::SetSettings(const struct FHarmonixBitCrusherEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixBitCrusherSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetWet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   wet                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBitCrusherSubmixEffectPreset::SetWet(float wet, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWet");

	Params::HarmonixBitCrusherSubmixEffectPreset_SetWet Parms{};

	Parms.wet = wet;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.CreateHarmonixBufferUtilInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixBufferUtilEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixBufferUtilSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixBufferUtilSourceEffectPreset* UHarmonixBufferUtilSourceEffectPreset::CreateHarmonixBufferUtilInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixBufferUtilEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixBufferUtilInstanceOnEmitter");

	Params::HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetAttach
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    attach                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetAttach(bool attach)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAttach");

	Params::HarmonixBufferUtilSourceEffectPreset_SetAttach Parms{};

	Parms.attach = attach;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetAutomation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetAutomation(int32 A)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAutomation");

	Params::HarmonixBufferUtilSourceEffectPreset_SetAutomation Parms{};

	Parms.A = A;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetBufSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetBufSpeed(float Speed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBufSpeed");

	Params::HarmonixBufferUtilSourceEffectPreset_SetBufSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetDotted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Dotted                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetDotted(bool Dotted)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDotted");

	Params::HarmonixBufferUtilSourceEffectPreset_SetDotted Parms{};

	Parms.Dotted = Dotted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixBufferUtilSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetEven
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Even                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetEven(bool Even)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEven");

	Params::HarmonixBufferUtilSourceEffectPreset_SetEven Parms{};

	Parms.Even = Even;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetMaxDur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BeatValChange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetMaxDur(int32 D, bool BeatValChange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMaxDur");

	Params::HarmonixBufferUtilSourceEffectPreset_SetMaxDur Parms{};

	Parms.D = D;
	Parms.BeatValChange = BeatValChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetMinDur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BeatValChange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetMinDur(int32 D, bool BeatValChange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMinDur");

	Params::HarmonixBufferUtilSourceEffectPreset_SetMinDur Parms{};

	Parms.D = D;
	Parms.BeatValChange = BeatValChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetRepeatP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   P                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetRepeatP(float P)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRepeatP");

	Params::HarmonixBufferUtilSourceEffectPreset_SetRepeatP Parms{};

	Parms.P = P;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetReverseP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   P                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetReverseP(float P)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetReverseP");

	Params::HarmonixBufferUtilSourceEffectPreset_SetReverseP Parms{};

	Parms.P = P;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetScratch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   scratch                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetScratch(float scratch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetScratch");

	Params::HarmonixBufferUtilSourceEffectPreset_SetScratch Parms{};

	Parms.scratch = scratch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   S                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetSequence(int32 S)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSequence");

	Params::HarmonixBufferUtilSourceEffectPreset_SetSequence Parms{};

	Parms.S = S;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixBufferUtilEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetSettings(const struct FHarmonixBufferUtilEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixBufferUtilSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetShuffleP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   P                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetShuffleP(float P)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetShuffleP");

	Params::HarmonixBufferUtilSourceEffectPreset_SetShuffleP Parms{};

	Parms.P = P;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   T                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Len                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AutomationTriggeredSet                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetState(int32 T, int32 Len, bool AutomationTriggeredSet)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetState");

	Params::HarmonixBufferUtilSourceEffectPreset_SetState Parms{};

	Parms.T = T;
	Parms.Len = Len;
	Parms.AutomationTriggeredSet = AutomationTriggeredSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetTriplet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    trip                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSourceEffectPreset::SetTriplet(bool trip)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTriplet");

	Params::HarmonixBufferUtilSourceEffectPreset_SetTriplet Parms{};

	Parms.trip = trip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.CreateHarmonixBufferUtilInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixBufferUtilEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixBufferUtilSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixBufferUtilSubmixEffectPreset* UHarmonixBufferUtilSubmixEffectPreset::CreateHarmonixBufferUtilInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixBufferUtilEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixBufferUtilInstanceOnSubmix");

	Params::HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetAttach
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    attach                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetAttach(bool attach)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAttach");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetAttach Parms{};

	Parms.attach = attach;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetAutomation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetAutomation(int32 A)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAutomation");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetAutomation Parms{};

	Parms.A = A;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetBufSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetBufSpeed(float Speed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBufSpeed");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetDotted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Dotted                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetDotted(bool Dotted)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDotted");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetDotted Parms{};

	Parms.Dotted = Dotted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetEven
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Even                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetEven(bool Even)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEven");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetEven Parms{};

	Parms.Even = Even;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetMaxDur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BeatValChange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetMaxDur(int32 D, bool BeatValChange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMaxDur");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetMaxDur Parms{};

	Parms.D = D;
	Parms.BeatValChange = BeatValChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetMinDur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BeatValChange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetMinDur(int32 D, bool BeatValChange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMinDur");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetMinDur Parms{};

	Parms.D = D;
	Parms.BeatValChange = BeatValChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetRepeatP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   P                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetRepeatP(float P)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRepeatP");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetRepeatP Parms{};

	Parms.P = P;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetReverseP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   P                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetReverseP(float P)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetReverseP");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetReverseP Parms{};

	Parms.P = P;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetScratch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   scratch                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetScratch(float scratch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetScratch");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetScratch Parms{};

	Parms.scratch = scratch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   S                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetSequence(int32 S)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSequence");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetSequence Parms{};

	Parms.S = S;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixBufferUtilEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetSettings(const struct FHarmonixBufferUtilEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetShuffleP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   P                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetShuffleP(float P)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetShuffleP");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetShuffleP Parms{};

	Parms.P = P;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   T                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Len                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AutomationTriggeredSet                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetState(int32 T, int32 Len, bool AutomationTriggeredSet)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetState");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetState Parms{};

	Parms.T = T;
	Parms.Len = Len;
	Parms.AutomationTriggeredSet = AutomationTriggeredSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetTriplet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    trip                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixBufferUtilSubmixEffectPreset::SetTriplet(bool trip)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTriplet");

	Params::HarmonixBufferUtilSubmixEffectPreset_SetTriplet Parms{};

	Parms.trip = trip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.CreateHarmonixDelayInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixDelayEffectSettings     InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixDelaySourceEffectPreset* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixDelaySourceEffectPreset* UHarmonixDelaySourceEffectPreset::CreateHarmonixDelayInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixDelayEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixDelayInstanceOnEmitter");

	Params::HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetDelaySeconds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetDelaySeconds(float Time)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDelaySeconds");

	Params::HarmonixDelaySourceEffectPreset_SetDelaySeconds Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetDryGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetDryGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDryGain");

	Params::HarmonixDelaySourceEffectPreset_SetDryGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixDelaySourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFeedbackGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetFeedbackGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFeedbackGain");

	Params::HarmonixDelaySourceEffectPreset_SetFeedbackGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetFilterEnabled(bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterEnabled");

	Params::HarmonixDelaySourceEffectPreset_SetFilterEnabled Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetFilterFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterFreq");

	Params::HarmonixDelaySourceEffectPreset_SetFilterFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterQ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Q                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetFilterQ(float Q)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterQ");

	Params::HarmonixDelaySourceEffectPreset_SetFilterQ Parms{};

	Parms.Q = Q;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixDelayFilterType                Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetFilterType(EHarmonixDelayFilterType Type)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterType");

	Params::HarmonixDelaySourceEffectPreset_SetFilterType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFODepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetLFODepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFODepth");

	Params::HarmonixDelaySourceEffectPreset_SetLFODepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFOEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetLFOEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOEnabled");

	Params::HarmonixDelaySourceEffectPreset_SetLFOEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFOFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetLFOFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOFreq");

	Params::HarmonixDelaySourceEffectPreset_SetLFOFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFOTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetLFOTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOTimeSyncOption");

	Params::HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetOutputGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetOutputGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOutputGain");

	Params::HarmonixDelaySourceEffectPreset_SetOutputGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixDelayEffectSettings     InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetSettings(const struct FHarmonixDelayEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixDelaySourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetSpeed(float Speed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpeed");

	Params::HarmonixDelaySourceEffectPreset_SetSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetStereoSpreadLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Spread                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetStereoSpreadLeft(float Spread)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStereoSpreadLeft");

	Params::HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft Parms{};

	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetStereoSpreadRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Spread                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetStereoSpreadRight(float Spread)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStereoSpreadRight");

	Params::HarmonixDelaySourceEffectPreset_SetStereoSpreadRight Parms{};

	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetStereoType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixDelayStereoType                Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetStereoType(EHarmonixDelayStereoType Type)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStereoType");

	Params::HarmonixDelaySourceEffectPreset_SetStereoType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetTempo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BPM                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetTempo(float BPM)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTempo");

	Params::HarmonixDelaySourceEffectPreset_SetTempo Parms{};

	Parms.BPM = BPM;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixDelaySourceEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetWetGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySourceEffectPreset::SetWetGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetGain");

	Params::HarmonixDelaySourceEffectPreset_SetWetGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.CreateHarmonixDelayInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixDelayEffectSettings     InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixDelaySubmixEffectPreset* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixDelaySubmixEffectPreset* UHarmonixDelaySubmixEffectPreset::CreateHarmonixDelayInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixDelayEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixDelayInstanceOnSubmix");

	Params::HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetDelaySeconds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetDelaySeconds(float Time)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDelaySeconds");

	Params::HarmonixDelaySubmixEffectPreset_SetDelaySeconds Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetDryGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetDryGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDryGain");

	Params::HarmonixDelaySubmixEffectPreset_SetDryGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixDelaySubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFeedbackGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetFeedbackGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFeedbackGain");

	Params::HarmonixDelaySubmixEffectPreset_SetFeedbackGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetFilterEnabled(bool On)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterEnabled");

	Params::HarmonixDelaySubmixEffectPreset_SetFilterEnabled Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetFilterFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterFreq");

	Params::HarmonixDelaySubmixEffectPreset_SetFilterFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterQ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Q                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetFilterQ(float Q)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterQ");

	Params::HarmonixDelaySubmixEffectPreset_SetFilterQ Parms{};

	Parms.Q = Q;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixDelayFilterType                Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetFilterType(EHarmonixDelayFilterType Type)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFilterType");

	Params::HarmonixDelaySubmixEffectPreset_SetFilterType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFODepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetLFODepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFODepth");

	Params::HarmonixDelaySubmixEffectPreset_SetLFODepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFOEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetLFOEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOEnabled");

	Params::HarmonixDelaySubmixEffectPreset_SetLFOEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFOFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetLFOFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOFreq");

	Params::HarmonixDelaySubmixEffectPreset_SetLFOFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFOTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetLFOTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOTimeSyncOption");

	Params::HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetOutputGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetOutputGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOutputGain");

	Params::HarmonixDelaySubmixEffectPreset_SetOutputGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixDelayEffectSettings     InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetSettings(const struct FHarmonixDelayEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixDelaySubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetSpeed(float Speed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpeed");

	Params::HarmonixDelaySubmixEffectPreset_SetSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetStereoSpreadLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Spread                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetStereoSpreadLeft(float Spread)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStereoSpreadLeft");

	Params::HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft Parms{};

	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetStereoSpreadRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Spread                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetStereoSpreadRight(float Spread)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStereoSpreadRight");

	Params::HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight Parms{};

	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetStereoType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixDelayStereoType                Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetStereoType(EHarmonixDelayStereoType Type)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStereoType");

	Params::HarmonixDelaySubmixEffectPreset_SetStereoType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetTempo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BPM                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetTempo(float BPM)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTempo");

	Params::HarmonixDelaySubmixEffectPreset_SetTempo Parms{};

	Parms.BPM = BPM;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixDelaySubmixEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetWetGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDelaySubmixEffectPreset::SetWetGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetGain");

	Params::HarmonixDelaySubmixEffectPreset_SetWetGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.CreateHarmonixDistortionInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixDistortionEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixDistortionSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixDistortionSourceEffectPreset* UHarmonixDistortionSourceEffectPreset::CreateHarmonixDistortionInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixDistortionEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixDistortionInstanceOnEmitter");

	Params::HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetDCOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetDCOffset(float Offset, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDCOffset");

	Params::HarmonixDistortionSourceEffectPreset_SetDCOffset Parms{};

	Parms.Offset = Offset;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetDryGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetDryGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDryGainDb");

	Params::HarmonixDistortionSourceEffectPreset_SetDryGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixDistortionSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetInputGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetInputGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInputGainDb");

	Params::HarmonixDistortionSourceEffectPreset_SetInputGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetMix
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   M                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetMix(float M, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMix");

	Params::HarmonixDistortionSourceEffectPreset_SetMix Parms{};

	Parms.M = M;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetOutputGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetOutputGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOutputGainDb");

	Params::HarmonixDistortionSourceEffectPreset_SetOutputGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetOversample
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Oversample                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetOversample(bool Oversample)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOversample");

	Params::HarmonixDistortionSourceEffectPreset_SetOversample Parms{};

	Parms.Oversample = Oversample;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixDistortionEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetSettings(const struct FHarmonixDistortionEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixDistortionSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDistortionType                         Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetType(EDistortionType Type)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetType");

	Params::HarmonixDistortionSourceEffectPreset_SetType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetupFilter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pre                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixDistortionBiquadSettingsfilterSettings                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   filterPasses                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetupFilter(int32 Index_0, bool pre, const struct FHarmonixDistortionBiquadSettings& filterSettings, int32 filterPasses)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetupFilter");

	Params::HarmonixDistortionSourceEffectPreset_SetupFilter Parms{};

	Parms.Index_0 = Index_0;
	Parms.pre = pre;
	Parms.filterSettings = std::move(filterSettings);
	Parms.filterPasses = filterPasses;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetWetGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSourceEffectPreset::SetWetGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetGainDb");

	Params::HarmonixDistortionSourceEffectPreset_SetWetGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.CreateHarmonixDistortionInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixDistortionEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixDistortionSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixDistortionSubmixEffectPreset* UHarmonixDistortionSubmixEffectPreset::CreateHarmonixDistortionInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixDistortionEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixDistortionInstanceOnSubmix");

	Params::HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetDCOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetDCOffset(float Offset, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDCOffset");

	Params::HarmonixDistortionSubmixEffectPreset_SetDCOffset Parms{};

	Parms.Offset = Offset;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetDryGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetDryGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDryGainDb");

	Params::HarmonixDistortionSubmixEffectPreset_SetDryGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixDistortionSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetInputGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetInputGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInputGainDb");

	Params::HarmonixDistortionSubmixEffectPreset_SetInputGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetMix
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   M                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetMix(float M, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMix");

	Params::HarmonixDistortionSubmixEffectPreset_SetMix Parms{};

	Parms.M = M;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetOutputGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetOutputGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOutputGainDb");

	Params::HarmonixDistortionSubmixEffectPreset_SetOutputGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetOversample
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Oversample                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetOversample(bool Oversample)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOversample");

	Params::HarmonixDistortionSubmixEffectPreset_SetOversample Parms{};

	Parms.Oversample = Oversample;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixDistortionEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetSettings(const struct FHarmonixDistortionEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixDistortionSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDistortionType                         Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetType(EDistortionType Type)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetType");

	Params::HarmonixDistortionSubmixEffectPreset_SetType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetupFilter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pre                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixDistortionBiquadSettingsfilterSettings                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   filterPasses                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetupFilter(int32 Index_0, bool pre, const struct FHarmonixDistortionBiquadSettings& filterSettings, int32 filterPasses)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetupFilter");

	Params::HarmonixDistortionSubmixEffectPreset_SetupFilter Parms{};

	Parms.Index_0 = Index_0;
	Parms.pre = pre;
	Parms.filterSettings = std::move(filterSettings);
	Parms.filterPasses = filterPasses;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetWetGainDb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GainDb                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Snap                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixDistortionSubmixEffectPreset::SetWetGainDb(float GainDb, bool Snap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetGainDb");

	Params::HarmonixDistortionSubmixEffectPreset_SetWetGainDb Parms{};

	Parms.GainDb = GainDb;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.CreateHarmonixFlangerInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixFlangerEffectSettings   InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixFlangerSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixFlangerSourceEffectPreset* UHarmonixFlangerSourceEffectPreset::CreateHarmonixFlangerInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixFlangerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixFlangerInstanceOnEmitter");

	Params::HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetDelayTimeMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetDelayTimeMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDelayTimeMs");

	Params::HarmonixFlangerSourceEffectPreset_SetDelayTimeMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetDepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDepth");

	Params::HarmonixFlangerSourceEffectPreset_SetDepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixFlangerSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetExcursion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ex                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetExcursion(float ex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetExcursion");

	Params::HarmonixFlangerSourceEffectPreset_SetExcursion Parms{};

	Parms.ex = ex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   fb                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetFeedback(float fb)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFeedback");

	Params::HarmonixFlangerSourceEffectPreset_SetFeedback Parms{};

	Parms.fb = fb;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetInvert
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Invert                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetInvert(bool Invert)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInvert");

	Params::HarmonixFlangerSourceEffectPreset_SetInvert Parms{};

	Parms.Invert = Invert;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetModFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   freq                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetModFreq(float freq, bool Force)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetModFreq");

	Params::HarmonixFlangerSourceEffectPreset_SetModFreq Parms{};

	Parms.freq = freq;
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetModShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixFlangerShapes                  S                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetModShape(EHarmonixFlangerShapes S)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetModShape");

	Params::HarmonixFlangerSourceEffectPreset_SetModShape Parms{};

	Parms.S = S;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixFlangerEffectSettings   InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetSettings(const struct FHarmonixFlangerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixFlangerSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   currentBeatFraction                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSourceEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option, float currentBeatFraction)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixFlangerSourceEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;
	Parms.currentBeatFraction = currentBeatFraction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.CreateHarmonixFlangerInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixFlangerEffectSettings   InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixFlangerSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixFlangerSubmixEffectPreset* UHarmonixFlangerSubmixEffectPreset::CreateHarmonixFlangerInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixFlangerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixFlangerInstanceOnSubmix");

	Params::HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetDelayTimeMs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetDelayTimeMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDelayTimeMs");

	Params::HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetDepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDepth");

	Params::HarmonixFlangerSubmixEffectPreset_SetDepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixFlangerSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetExcursion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ex                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetExcursion(float ex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetExcursion");

	Params::HarmonixFlangerSubmixEffectPreset_SetExcursion Parms{};

	Parms.ex = ex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   fb                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetFeedback(float fb)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFeedback");

	Params::HarmonixFlangerSubmixEffectPreset_SetFeedback Parms{};

	Parms.fb = fb;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetInvert
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Invert                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetInvert(bool Invert)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInvert");

	Params::HarmonixFlangerSubmixEffectPreset_SetInvert Parms{};

	Parms.Invert = Invert;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetModFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   freq                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetModFreq(float freq, bool Force)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetModFreq");

	Params::HarmonixFlangerSubmixEffectPreset_SetModFreq Parms{};

	Parms.freq = freq;
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetModShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixFlangerShapes                  S                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetModShape(EHarmonixFlangerShapes S)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetModShape");

	Params::HarmonixFlangerSubmixEffectPreset_SetModShape Parms{};

	Parms.S = S;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixFlangerEffectSettings   InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetSettings(const struct FHarmonixFlangerEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixFlangerSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   currentBeatFraction                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixFlangerSubmixEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option, float currentBeatFraction)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;
	Parms.currentBeatFraction = currentBeatFraction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.CreateHarmonixPhaserInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixPhaserEffectSettings    InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixPhaserSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixPhaserSourceEffectPreset* UHarmonixPhaserSourceEffectPreset::CreateHarmonixPhaserInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixPhaserEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixPhaserInstanceOnEmitter");

	Params::HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetColor(float Color)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetColor");

	Params::HarmonixPhaserSourceEffectPreset_SetColor Parms{};

	Parms.Color = Color;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetDepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDepth");

	Params::HarmonixPhaserSourceEffectPreset_SetDepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixPhaserSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   fb                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetFeedback(float fb)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFeedback");

	Params::HarmonixPhaserSourceEffectPreset_SetFeedback Parms{};

	Parms.fb = fb;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetFrequency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetFrequency(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFrequency");

	Params::HarmonixPhaserSourceEffectPreset_SetFrequency Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetNumPoles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numPoles                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetNumPoles(int32 numPoles)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumPoles");

	Params::HarmonixPhaserSourceEffectPreset_SetNumPoles Parms{};

	Parms.numPoles = numPoles;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetPhase(float Phase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPhase");

	Params::HarmonixPhaserSourceEffectPreset_SetPhase Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetRate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRate");

	Params::HarmonixPhaserSourceEffectPreset_SetRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixPhaserEffectSettings    InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetSettings(const struct FHarmonixPhaserEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixPhaserSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixPhaserShapes                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetShape(EHarmonixPhaserShapes Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetShape");

	Params::HarmonixPhaserSourceEffectPreset_SetShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixPhaserSourceEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetWetDry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   wetDry                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSourceEffectPreset::SetWetDry(float wetDry)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetDry");

	Params::HarmonixPhaserSourceEffectPreset_SetWetDry Parms{};

	Parms.wetDry = wetDry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.CreateHarmonixPhaserInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixPhaserEffectSettings    InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixPhaserSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixPhaserSubmixEffectPreset* UHarmonixPhaserSubmixEffectPreset::CreateHarmonixPhaserInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixPhaserEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixPhaserInstanceOnSubmix");

	Params::HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetColor(float Color)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetColor");

	Params::HarmonixPhaserSubmixEffectPreset_SetColor Parms{};

	Parms.Color = Color;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetDepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDepth");

	Params::HarmonixPhaserSubmixEffectPreset_SetDepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixPhaserSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   fb                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetFeedback(float fb)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFeedback");

	Params::HarmonixPhaserSubmixEffectPreset_SetFeedback Parms{};

	Parms.fb = fb;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetFrequency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetFrequency(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFrequency");

	Params::HarmonixPhaserSubmixEffectPreset_SetFrequency Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetNumPoles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numPoles                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetNumPoles(int32 numPoles)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumPoles");

	Params::HarmonixPhaserSubmixEffectPreset_SetNumPoles Parms{};

	Parms.numPoles = numPoles;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetPhase(float Phase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPhase");

	Params::HarmonixPhaserSubmixEffectPreset_SetPhase Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetRate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRate");

	Params::HarmonixPhaserSubmixEffectPreset_SetRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixPhaserEffectSettings    InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetSettings(const struct FHarmonixPhaserEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixPhaserSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixPhaserShapes                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetShape(EHarmonixPhaserShapes Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetShape");

	Params::HarmonixPhaserSubmixEffectPreset_SetShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetWetDry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   wetDry                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixPhaserSubmixEffectPreset::SetWetDry(float wetDry)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetDry");

	Params::HarmonixPhaserSubmixEffectPreset_SetWetDry Parms{};

	Parms.wetDry = wetDry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.CreateHarmonixStutterEditInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixStutterEditEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixStutterEditSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixStutterEditSourceEffectPreset* UHarmonixStutterEditSourceEffectPreset::CreateHarmonixStutterEditInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixStutterEditEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixStutterEditInstanceOnEmitter");

	Params::HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.Capture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   fromTick                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   toTick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::Capture(int32 fromTick, int32 toTick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Capture");

	Params::HarmonixStutterEditSourceEffectPreset_Capture Parms{};

	Parms.fromTick = fromTick;
	Parms.toTick = toTick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.EndStutter
// (Final, Native, Public, BlueprintCallable)

void UHarmonixStutterEditSourceEffectPreset::EndStutter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndStutter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.ScheduleStutter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   lengthInTicks                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offsetTicks                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::ScheduleStutter(int32 Tick, int32 lengthInTicks, bool isReverse, int32 offsetTicks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ScheduleStutter");

	Params::HarmonixStutterEditSourceEffectPreset_ScheduleStutter Parms{};

	Parms.Tick = Tick;
	Parms.lengthInTicks = lengthInTicks;
	Parms.isReverse = isReverse;
	Parms.offsetTicks = offsetTicks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetAllowPassthrough
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    allow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::SetAllowPassthrough(bool allow)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAllowPassthrough");

	Params::HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough Parms{};

	Parms.allow = allow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixStutterEditSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetFadeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    fade                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::SetFadeEnabled(bool fade)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFadeEnabled");

	Params::HarmonixStutterEditSourceEffectPreset_SetFadeEnabled Parms{};

	Parms.fade = fade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixStutterEditEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::SetSettings(const struct FHarmonixStutterEditEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixStutterEditSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetSilenceWhileScheduled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::SetSilenceWhileScheduled(bool B)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSilenceWhileScheduled");

	Params::HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled Parms{};

	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetSyncDriver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHarmonixHandle*                  Handle                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::SetSyncDriver(class UHarmonixHandle* Handle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSyncDriver");

	Params::HarmonixStutterEditSourceEffectPreset_SetSyncDriver Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetVarispeedForTempoChanges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    V                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSourceEffectPreset::SetVarispeedForTempoChanges(bool V)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVarispeedForTempoChanges");

	Params::HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges Parms{};

	Parms.V = V;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.CreateHarmonixStutterEditInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixStutterEditEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixStutterEditSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixStutterEditSubmixEffectPreset* UHarmonixStutterEditSubmixEffectPreset::CreateHarmonixStutterEditInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixStutterEditEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixStutterEditInstanceOnSubmix");

	Params::HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.Capture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   fromTick                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   toTick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::Capture(int32 fromTick, int32 toTick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Capture");

	Params::HarmonixStutterEditSubmixEffectPreset_Capture Parms{};

	Parms.fromTick = fromTick;
	Parms.toTick = toTick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.EndStutter
// (Final, Native, Public, BlueprintCallable)

void UHarmonixStutterEditSubmixEffectPreset::EndStutter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndStutter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.ScheduleStutter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   lengthInTicks                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offsetTicks                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::ScheduleStutter(int32 Tick, int32 lengthInTicks, bool isReverse, int32 offsetTicks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ScheduleStutter");

	Params::HarmonixStutterEditSubmixEffectPreset_ScheduleStutter Parms{};

	Parms.Tick = Tick;
	Parms.lengthInTicks = lengthInTicks;
	Parms.isReverse = isReverse;
	Parms.offsetTicks = offsetTicks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetAllowPassthrough
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    allow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::SetAllowPassthrough(bool allow)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAllowPassthrough");

	Params::HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough Parms{};

	Parms.allow = allow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixStutterEditSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetFadeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    fade                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::SetFadeEnabled(bool fade)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFadeEnabled");

	Params::HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled Parms{};

	Parms.fade = fade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixStutterEditEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::SetSettings(const struct FHarmonixStutterEditEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixStutterEditSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetSilenceWhileScheduled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::SetSilenceWhileScheduled(bool B)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSilenceWhileScheduled");

	Params::HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled Parms{};

	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetSyncDriver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHarmonixHandle*                  Handle                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::SetSyncDriver(class UHarmonixHandle* Handle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSyncDriver");

	Params::HarmonixStutterEditSubmixEffectPreset_SetSyncDriver Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetVarispeedForTempoChanges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    V                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixStutterEditSubmixEffectPreset::SetVarispeedForTempoChanges(bool V)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVarispeedForTempoChanges");

	Params::HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges Parms{};

	Parms.V = V;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.CreateHarmonixTapeStartStopInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixTapeStartStopEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixTapeStartStopSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixTapeStartStopSourceEffectPreset* UHarmonixTapeStartStopSourceEffectPreset::CreateHarmonixTapeStartStopInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixTapeStartStopEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixTapeStartStopInstanceOnEmitter");

	Params::HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixTapeStartStopSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixTapeStartStopEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSourceEffectPreset::SetSettings(const struct FHarmonixTapeStartStopEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixTapeStartStopSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SetTransportState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixTapeStartStopTransportState    Transport                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSourceEffectPreset::SetTransportState(EHarmonixTapeStartStopTransportState Transport, float Duration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTransportState");

	Params::HarmonixTapeStartStopSourceEffectPreset_SetTransportState Parms{};

	Parms.Transport = Transport;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SnapTransportState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixTapeStartStopTransportState    Transport                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSourceEffectPreset::SnapTransportState(EHarmonixTapeStartStopTransportState Transport)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SnapTransportState");

	Params::HarmonixTapeStartStopSourceEffectPreset_SnapTransportState Parms{};

	Parms.Transport = Transport;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.CreateHarmonixTapeStartStopInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixTapeStartStopEffectSettingsInSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixTapeStartStopSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixTapeStartStopSubmixEffectPreset* UHarmonixTapeStartStopSubmixEffectPreset::CreateHarmonixTapeStartStopInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixTapeStartStopEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixTapeStartStopInstanceOnSubmix");

	Params::HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixTapeStartStopSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixTapeStartStopEffectSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSubmixEffectPreset::SetSettings(const struct FHarmonixTapeStartStopEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixTapeStartStopSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SetTransportState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixTapeStartStopTransportState    Transport                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSubmixEffectPreset::SetTransportState(EHarmonixTapeStartStopTransportState Transport, float Duration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTransportState");

	Params::HarmonixTapeStartStopSubmixEffectPreset_SetTransportState Parms{};

	Parms.Transport = Transport;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SnapTransportState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHarmonixTapeStartStopTransportState    Transport                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTapeStartStopSubmixEffectPreset::SnapTransportState(EHarmonixTapeStartStopTransportState Transport)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SnapTransportState");

	Params::HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState Parms{};

	Parms.Transport = Transport;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.CreateHarmonixTremoloInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixTremoloEffectSettings   InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixTremoloSourceEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixTremoloSourceEffectPreset* UHarmonixTremoloSourceEffectPreset::CreateHarmonixTremoloInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixTremoloEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixTremoloInstanceOnEmitter");

	Params::HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSourceEffectPreset::SetDepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDepth");

	Params::HarmonixTremoloSourceEffectPreset_SetDepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixTremoloSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetInvertLFO
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    inv                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSourceEffectPreset::SetInvertLFO(bool inv)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInvertLFO");

	Params::HarmonixTremoloSourceEffectPreset_SetInvertLFO Parms{};

	Parms.inv = inv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetLFORate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSourceEffectPreset::SetLFORate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORate");

	Params::HarmonixTremoloSourceEffectPreset_SetLFORate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixTremoloEffectSettings   InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixTremoloSourceEffectPreset::SetSettings(const struct FHarmonixTremoloEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixTremoloSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSourceEffectPreset::SetShape(float Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetShape");

	Params::HarmonixTremoloSourceEffectPreset_SetShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSourceEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixTremoloSourceEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.CreateHarmonixTremoloInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixTremoloEffectSettings   InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixTremoloSubmixEffectPreset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixTremoloSubmixEffectPreset* UHarmonixTremoloSubmixEffectPreset::CreateHarmonixTremoloInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixTremoloEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixTremoloInstanceOnSubmix");

	Params::HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSubmixEffectPreset::SetDepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDepth");

	Params::HarmonixTremoloSubmixEffectPreset_SetDepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixTremoloSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetInvertLFO
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    inv                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSubmixEffectPreset::SetInvertLFO(bool inv)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInvertLFO");

	Params::HarmonixTremoloSubmixEffectPreset_SetInvertLFO Parms{};

	Parms.inv = inv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetLFORate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSubmixEffectPreset::SetLFORate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORate");

	Params::HarmonixTremoloSubmixEffectPreset_SetLFORate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixTremoloEffectSettings   InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixTremoloSubmixEffectPreset::SetSettings(const struct FHarmonixTremoloEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixTremoloSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSubmixEffectPreset::SetShape(float Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetShape");

	Params::HarmonixTremoloSubmixEffectPreset_SetShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixTremoloSubmixEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.CreateHarmonixVibeInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixVibeEffectSettings      InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixVibeSourceEffectPreset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixVibeSourceEffectPreset* UHarmonixVibeSourceEffectPreset::CreateHarmonixVibeInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixVibeEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixVibeInstanceOnEmitter");

	Params::HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixVibeSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   stageIdx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   freq                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetFreq(int32 stageIdx, float freq)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFreq");

	Params::HarmonixVibeSourceEffectPreset_SetFreq Parms{};

	Parms.stageIdx = stageIdx;
	Parms.freq = freq;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGain");

	Params::HarmonixVibeSourceEffectPreset_SetGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetLFODepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetLFODepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFODepth");

	Params::HarmonixVibeSourceEffectPreset_SetLFODepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetLFORate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetLFORate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORate");

	Params::HarmonixVibeSourceEffectPreset_SetLFORate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetLFOShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetLFOShape(float Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOShape");

	Params::HarmonixVibeSourceEffectPreset_SetLFOShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixVibeEffectSettings      InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetSettings(const struct FHarmonixVibeEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixVibeSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixVibeSourceEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetWetMix
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   wetMix                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSourceEffectPreset::SetWetMix(float wetMix)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetMix");

	Params::HarmonixVibeSourceEffectPreset_SetWetMix Parms{};

	Parms.wetMix = wetMix;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.CreateHarmonixVibeInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixVibeEffectSettings      InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixVibeSubmixEffectPreset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixVibeSubmixEffectPreset* UHarmonixVibeSubmixEffectPreset::CreateHarmonixVibeInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixVibeEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixVibeInstanceOnSubmix");

	Params::HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixVibeSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   stageIdx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   freq                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetFreq(int32 stageIdx, float freq)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFreq");

	Params::HarmonixVibeSubmixEffectPreset_SetFreq Parms{};

	Parms.stageIdx = stageIdx;
	Parms.freq = freq;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGain");

	Params::HarmonixVibeSubmixEffectPreset_SetGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetLFODepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetLFODepth(float Depth)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFODepth");

	Params::HarmonixVibeSubmixEffectPreset_SetLFODepth Parms{};

	Parms.Depth = Depth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetLFORate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetLFORate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORate");

	Params::HarmonixVibeSubmixEffectPreset_SetLFORate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetLFOShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetLFOShape(float Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOShape");

	Params::HarmonixVibeSubmixEffectPreset_SetLFOShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixVibeEffectSettings      InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetSettings(const struct FHarmonixVibeEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixVibeSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixVibeSubmixEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetWetMix
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   wetMix                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixVibeSubmixEffectPreset::SetWetMix(float wetMix)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWetMix");

	Params::HarmonixVibeSubmixEffectPreset_SetWetMix Parms{};

	Parms.wetMix = wetMix;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.CreateHarmonixWahInstanceOnEmitter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicEmitterComponent*           Emitter                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixWahEffectSettings       InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixWahSourceEffectPreset*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixWahSourceEffectPreset* UHarmonixWahSourceEffectPreset::CreateHarmonixWahInstanceOnEmitter(class UMusicEmitterComponent* Emitter, struct FHarmonixWahEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixWahInstanceOnEmitter");

	Params::HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter Parms{};

	Parms.Emitter = Emitter;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.NotifyNoteOn
// (Final, Native, Public, BlueprintCallable)

void UHarmonixWahSourceEffectPreset::NotifyNoteOn()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NotifyNoteOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetAutoWahEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetAutoWahEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAutoWahEnabled");

	Params::HarmonixWahSourceEffectPreset_SetAutoWahEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetClosedFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetClosedFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetClosedFreq");

	Params::HarmonixWahSourceEffectPreset_SetClosedFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetClosedQ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Q                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetClosedQ(float Q)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetClosedQ");

	Params::HarmonixWahSourceEffectPreset_SetClosedQ Parms{};

	Parms.Q = Q;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixWahSourceEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGain");

	Params::HarmonixWahSourceEffectPreset_SetGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetLFORate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetLFORate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORate");

	Params::HarmonixWahSourceEffectPreset_SetLFORate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetLFORateScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetLFORateScale(float Scale)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORateScale");

	Params::HarmonixWahSourceEffectPreset_SetLFORateScale Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetLFOShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetLFOShape(float Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOShape");

	Params::HarmonixWahSourceEffectPreset_SetLFOShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetOpenFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetOpenFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOpenFreq");

	Params::HarmonixWahSourceEffectPreset_SetOpenFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetOpenOnAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetOpenOnAttack(bool Enable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOpenOnAttack");

	Params::HarmonixWahSourceEffectPreset_SetOpenOnAttack Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetOpenQ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Q                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetOpenQ(float Q)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOpenQ");

	Params::HarmonixWahSourceEffectPreset_SetOpenQ Parms{};

	Parms.Q = Q;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixWahEffectSettings       InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetSettings(const struct FHarmonixWahEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixWahSourceEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetSteepFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    steep                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetSteepFilter(bool steep)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSteepFilter");

	Params::HarmonixWahSourceEffectPreset_SetSteepFilter Parms{};

	Parms.steep = steep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSourceEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSourceEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixWahSourceEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.CreateHarmonixWahInstanceOnSubmix
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundSubmix*                     Submix                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHarmonixWahEffectSettings       InSettings                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UHarmonixWahSubmixEffectPreset*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHarmonixWahSubmixEffectPreset* UHarmonixWahSubmixEffectPreset::CreateHarmonixWahInstanceOnSubmix(const class UObject* WorldContextObject, class USoundSubmix* Submix, struct FHarmonixWahEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CreateHarmonixWahInstanceOnSubmix");

	Params::HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Submix = Submix;
	Parms.InSettings = std::move(InSettings);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	InSettings = std::move(Parms.InSettings);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.NotifyNoteOn
// (Final, Native, Public, BlueprintCallable)

void UHarmonixWahSubmixEffectPreset::NotifyNoteOn()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NotifyNoteOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetAutoWahEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetAutoWahEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAutoWahEnabled");

	Params::HarmonixWahSubmixEffectPreset_SetAutoWahEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetClosedFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetClosedFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetClosedFreq");

	Params::HarmonixWahSubmixEffectPreset_SetClosedFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetClosedQ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Q                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetClosedQ(float Q)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetClosedQ");

	Params::HarmonixWahSubmixEffectPreset_SetClosedQ Parms{};

	Parms.Q = Q;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::HarmonixWahSubmixEffectPreset_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetGain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetGain(float Gain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGain");

	Params::HarmonixWahSubmixEffectPreset_SetGain Parms{};

	Parms.Gain = Gain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetLFORate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetLFORate(float Rate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORate");

	Params::HarmonixWahSubmixEffectPreset_SetLFORate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetLFORateScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetLFORateScale(float Scale)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFORateScale");

	Params::HarmonixWahSubmixEffectPreset_SetLFORateScale Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetLFOShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Shape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetLFOShape(float Shape)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLFOShape");

	Params::HarmonixWahSubmixEffectPreset_SetLFOShape Parms{};

	Parms.Shape = Shape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetOpenFreq
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   hz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetOpenFreq(float hz)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOpenFreq");

	Params::HarmonixWahSubmixEffectPreset_SetOpenFreq Parms{};

	Parms.hz = hz;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetOpenOnAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetOpenOnAttack(bool Enable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOpenOnAttack");

	Params::HarmonixWahSubmixEffectPreset_SetOpenOnAttack Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetOpenQ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Q                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetOpenQ(float Q)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOpenQ");

	Params::HarmonixWahSubmixEffectPreset_SetOpenQ Parms{};

	Parms.Q = Q;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHarmonixWahEffectSettings       InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetSettings(const struct FHarmonixWahEffectSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSettings");

	Params::HarmonixWahSubmixEffectPreset_SetSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetSteepFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    steep                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetSteepFilter(bool steep)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSteepFilter");

	Params::HarmonixWahSubmixEffectPreset_SetSteepFilter Parms{};

	Parms.steep = steep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetTimeSyncOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETempoListenerTimeSyncOption            Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixWahSubmixEffectPreset::SetTimeSyncOption(ETempoListenerTimeSyncOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSyncOption");

	Params::HarmonixWahSubmixEffectPreset_SetTimeSyncOption Parms{};

	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HmxMusicWorldSubsystem.OnAuditionTimeout
// (Final, Native, Private)

void UHmxMusicWorldSubsystem::OnAuditionTimeout()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAuditionTimeout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixHandle.Continue
// (Final, Native, Protected, BlueprintCallable)

void UHarmonixHandle::Continue()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Continue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixHandle.GetElapsedMs
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetElapsedMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetElapsedMs");

	Params::HarmonixHandle_GetElapsedMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetGain
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetGain()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGain");

	Params::HarmonixHandle_GetGain Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetLengthMs
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetLengthMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthMs");

	Params::HarmonixHandle_GetLengthMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetMute
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixHandle::GetMute()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMute");

	Params::HarmonixHandle_GetMute Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetParameter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EParamExists                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetParameter(class FName Param, EParamExists* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetParameter");

	Params::HarmonixHandle_GetParameter Parms{};

	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetRawPitchMultiplier
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetRawPitchMultiplier()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRawPitchMultiplier");

	Params::HarmonixHandle_GetRawPitchMultiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetSpeed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetSpeed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpeed");

	Params::HarmonixHandle_GetSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetTimelineMs
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetTimelineMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTimelineMs");

	Params::HarmonixHandle_GetTimelineMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetTransportState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EAudioTransportState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAudioTransportState UHarmonixHandle::GetTransportState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTransportState");

	Params::HarmonixHandle_GetTransportState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.GetVolume
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHarmonixHandle::GetVolume()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetVolume");

	Params::HarmonixHandle_GetVolume Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandle.Kill
// (Final, Native, Protected, BlueprintCallable)

void UHarmonixHandle::Kill()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Kill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixHandle.Pause
// (Final, Native, Protected, BlueprintCallable)

void UHarmonixHandle::Pause()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Pause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixHandle.SeekToMs
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixHandle::SeekToMs(float ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SeekToMs");

	Params::HarmonixHandle_SeekToMs Parms{};

	Parms.ms = ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixHandle.SetGain
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPostFadeOption                         Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixHandle::SetGain(float Gain, float Seconds, EPostFadeOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGain");

	Params::HarmonixHandle_SetGain Parms{};

	Parms.Gain = Gain;
	Parms.Seconds = Seconds;
	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixHandle.SetMute
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    muted                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixHandle::SetMute(bool muted)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMute");

	Params::HarmonixHandle_SetMute Parms{};

	Parms.muted = muted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixHandle.SetParameter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EParamExists                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixHandle::SetParameter(class FName Param, float Value, EParamExists* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetParameter");

	Params::HarmonixHandle_SetParameter Parms{};

	Parms.Param = Param;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function HmxAudio.HarmonixHandle.SetRawPitchMultiplier
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixHandle::SetRawPitchMultiplier(float PitchMultiplier)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRawPitchMultiplier");

	Params::HarmonixHandle_SetRawPitchMultiplier Parms{};

	Parms.PitchMultiplier = PitchMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixHandle.SetSpeed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    maintainPitch                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixHandle::SetSpeed(float Speed, bool maintainPitch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpeed");

	Params::HarmonixHandle_SetSpeed Parms{};

	Parms.Speed = Speed;
	Parms.maintainPitch = maintainPitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixHandle.SetVolume
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   vol                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPostFadeOption                         Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarmonixHandle::SetVolume(float vol, float Seconds, EPostFadeOption Option)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVolume");

	Params::HarmonixHandle_SetVolume Parms{};

	Parms.vol = vol;
	Parms.Seconds = Seconds;
	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.HarmonixHandle.Stop
// (Final, Native, Protected, BlueprintCallable)

void UHarmonixHandle::Stop()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.HarmonixHandleUtil.CastToInstrumentHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          worldContextObj                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHarmonixHandle*                  H                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInstrumentHandle*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInstrumentHandle* UHarmonixHandleUtil::CastToInstrumentHandle(class UObject* worldContextObj, class UHarmonixHandle* H, EHarmonixHandleValidity* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CastToInstrumentHandle");

	Params::HarmonixHandleUtil_CastToInstrumentHandle Parms{};

	Parms.worldContextObj = worldContextObj;
	Parms.H = H;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandleUtil.CastToMusicHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          worldContextObj                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHarmonixHandle*                  H                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMusicHandle*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicHandle* UHarmonixHandleUtil::CastToMusicHandle(class UObject* worldContextObj, class UHarmonixHandle* H, EHarmonixHandleValidity* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CastToMusicHandle");

	Params::HarmonixHandleUtil_CastToMusicHandle Parms{};

	Parms.worldContextObj = worldContextObj;
	Parms.H = H;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandleUtil.HarmonixHandleIsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UHarmonixHandle*                  HarmonixHandle                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixHandleUtil::HarmonixHandleIsValid(class UHarmonixHandle* HarmonixHandle, EHarmonixHandleValidity* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("HarmonixHandleIsValid");

	Params::HarmonixHandleUtil_HarmonixHandleIsValid Parms{};

	Parms.HarmonixHandle = HarmonixHandle;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandleUtil.InstrumentHandleIsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInstrumentHandle*                InstrumentHandle                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixHandleUtil::InstrumentHandleIsValid(class UInstrumentHandle* InstrumentHandle, EHarmonixHandleValidity* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("InstrumentHandleIsValid");

	Params::HarmonixHandleUtil_InstrumentHandleIsValid Parms{};

	Parms.InstrumentHandle = InstrumentHandle;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandleUtil.IsInstrument
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UHarmonixHandle*                  HarmonixHandle                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixHandleUtil::IsInstrument(class UHarmonixHandle* HarmonixHandle, EHarmonixHandleValidity* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IsInstrument");

	Params::HarmonixHandleUtil_IsInstrument Parms{};

	Parms.HarmonixHandle = HarmonixHandle;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandleUtil.IsMusic
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UHarmonixHandle*                  HarmonixHandle                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixHandleUtil::IsMusic(class UHarmonixHandle* HarmonixHandle, EHarmonixHandleValidity* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IsMusic");

	Params::HarmonixHandleUtil_IsMusic Parms{};

	Parms.HarmonixHandle = HarmonixHandle;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.HarmonixHandleUtil.MusicHandleIsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     MusicHandle                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHarmonixHandleValidity                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHarmonixHandleUtil::MusicHandleIsValid(class UMusicHandle* MusicHandle, EHarmonixHandleValidity* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MusicHandleIsValid");

	Params::HarmonixHandleUtil_MusicHandleIsValid Parms{};

	Parms.MusicHandle = MusicHandle;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.InstrumentHandle.AllNotesOff
// (Final, Native, Protected, BlueprintCallable)

void UInstrumentHandle::AllNotesOff()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AllNotesOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.InstrumentHandle.ClearPeakVoiceUsage
// (Final, Native, Protected, BlueprintCallable)

void UInstrumentHandle::ClearPeakVoiceUsage()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearPeakVoiceUsage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.InstrumentHandle.GetController
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInstrumentHandle::GetController(int32 Controller, int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetController");

	Params::InstrumentHandle_GetController Parms{};

	Parms.Controller = Controller;
	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.InstrumentHandle.GetMaxNumVoices
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInstrumentHandle::GetMaxNumVoices()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMaxNumVoices");

	Params::InstrumentHandle_GetMaxNumVoices Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.InstrumentHandle.GetNumVoicesInUse
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInstrumentHandle::GetNumVoicesInUse()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumVoicesInUse");

	Params::InstrumentHandle_GetNumVoicesInUse Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.InstrumentHandle.GetPitchbend
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInstrumentHandle::GetPitchbend(int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPitchbend");

	Params::InstrumentHandle_GetPitchbend Parms{};

	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.InstrumentHandle.GetRawTransposition
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInstrumentHandle::GetRawTransposition()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRawTransposition");

	Params::InstrumentHandle_GetRawTransposition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.InstrumentHandle.GetVoiceUsage
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Current                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   peak                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::GetVoiceUsage(int32* Current, int32* peak)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetVoiceUsage");

	Params::InstrumentHandle_GetVoiceUsage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Current != nullptr)
		*Current = Parms.Current;

	if (peak != nullptr)
		*peak = Parms.peak;
}


// Function HmxAudio.InstrumentHandle.KillAllVoices
// (Final, Native, Protected, BlueprintCallable)

void UInstrumentHandle::KillAllVoices()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("KillAllVoices");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HmxAudio.InstrumentHandle.NoteIsOn
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   midiNoteNumber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstrumentHandle::NoteIsOn(int32 midiNoteNumber, int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteIsOn");

	Params::InstrumentHandle_NoteIsOn Parms{};

	Parms.midiNoteNumber = midiNoteNumber;
	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.InstrumentHandle.NoteOff
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   midiNoteNumber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::NoteOff(int32 midiNoteNumber, int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOff");

	Params::InstrumentHandle_NoteOff Parms{};

	Parms.midiNoteNumber = midiNoteNumber;
	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.InstrumentHandle.NoteOn
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   midiNoteNumber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::NoteOn(int32 midiNoteNumber, int32 Velocity, int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NoteOn");

	Params::InstrumentHandle_NoteOn Parms{};

	Parms.midiNoteNumber = midiNoteNumber;
	Parms.Velocity = Velocity;
	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.InstrumentHandle.NotesOff
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           midiNoteNumbers                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           Channels                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInstrumentHandle::NotesOff(TArray<int32>* midiNoteNumbers, TArray<int32>* Channels)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NotesOff");

	Params::InstrumentHandle_NotesOff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (midiNoteNumbers != nullptr)
		*midiNoteNumbers = std::move(Parms.midiNoteNumbers);

	if (Channels != nullptr)
		*Channels = std::move(Parms.Channels);
}


// Function HmxAudio.InstrumentHandle.NotesOn
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           midiNoteNumbers                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           velocities                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           Channels                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInstrumentHandle::NotesOn(TArray<int32>* midiNoteNumbers, TArray<int32>* velocities, TArray<int32>* Channels)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NotesOn");

	Params::InstrumentHandle_NotesOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (midiNoteNumbers != nullptr)
		*midiNoteNumbers = std::move(Parms.midiNoteNumbers);

	if (velocities != nullptr)
		*velocities = std::move(Parms.velocities);

	if (Channels != nullptr)
		*Channels = std::move(Parms.Channels);
}


// Function HmxAudio.InstrumentHandle.ProcessMidiMessage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   data1                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   data2                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::ProcessMidiMessage(int32 Status, int32 data1, int32 data2)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ProcessMidiMessage");

	Params::InstrumentHandle_ProcessMidiMessage Parms{};

	Parms.Status = Status;
	Parms.data1 = data1;
	Parms.data2 = data2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.InstrumentHandle.SetController
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::SetController(int32 Controller, float Value, int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetController");

	Params::InstrumentHandle_SetController Parms{};

	Parms.Controller = Controller;
	Parms.Value = Value;
	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.InstrumentHandle.SetExtraPitchBend
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Semitones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::SetExtraPitchBend(float Semitones, int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetExtraPitchBend");

	Params::InstrumentHandle_SetExtraPitchBend Parms{};

	Parms.Semitones = Semitones;
	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.InstrumentHandle.SetPitchBend
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   midiChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::SetPitchBend(float Value, int32 midiChannel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPitchBend");

	Params::InstrumentHandle_SetPitchBend Parms{};

	Parms.Value = Value;
	Parms.midiChannel = midiChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.InstrumentHandle.SetRawTransposition
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Semitones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::SetRawTransposition(int32 Semitones)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRawTransposition");

	Params::InstrumentHandle_SetRawTransposition Parms{};

	Parms.Semitones = Semitones;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.InstrumentHandle.SetTempo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   BPM                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstrumentHandle::SetTempo(float BPM)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTempo");

	Params::InstrumentHandle_SetTempo Parms{};

	Parms.BPM = BPM;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.ClearLoop
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ignoreLookAhead                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::ClearLoop(bool ignoreLookAhead)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearLoop");

	Params::MusicHandle_ClearLoop Parms{};

	Parms.ignoreLookAhead = ignoreLookAhead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.ClearTimeAuthority
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    maintainLastTempoSpeed                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::ClearTimeAuthority(bool maintainLastTempoSpeed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearTimeAuthority");

	Params::MusicHandle_ClearTimeAuthority Parms{};

	Parms.maintainLastTempoSpeed = maintainLastTempoSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.FindLowLevelMidiTrackIndex
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           trackName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicFindResults                       Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicHandle::FindLowLevelMidiTrackIndex(const class FString& trackName, EMusicFindResults* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindLowLevelMidiTrackIndex");

	Params::MusicHandle_FindLowLevelMidiTrackIndex Parms{};

	Parms.trackName = std::move(trackName);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.FindSectionIndex
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicFindResults                       Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicHandle::FindSectionIndex(const class FString& Name_0, EMusicFindResults* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindSectionIndex");

	Params::MusicHandle_FindSectionIndex Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.FindTrackIndex
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           trackName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicFindResults                       Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicHandle::FindTrackIndex(const class FString& trackName, EMusicFindResults* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindTrackIndex");

	Params::MusicHandle_FindTrackIndex Parms{};

	Parms.trackName = std::move(trackName);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetAudioLatencyMs
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicHandle::GetAudioLatencyMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAudioLatencyMs");

	Params::MusicHandle_GetAudioLatencyMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetCurrentSectionName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMusicHandle::GetCurrentSectionName(EMusicTimebase inTimeBase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentSectionName");

	Params::MusicHandle_GetCurrentSectionName Parms{};

	Parms.inTimeBase = inTimeBase;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetMs
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicHandle::GetMs(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMs");

	Params::MusicHandle_GetMs Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetNumSections
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicHandle::GetNumSections()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumSections");

	Params::MusicHandle_GetNumSections Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetNumTracks
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicHandle::GetNumTracks()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumTracks");

	Params::MusicHandle_GetNumTracks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetRawTransposition
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicHandle::GetRawTransposition()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRawTransposition");

	Params::MusicHandle_GetRawTransposition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetSecsAndTicksUntilPlay
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   secs                                                   (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ticks                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicHandle::GetSecsAndTicksUntilPlay(float& secs, int32& ticks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSecsAndTicksUntilPlay");

	Params::MusicHandle_GetSecsAndTicksUntilPlay Parms{};

	Parms.secs = secs;
	Parms.ticks = ticks;

	UObject::ProcessEvent(Func, &Parms);

	secs = Parms.secs;
	ticks = Parms.ticks;

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetSectionName
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicFindResults                       Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMusicHandle::GetSectionName(int32 SectionIndex, EMusicFindResults* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSectionName");

	Params::MusicHandle_GetSectionName Parms{};

	Parms.SectionIndex = SectionIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetSectionNameAtTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMusicHandle::GetSectionNameAtTick(int32 Tick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSectionNameAtTick");

	Params::MusicHandle_GetSectionNameAtTick Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetSectionNames
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UMusicHandle::GetSectionNames()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSectionNames");

	Params::MusicHandle_GetSectionNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetSmoothingLatencyMs
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicHandle::GetSmoothingLatencyMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSmoothingLatencyMs");

	Params::MusicHandle_GetSmoothingLatencyMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetSongPos
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSongPos                         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSongPos UMusicHandle::GetSongPos(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSongPos");

	Params::MusicHandle_GetSongPos Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetSoundId
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMusicHandle::GetSoundId()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSoundId");

	Params::MusicHandle_GetSoundId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EMusicTimebase                          inTimeBase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicTimeStart                         InTimeStart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMusicHandle::GetTick(EMusicTimebase inTimeBase, EMusicTimeStart InTimeStart)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTick");

	Params::MusicHandle_GetTick Parms{};

	Parms.inTimeBase = inTimeBase;
	Parms.InTimeStart = InTimeStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetTrackDb
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   track                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicHandle::GetTrackDb(int32 track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackDb");

	Params::MusicHandle_GetTrackDb Parms{};

	Parms.track = track;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetTrackGain
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   track                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicHandle::GetTrackGain(int32 track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackGain");

	Params::MusicHandle_GetTrackGain Parms{};

	Parms.track = track;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetTrackMute
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   track                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicHandle::GetTrackMute(int32 track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackMute");

	Params::MusicHandle_GetTrackMute Parms{};

	Parms.track = track;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetTrackName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   TrackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMusicHandle::GetTrackName(int32 TrackIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackName");

	Params::MusicHandle_GetTrackName Parms{};

	Parms.TrackIndex = TrackIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetTrackNames
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UMusicHandle::GetTrackNames()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackNames");

	Params::MusicHandle_GetTrackNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.GetVideoLatencyMs
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicHandle::GetVideoLatencyMs()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetVideoLatencyMs");

	Params::MusicHandle_GetVideoLatencyMs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.Loop
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   fromTick                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   toTick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicHandle::Loop(int32 fromTick, int32 toTick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Loop");

	Params::MusicHandle_Loop Parms{};

	Parms.fromTick = fromTick;
	Parms.toTick = toTick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.LoopSection
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicHandle::LoopSection(int32 SectionIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LoopSection");

	Params::MusicHandle_LoopSection Parms{};

	Parms.SectionIndex = SectionIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.LoopWithCount
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   fromTick                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   toTick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   numTimes                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicHandle::LoopWithCount(int32 fromTick, int32 toTick, int32 numTimes)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LoopWithCount");

	Params::MusicHandle_LoopWithCount Parms{};

	Parms.fromTick = fromTick;
	Parms.toTick = toTick;
	Parms.numTimes = numTimes;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.SeekToContentTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SeekToContentTick(int32 Tick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SeekToContentTick");

	Params::MusicHandle_SeekToContentTick Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SeekToSongTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SeekToSongTick(int32 Tick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SeekToSongTick");

	Params::MusicHandle_SeekToSongTick Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SetFutureUnmute
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EFMusicUnmutePoint                      unmutePoint                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SetFutureUnmute(EFMusicUnmutePoint unmutePoint)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFutureUnmute");

	Params::MusicHandle_SetFutureUnmute Parms{};

	Parms.unmutePoint = unmutePoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SetFutureUnmuteByTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    useTimeAuthoritysTick                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SetFutureUnmuteByTick(int32 Tick, bool useTimeAuthoritysTick)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFutureUnmuteByTick");

	Params::MusicHandle_SetFutureUnmuteByTick Parms{};

	Parms.Tick = Tick;
	Parms.useTimeAuthoritysTick = useTimeAuthoritysTick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SetRawTransposition
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Semitones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SetRawTransposition(int32 Semitones)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRawTransposition");

	Params::MusicHandle_SetRawTransposition Parms{};

	Parms.Semitones = Semitones;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SetSpeedToAchieveTempo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   BPM                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    maintainPitch                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SetSpeedToAchieveTempo(float BPM, bool maintainPitch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpeedToAchieveTempo");

	Params::MusicHandle_SetSpeedToAchieveTempo Parms{};

	Parms.BPM = BPM;
	Parms.maintainPitch = maintainPitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SetTimeAuthority
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UMusicHandle*                     authority                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMusicSyncConfig                 syncConfig                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicHandle::SetTimeAuthority(class UMusicHandle* authority, const struct FMusicSyncConfig& syncConfig)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeAuthority");

	Params::MusicHandle_SetTimeAuthority Parms{};

	Parms.authority = authority;
	Parms.syncConfig = std::move(syncConfig);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function HmxAudio.MusicHandle.SetTrackDb
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   track                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   db                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   sec                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SetTrackDb(int32 track, float db, float sec)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrackDb");

	Params::MusicHandle_SetTrackDb Parms{};

	Parms.track = track;
	Parms.db = db;
	Parms.sec = sec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SetTrackGain
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   track                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Gain                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   sec                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SetTrackGain(int32 track, float Gain, float sec)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrackGain");

	Params::MusicHandle_SetTrackGain Parms{};

	Parms.track = track;
	Parms.Gain = Gain;
	Parms.sec = sec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.SetTrackMute
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Tick                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    muted                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicHandle::SetTrackMute(int32 Tick, bool muted)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrackMute");

	Params::MusicHandle_SetTrackMute Parms{};

	Parms.Tick = Tick;
	Parms.muted = muted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HmxAudio.MusicHandle.StopWithReleases
// (Final, Native, Protected, BlueprintCallable)

void UMusicHandle::StopWithReleases()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopWithReleases");

	UObject::ProcessEvent(Func, nullptr);
}

}

