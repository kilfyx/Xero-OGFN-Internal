#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Concert

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ConcertTransport_structs.hpp"


namespace SDK
{

// Enum Concert.EConcertLogMessageAction
// NumValues: 0x000D
enum class EConcertLogMessageAction : uint8
{
	None                                     = 0,
	Send                                     = 1,
	Publish                                  = 2,
	Receive                                  = 3,
	Queue                                    = 4,
	Discard                                  = 5,
	Duplicate                                = 6,
	TimeOut                                  = 7,
	Process                                  = 8,
	EndpointDiscovery                        = 9,
	EndpointTimeOut                          = 10,
	EndpointClosure                          = 11,
	EConcertLogMessageAction_MAX             = 12,
};

// Enum Concert.EConcertServerFlags
// NumValues: 0x0003
enum class EConcertServerFlags : uint8
{
	None                                     = 0,
	IgnoreSessionRequirement                 = 1,
	EConcertServerFlags_MAX                  = 2,
};

// Enum Concert.EConcertSessionRepositoryMountResponseCode
// NumValues: 0x0005
enum class EConcertSessionRepositoryMountResponseCode : uint8
{
	None                                     = 0,
	Mounted                                  = 1,
	AlreadyMounted                           = 2,
	NotFound                                 = 3,
	EConcertSessionRepositoryMountResponseCode_MAX = 4,
};

// Enum Concert.EConcertSessionResponseCode
// NumValues: 0x0004
enum class EConcertSessionResponseCode : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	InvalidRequest                           = 2,
	EConcertSessionResponseCode_MAX          = 3,
};

// Enum Concert.EConcertClientStatus
// NumValues: 0x0004
enum class EConcertClientStatus : uint8
{
	Connected                                = 0,
	Disconnected                             = 1,
	Updated                                  = 2,
	EConcertClientStatus_MAX                 = 3,
};

// Enum Concert.EConcertConnectionResult
// NumValues: 0x0005
enum class EConcertConnectionResult : uint8
{
	None                                     = 0,
	ConnectionAccepted                       = 1,
	ConnectionRefused                        = 2,
	AlreadyConnected                         = 3,
	EConcertConnectionResult_MAX             = 4,
};

// Enum Concert.EConcertConnectionStatus
// NumValues: 0x0005
enum class EConcertConnectionStatus : uint8
{
	Connecting                               = 0,
	Connected                                = 1,
	Disconnecting                            = 2,
	Disconnected                             = 3,
	EConcertConnectionStatus_MAX             = 4,
};

// Enum Concert.EConcertSourceValidationMode
// NumValues: 0x0004
enum class EConcertSourceValidationMode : uint8
{
	Hard                                     = 0,
	Soft                                     = 1,
	SoftAutoProceed                          = 2,
	EConcertSourceValidationMode_MAX         = 3,
};

// ScriptStruct Concert.ConcertSessionSerializedPayload
// 0x0020 (0x0020 - 0x0000)
struct FConcertSessionSerializedPayload final
{
public:
	class FName                                   PayloadTypeName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedPayloadSize;                           // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CompressedPayload;                                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSessionSerializedPayload) == 0x000008, "Wrong alignment on FConcertSessionSerializedPayload");
static_assert(sizeof(FConcertSessionSerializedPayload) == 0x000020, "Wrong size on FConcertSessionSerializedPayload");
static_assert(offsetof(FConcertSessionSerializedPayload, PayloadTypeName) == 0x000000, "Member 'FConcertSessionSerializedPayload::PayloadTypeName' has a wrong offset!");
static_assert(offsetof(FConcertSessionSerializedPayload, UncompressedPayloadSize) == 0x000008, "Member 'FConcertSessionSerializedPayload::UncompressedPayloadSize' has a wrong offset!");
static_assert(offsetof(FConcertSessionSerializedPayload, CompressedPayload) == 0x000010, "Member 'FConcertSessionSerializedPayload::CompressedPayload' has a wrong offset!");

// ScriptStruct Concert.ConcertLog
// 0x0090 (0x0090 - 0x0000)
struct FConcertLog final
{
public:
	uint64                                        Frame;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MessageID;                                         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MessageOrderIndex;                                 // 0x0018(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ChannelId;                                         // 0x001A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Timestamp;                                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertLogMessageAction                      MessageAction;                                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MessageTypeName;                                   // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OriginEndpointId;                                  // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  DestinationEndpointId;                             // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomPayloadTypename;                             // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomPayloadUncompressedByteSize;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringPayload;                                     // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSessionSerializedPayload       SerializedPayload;                                 // 0x0070(0x0020)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertLog) == 0x000008, "Wrong alignment on FConcertLog");
static_assert(sizeof(FConcertLog) == 0x000090, "Wrong size on FConcertLog");
static_assert(offsetof(FConcertLog, Frame) == 0x000000, "Member 'FConcertLog::Frame' has a wrong offset!");
static_assert(offsetof(FConcertLog, MessageID) == 0x000008, "Member 'FConcertLog::MessageID' has a wrong offset!");
static_assert(offsetof(FConcertLog, MessageOrderIndex) == 0x000018, "Member 'FConcertLog::MessageOrderIndex' has a wrong offset!");
static_assert(offsetof(FConcertLog, ChannelId) == 0x00001A, "Member 'FConcertLog::ChannelId' has a wrong offset!");
static_assert(offsetof(FConcertLog, Timestamp) == 0x000020, "Member 'FConcertLog::Timestamp' has a wrong offset!");
static_assert(offsetof(FConcertLog, MessageAction) == 0x000028, "Member 'FConcertLog::MessageAction' has a wrong offset!");
static_assert(offsetof(FConcertLog, MessageTypeName) == 0x00002C, "Member 'FConcertLog::MessageTypeName' has a wrong offset!");
static_assert(offsetof(FConcertLog, OriginEndpointId) == 0x000034, "Member 'FConcertLog::OriginEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertLog, DestinationEndpointId) == 0x000044, "Member 'FConcertLog::DestinationEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertLog, CustomPayloadTypename) == 0x000054, "Member 'FConcertLog::CustomPayloadTypename' has a wrong offset!");
static_assert(offsetof(FConcertLog, CustomPayloadUncompressedByteSize) == 0x00005C, "Member 'FConcertLog::CustomPayloadUncompressedByteSize' has a wrong offset!");
static_assert(offsetof(FConcertLog, StringPayload) == 0x000060, "Member 'FConcertLog::StringPayload' has a wrong offset!");
static_assert(offsetof(FConcertLog, SerializedPayload) == 0x000070, "Member 'FConcertLog::SerializedPayload' has a wrong offset!");

// ScriptStruct Concert.ConcertInstanceInfo
// 0x0030 (0x0030 - 0x0000)
struct FConcertInstanceInfo final
{
public:
	struct FGuid                                  InstanceID;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceName;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceType;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertInstanceInfo) == 0x000008, "Wrong alignment on FConcertInstanceInfo");
static_assert(sizeof(FConcertInstanceInfo) == 0x000030, "Wrong size on FConcertInstanceInfo");
static_assert(offsetof(FConcertInstanceInfo, InstanceID) == 0x000000, "Member 'FConcertInstanceInfo::InstanceID' has a wrong offset!");
static_assert(offsetof(FConcertInstanceInfo, InstanceName) == 0x000010, "Member 'FConcertInstanceInfo::InstanceName' has a wrong offset!");
static_assert(offsetof(FConcertInstanceInfo, InstanceType) == 0x000020, "Member 'FConcertInstanceInfo::InstanceType' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_ServerDiscoveredEvent
// 0x0048 (0x0078 - 0x0030)
struct FConcertAdmin_ServerDiscoveredEvent final : public FConcertEndpointDiscoveryEvent
{
public:
	class FString                                 ServerName;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertInstanceInfo                   InstanceInfo;                                      // 0x0040(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
	EConcertServerFlags                           ServerFlags;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertAdmin_ServerDiscoveredEvent) == 0x000008, "Wrong alignment on FConcertAdmin_ServerDiscoveredEvent");
static_assert(sizeof(FConcertAdmin_ServerDiscoveredEvent) == 0x000078, "Wrong size on FConcertAdmin_ServerDiscoveredEvent");
static_assert(offsetof(FConcertAdmin_ServerDiscoveredEvent, ServerName) == 0x000030, "Member 'FConcertAdmin_ServerDiscoveredEvent::ServerName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ServerDiscoveredEvent, InstanceInfo) == 0x000040, "Member 'FConcertAdmin_ServerDiscoveredEvent::InstanceInfo' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ServerDiscoveredEvent, ServerFlags) == 0x000070, "Member 'FConcertAdmin_ServerDiscoveredEvent::ServerFlags' has a wrong offset!");

// ScriptStruct Concert.ConcertSessionSerializedCborPayload
// 0x0020 (0x0020 - 0x0000)
struct FConcertSessionSerializedCborPayload final
{
public:
	class FName                                   PayloadTypeName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedPayloadSize;                           // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CompressedPayload;                                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSessionSerializedCborPayload) == 0x000008, "Wrong alignment on FConcertSessionSerializedCborPayload");
static_assert(sizeof(FConcertSessionSerializedCborPayload) == 0x000020, "Wrong size on FConcertSessionSerializedCborPayload");
static_assert(offsetof(FConcertSessionSerializedCborPayload, PayloadTypeName) == 0x000000, "Member 'FConcertSessionSerializedCborPayload::PayloadTypeName' has a wrong offset!");
static_assert(offsetof(FConcertSessionSerializedCborPayload, UncompressedPayloadSize) == 0x000008, "Member 'FConcertSessionSerializedCborPayload::UncompressedPayloadSize' has a wrong offset!");
static_assert(offsetof(FConcertSessionSerializedCborPayload, CompressedPayload) == 0x000010, "Member 'FConcertSessionSerializedCborPayload::CompressedPayload' has a wrong offset!");

// ScriptStruct Concert.ConcertSessionFilter
// 0x0038 (0x0038 - 0x0000)
struct FConcertSessionFilter final
{
public:
	int64                                         ActivityIdLowerBound;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ActivityIdUpperBound;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 ActivityIdsToExclude;                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 ActivityIdsToInclude;                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyLiveData;                                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMetaDataOnly;                                     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeIgnoredActivities;                         // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSessionFilter) == 0x000008, "Wrong alignment on FConcertSessionFilter");
static_assert(sizeof(FConcertSessionFilter) == 0x000038, "Wrong size on FConcertSessionFilter");
static_assert(offsetof(FConcertSessionFilter, ActivityIdLowerBound) == 0x000000, "Member 'FConcertSessionFilter::ActivityIdLowerBound' has a wrong offset!");
static_assert(offsetof(FConcertSessionFilter, ActivityIdUpperBound) == 0x000008, "Member 'FConcertSessionFilter::ActivityIdUpperBound' has a wrong offset!");
static_assert(offsetof(FConcertSessionFilter, ActivityIdsToExclude) == 0x000010, "Member 'FConcertSessionFilter::ActivityIdsToExclude' has a wrong offset!");
static_assert(offsetof(FConcertSessionFilter, ActivityIdsToInclude) == 0x000020, "Member 'FConcertSessionFilter::ActivityIdsToInclude' has a wrong offset!");
static_assert(offsetof(FConcertSessionFilter, bOnlyLiveData) == 0x000030, "Member 'FConcertSessionFilter::bOnlyLiveData' has a wrong offset!");
static_assert(offsetof(FConcertSessionFilter, bMetaDataOnly) == 0x000031, "Member 'FConcertSessionFilter::bMetaDataOnly' has a wrong offset!");
static_assert(offsetof(FConcertSessionFilter, bIncludeIgnoredActivities) == 0x000032, "Member 'FConcertSessionFilter::bIncludeIgnoredActivities' has a wrong offset!");

// ScriptStruct Concert.ConcertFileVersionInfo
// 0x0008 (0x0008 - 0x0000)
struct FConcertFileVersionInfo final
{
public:
	int32                                         FileVersionUE4;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileVersionLicenseeUE4;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertFileVersionInfo) == 0x000004, "Wrong alignment on FConcertFileVersionInfo");
static_assert(sizeof(FConcertFileVersionInfo) == 0x000008, "Wrong size on FConcertFileVersionInfo");
static_assert(offsetof(FConcertFileVersionInfo, FileVersionUE4) == 0x000000, "Member 'FConcertFileVersionInfo::FileVersionUE4' has a wrong offset!");
static_assert(offsetof(FConcertFileVersionInfo, FileVersionLicenseeUE4) == 0x000004, "Member 'FConcertFileVersionInfo::FileVersionLicenseeUE4' has a wrong offset!");

// ScriptStruct Concert.ConcertEngineVersionInfo
// 0x000C (0x000C - 0x0000)
struct FConcertEngineVersionInfo final
{
public:
	uint16                                        Major;                                             // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Minor;                                             // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Patch;                                             // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Changelist;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertEngineVersionInfo) == 0x000004, "Wrong alignment on FConcertEngineVersionInfo");
static_assert(sizeof(FConcertEngineVersionInfo) == 0x00000C, "Wrong size on FConcertEngineVersionInfo");
static_assert(offsetof(FConcertEngineVersionInfo, Major) == 0x000000, "Member 'FConcertEngineVersionInfo::Major' has a wrong offset!");
static_assert(offsetof(FConcertEngineVersionInfo, Minor) == 0x000002, "Member 'FConcertEngineVersionInfo::Minor' has a wrong offset!");
static_assert(offsetof(FConcertEngineVersionInfo, Patch) == 0x000004, "Member 'FConcertEngineVersionInfo::Patch' has a wrong offset!");
static_assert(offsetof(FConcertEngineVersionInfo, Changelist) == 0x000008, "Member 'FConcertEngineVersionInfo::Changelist' has a wrong offset!");

// ScriptStruct Concert.ConcertCustomVersionInfo
// 0x001C (0x001C - 0x0000)
struct FConcertCustomVersionInfo final
{
public:
	class FName                                   FriendlyName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Key;                                               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertCustomVersionInfo) == 0x000004, "Wrong alignment on FConcertCustomVersionInfo");
static_assert(sizeof(FConcertCustomVersionInfo) == 0x00001C, "Wrong size on FConcertCustomVersionInfo");
static_assert(offsetof(FConcertCustomVersionInfo, FriendlyName) == 0x000000, "Member 'FConcertCustomVersionInfo::FriendlyName' has a wrong offset!");
static_assert(offsetof(FConcertCustomVersionInfo, Key) == 0x000008, "Member 'FConcertCustomVersionInfo::Key' has a wrong offset!");
static_assert(offsetof(FConcertCustomVersionInfo, Version) == 0x000018, "Member 'FConcertCustomVersionInfo::Version' has a wrong offset!");

// ScriptStruct Concert.ConcertSessionVersionInfo
// 0x0028 (0x0028 - 0x0000)
struct FConcertSessionVersionInfo final
{
public:
	struct FConcertFileVersionInfo                FileVersion;                                       // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FConcertEngineVersionInfo              EngineVersion;                                     // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConcertCustomVersionInfo>      CustomVersions;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSessionVersionInfo) == 0x000008, "Wrong alignment on FConcertSessionVersionInfo");
static_assert(sizeof(FConcertSessionVersionInfo) == 0x000028, "Wrong size on FConcertSessionVersionInfo");
static_assert(offsetof(FConcertSessionVersionInfo, FileVersion) == 0x000000, "Member 'FConcertSessionVersionInfo::FileVersion' has a wrong offset!");
static_assert(offsetof(FConcertSessionVersionInfo, EngineVersion) == 0x000008, "Member 'FConcertSessionVersionInfo::EngineVersion' has a wrong offset!");
static_assert(offsetof(FConcertSessionVersionInfo, CustomVersions) == 0x000018, "Member 'FConcertSessionVersionInfo::CustomVersions' has a wrong offset!");

// ScriptStruct Concert.ConcertSessionSettings
// 0x0028 (0x0028 - 0x0000)
struct FConcertSessionSettings final
{
public:
	class FString                                 ProjectName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BaseRevision;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ArchiveNameOverride;                               // 0x0018(0x0010)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSessionSettings) == 0x000008, "Wrong alignment on FConcertSessionSettings");
static_assert(sizeof(FConcertSessionSettings) == 0x000028, "Wrong size on FConcertSessionSettings");
static_assert(offsetof(FConcertSessionSettings, ProjectName) == 0x000000, "Member 'FConcertSessionSettings::ProjectName' has a wrong offset!");
static_assert(offsetof(FConcertSessionSettings, BaseRevision) == 0x000010, "Member 'FConcertSessionSettings::BaseRevision' has a wrong offset!");
static_assert(offsetof(FConcertSessionSettings, ArchiveNameOverride) == 0x000018, "Member 'FConcertSessionSettings::ArchiveNameOverride' has a wrong offset!");

// ScriptStruct Concert.ConcertSessionInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FConcertSessionInfo final
{
public:
	struct FGuid                                  ServerInstanceId;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ServerEndpointId;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerInstanceId;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerUserName;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerDeviceName;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSessionSettings                Settings;                                          // 0x0070(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FConcertSessionVersionInfo>     VersionInfos;                                      // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSessionInfo) == 0x000008, "Wrong alignment on FConcertSessionInfo");
static_assert(sizeof(FConcertSessionInfo) == 0x0000A8, "Wrong size on FConcertSessionInfo");
static_assert(offsetof(FConcertSessionInfo, ServerInstanceId) == 0x000000, "Member 'FConcertSessionInfo::ServerInstanceId' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, ServerEndpointId) == 0x000010, "Member 'FConcertSessionInfo::ServerEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, OwnerInstanceId) == 0x000020, "Member 'FConcertSessionInfo::OwnerInstanceId' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, SessionId) == 0x000030, "Member 'FConcertSessionInfo::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, SessionName) == 0x000040, "Member 'FConcertSessionInfo::SessionName' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, OwnerUserName) == 0x000050, "Member 'FConcertSessionInfo::OwnerUserName' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, OwnerDeviceName) == 0x000060, "Member 'FConcertSessionInfo::OwnerDeviceName' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, Settings) == 0x000070, "Member 'FConcertSessionInfo::Settings' has a wrong offset!");
static_assert(offsetof(FConcertSessionInfo, VersionInfos) == 0x000098, "Member 'FConcertSessionInfo::VersionInfos' has a wrong offset!");

// ScriptStruct Concert.ConcertServerSessionRepository
// 0x0048 (0x0048 - 0x0000)
struct FConcertServerSessionRepository final
{
public:
	struct FGuid                                  RepositoryId;                                      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RepositoryRootDir;                                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorkingDir;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SavedDir;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcessId;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMounted;                                          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertServerSessionRepository) == 0x000008, "Wrong alignment on FConcertServerSessionRepository");
static_assert(sizeof(FConcertServerSessionRepository) == 0x000048, "Wrong size on FConcertServerSessionRepository");
static_assert(offsetof(FConcertServerSessionRepository, RepositoryId) == 0x000000, "Member 'FConcertServerSessionRepository::RepositoryId' has a wrong offset!");
static_assert(offsetof(FConcertServerSessionRepository, RepositoryRootDir) == 0x000010, "Member 'FConcertServerSessionRepository::RepositoryRootDir' has a wrong offset!");
static_assert(offsetof(FConcertServerSessionRepository, WorkingDir) == 0x000020, "Member 'FConcertServerSessionRepository::WorkingDir' has a wrong offset!");
static_assert(offsetof(FConcertServerSessionRepository, SavedDir) == 0x000030, "Member 'FConcertServerSessionRepository::SavedDir' has a wrong offset!");
static_assert(offsetof(FConcertServerSessionRepository, ProcessId) == 0x000040, "Member 'FConcertServerSessionRepository::ProcessId' has a wrong offset!");
static_assert(offsetof(FConcertServerSessionRepository, bMounted) == 0x000044, "Member 'FConcertServerSessionRepository::bMounted' has a wrong offset!");

// ScriptStruct Concert.ConcertClientInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FConcertClientInfo final
{
public:
	struct FConcertInstanceInfo                   InstanceInfo;                                      // 0x0000(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformName;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AvatarColor;                                       // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DesktopAvatarActorClass;                           // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VRAvatarActorClass;                                // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x00A0(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEditorData;                                    // 0x00B0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresCookedData;                               // 0x00B1(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertClientInfo) == 0x000008, "Wrong alignment on FConcertClientInfo");
static_assert(sizeof(FConcertClientInfo) == 0x0000B8, "Wrong size on FConcertClientInfo");
static_assert(offsetof(FConcertClientInfo, InstanceInfo) == 0x000000, "Member 'FConcertClientInfo::InstanceInfo' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, DeviceName) == 0x000030, "Member 'FConcertClientInfo::DeviceName' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, PlatformName) == 0x000040, "Member 'FConcertClientInfo::PlatformName' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, UserName) == 0x000050, "Member 'FConcertClientInfo::UserName' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, DisplayName) == 0x000060, "Member 'FConcertClientInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, AvatarColor) == 0x000070, "Member 'FConcertClientInfo::AvatarColor' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, DesktopAvatarActorClass) == 0x000080, "Member 'FConcertClientInfo::DesktopAvatarActorClass' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, VRAvatarActorClass) == 0x000090, "Member 'FConcertClientInfo::VRAvatarActorClass' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, Tags) == 0x0000A0, "Member 'FConcertClientInfo::Tags' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, bHasEditorData) == 0x0000B0, "Member 'FConcertClientInfo::bHasEditorData' has a wrong offset!");
static_assert(offsetof(FConcertClientInfo, bRequiresCookedData) == 0x0000B1, "Member 'FConcertClientInfo::bRequiresCookedData' has a wrong offset!");

// ScriptStruct Concert.ConcertSessionClientInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FConcertSessionClientInfo final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertClientInfo                     ClientInfo;                                        // 0x0010(0x00B8)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSessionClientInfo) == 0x000008, "Wrong alignment on FConcertSessionClientInfo");
static_assert(sizeof(FConcertSessionClientInfo) == 0x0000C8, "Wrong size on FConcertSessionClientInfo");
static_assert(offsetof(FConcertSessionClientInfo, ClientEndpointId) == 0x000000, "Member 'FConcertSessionClientInfo::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSessionClientInfo, ClientInfo) == 0x000010, "Member 'FConcertSessionClientInfo::ClientInfo' has a wrong offset!");

// ScriptStruct Concert.ConcertClientSettings
// 0x0080 (0x0080 - 0x0000)
struct FConcertClientSettings final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AvatarColor;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DesktopAvatarActorClass;                           // 0x0020(0x0018)(Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         VRAvatarActorClass;                                // 0x0038(0x0018)(Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ServerPort;                                        // 0x0050(0x0002)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DiscoveryTimeoutSeconds;                           // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SessionTickFrequencySeconds;                       // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatencyCompensationMs;                             // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0060(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientAuthenticationKey;                           // 0x0070(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertClientSettings) == 0x000008, "Wrong alignment on FConcertClientSettings");
static_assert(sizeof(FConcertClientSettings) == 0x000080, "Wrong size on FConcertClientSettings");
static_assert(offsetof(FConcertClientSettings, DisplayName) == 0x000000, "Member 'FConcertClientSettings::DisplayName' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, AvatarColor) == 0x000010, "Member 'FConcertClientSettings::AvatarColor' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, DesktopAvatarActorClass) == 0x000020, "Member 'FConcertClientSettings::DesktopAvatarActorClass' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, VRAvatarActorClass) == 0x000038, "Member 'FConcertClientSettings::VRAvatarActorClass' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, ServerPort) == 0x000050, "Member 'FConcertClientSettings::ServerPort' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, DiscoveryTimeoutSeconds) == 0x000054, "Member 'FConcertClientSettings::DiscoveryTimeoutSeconds' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, SessionTickFrequencySeconds) == 0x000058, "Member 'FConcertClientSettings::SessionTickFrequencySeconds' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, LatencyCompensationMs) == 0x00005C, "Member 'FConcertClientSettings::LatencyCompensationMs' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, Tags) == 0x000060, "Member 'FConcertClientSettings::Tags' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, ClientAuthenticationKey) == 0x000070, "Member 'FConcertClientSettings::ClientAuthenticationKey' has a wrong offset!");

// ScriptStruct Concert.ConcertServerInfo
// 0x0058 (0x0058 - 0x0000)
struct FConcertServerInfo final
{
public:
	struct FGuid                                  AdminEndpointId;                                   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertInstanceInfo                   InstanceInfo;                                      // 0x0020(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
	EConcertServerFlags                           ServerFlags;                                       // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertServerInfo) == 0x000008, "Wrong alignment on FConcertServerInfo");
static_assert(sizeof(FConcertServerInfo) == 0x000058, "Wrong size on FConcertServerInfo");
static_assert(offsetof(FConcertServerInfo, AdminEndpointId) == 0x000000, "Member 'FConcertServerInfo::AdminEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertServerInfo, ServerName) == 0x000010, "Member 'FConcertServerInfo::ServerName' has a wrong offset!");
static_assert(offsetof(FConcertServerInfo, InstanceInfo) == 0x000020, "Member 'FConcertServerInfo::InstanceInfo' has a wrong offset!");
static_assert(offsetof(FConcertServerInfo, ServerFlags) == 0x000050, "Member 'FConcertServerInfo::ServerFlags' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_CustomResponse
// 0x0020 (0x0080 - 0x0060)
struct FConcertSession_CustomResponse final : public FConcertResponseData
{
public:
	struct FConcertSessionSerializedPayload       SerializedPayload;                                 // 0x0060(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_CustomResponse) == 0x000008, "Wrong alignment on FConcertSession_CustomResponse");
static_assert(sizeof(FConcertSession_CustomResponse) == 0x000080, "Wrong size on FConcertSession_CustomResponse");
static_assert(offsetof(FConcertSession_CustomResponse, SerializedPayload) == 0x000060, "Member 'FConcertSession_CustomResponse::SerializedPayload' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_CustomRequest
// 0x0040 (0x0070 - 0x0030)
struct FConcertSession_CustomRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SourceEndpointId;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  DestinationEndpointId;                             // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSessionSerializedPayload       SerializedPayload;                                 // 0x0050(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_CustomRequest) == 0x000008, "Wrong alignment on FConcertSession_CustomRequest");
static_assert(sizeof(FConcertSession_CustomRequest) == 0x000070, "Wrong size on FConcertSession_CustomRequest");
static_assert(offsetof(FConcertSession_CustomRequest, SourceEndpointId) == 0x000030, "Member 'FConcertSession_CustomRequest::SourceEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSession_CustomRequest, DestinationEndpointId) == 0x000040, "Member 'FConcertSession_CustomRequest::DestinationEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSession_CustomRequest, SerializedPayload) == 0x000050, "Member 'FConcertSession_CustomRequest::SerializedPayload' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_CustomEvent
// 0x0040 (0x0070 - 0x0030)
struct FConcertSession_CustomEvent final : public FConcertEventData
{
public:
	struct FGuid                                  SourceEndpointId;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          DestinationEndpointIds;                            // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSessionSerializedPayload       SerializedPayload;                                 // 0x0050(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_CustomEvent) == 0x000008, "Wrong alignment on FConcertSession_CustomEvent");
static_assert(sizeof(FConcertSession_CustomEvent) == 0x000070, "Wrong size on FConcertSession_CustomEvent");
static_assert(offsetof(FConcertSession_CustomEvent, SourceEndpointId) == 0x000030, "Member 'FConcertSession_CustomEvent::SourceEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSession_CustomEvent, DestinationEndpointIds) == 0x000040, "Member 'FConcertSession_CustomEvent::DestinationEndpointIds' has a wrong offset!");
static_assert(offsetof(FConcertSession_CustomEvent, SerializedPayload) == 0x000050, "Member 'FConcertSession_CustomEvent::SerializedPayload' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_SessionRenamedEvent
// 0x0010 (0x0040 - 0x0030)
struct FConcertSession_SessionRenamedEvent final : public FConcertEventData
{
public:
	class FString                                 NewName;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_SessionRenamedEvent) == 0x000008, "Wrong alignment on FConcertSession_SessionRenamedEvent");
static_assert(sizeof(FConcertSession_SessionRenamedEvent) == 0x000040, "Wrong size on FConcertSession_SessionRenamedEvent");
static_assert(offsetof(FConcertSession_SessionRenamedEvent, NewName) == 0x000030, "Member 'FConcertSession_SessionRenamedEvent::NewName' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_ClientListUpdatedEvent
// 0x0010 (0x0040 - 0x0030)
struct FConcertSession_ClientListUpdatedEvent final : public FConcertEventData
{
public:
	TArray<struct FConcertSessionClientInfo>      SessionClients;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_ClientListUpdatedEvent) == 0x000008, "Wrong alignment on FConcertSession_ClientListUpdatedEvent");
static_assert(sizeof(FConcertSession_ClientListUpdatedEvent) == 0x000040, "Wrong size on FConcertSession_ClientListUpdatedEvent");
static_assert(offsetof(FConcertSession_ClientListUpdatedEvent, SessionClients) == 0x000030, "Member 'FConcertSession_ClientListUpdatedEvent::SessionClients' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_UpdateClientInfoEvent
// 0x00C8 (0x00F8 - 0x0030)
struct FConcertSession_UpdateClientInfoEvent final : public FConcertEventData
{
public:
	struct FConcertSessionClientInfo              SessionClient;                                     // 0x0030(0x00C8)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_UpdateClientInfoEvent) == 0x000008, "Wrong alignment on FConcertSession_UpdateClientInfoEvent");
static_assert(sizeof(FConcertSession_UpdateClientInfoEvent) == 0x0000F8, "Wrong size on FConcertSession_UpdateClientInfoEvent");
static_assert(offsetof(FConcertSession_UpdateClientInfoEvent, SessionClient) == 0x000030, "Member 'FConcertSession_UpdateClientInfoEvent::SessionClient' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_LeaveSessionEvent
// 0x0010 (0x0040 - 0x0030)
struct FConcertSession_LeaveSessionEvent final : public FConcertEventData
{
public:
	struct FGuid                                  SessionServerEndpointId;                           // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_LeaveSessionEvent) == 0x000008, "Wrong alignment on FConcertSession_LeaveSessionEvent");
static_assert(sizeof(FConcertSession_LeaveSessionEvent) == 0x000040, "Wrong size on FConcertSession_LeaveSessionEvent");
static_assert(offsetof(FConcertSession_LeaveSessionEvent, SessionServerEndpointId) == 0x000030, "Member 'FConcertSession_LeaveSessionEvent::SessionServerEndpointId' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_JoinSessionResultEvent
// 0x0028 (0x0058 - 0x0030)
struct FConcertSession_JoinSessionResultEvent final : public FConcertEndpointDiscoveryEvent
{
public:
	struct FGuid                                  SessionServerEndpointId;                           // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcertConnectionResult                      ConnectionResult;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConcertSessionClientInfo>      SessionClients;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_JoinSessionResultEvent) == 0x000008, "Wrong alignment on FConcertSession_JoinSessionResultEvent");
static_assert(sizeof(FConcertSession_JoinSessionResultEvent) == 0x000058, "Wrong size on FConcertSession_JoinSessionResultEvent");
static_assert(offsetof(FConcertSession_JoinSessionResultEvent, SessionServerEndpointId) == 0x000030, "Member 'FConcertSession_JoinSessionResultEvent::SessionServerEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSession_JoinSessionResultEvent, ConnectionResult) == 0x000040, "Member 'FConcertSession_JoinSessionResultEvent::ConnectionResult' has a wrong offset!");
static_assert(offsetof(FConcertSession_JoinSessionResultEvent, SessionClients) == 0x000048, "Member 'FConcertSession_JoinSessionResultEvent::SessionClients' has a wrong offset!");

// ScriptStruct Concert.ConcertSession_DiscoverAndJoinSessionEvent
// 0x00C8 (0x00F8 - 0x0030)
struct FConcertSession_DiscoverAndJoinSessionEvent final : public FConcertEndpointDiscoveryEvent
{
public:
	struct FGuid                                  SessionServerEndpointId;                           // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertClientInfo                     ClientInfo;                                        // 0x0040(0x00B8)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSession_DiscoverAndJoinSessionEvent) == 0x000008, "Wrong alignment on FConcertSession_DiscoverAndJoinSessionEvent");
static_assert(sizeof(FConcertSession_DiscoverAndJoinSessionEvent) == 0x0000F8, "Wrong size on FConcertSession_DiscoverAndJoinSessionEvent");
static_assert(offsetof(FConcertSession_DiscoverAndJoinSessionEvent, SessionServerEndpointId) == 0x000030, "Member 'FConcertSession_DiscoverAndJoinSessionEvent::SessionServerEndpointId' has a wrong offset!");
static_assert(offsetof(FConcertSession_DiscoverAndJoinSessionEvent, ClientInfo) == 0x000040, "Member 'FConcertSession_DiscoverAndJoinSessionEvent::ClientInfo' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetSessionActivitiesResponse
// 0x0060 (0x00C0 - 0x0060)
struct FConcertAdmin_GetSessionActivitiesResponse final : public FConcertResponseData
{
public:
	TArray<struct FConcertSessionSerializedPayload> Activities;                                      // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FConcertClientInfo> EndpointClientInfoMap;                             // 0x0070(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_GetSessionActivitiesResponse) == 0x000008, "Wrong alignment on FConcertAdmin_GetSessionActivitiesResponse");
static_assert(sizeof(FConcertAdmin_GetSessionActivitiesResponse) == 0x0000C0, "Wrong size on FConcertAdmin_GetSessionActivitiesResponse");
static_assert(offsetof(FConcertAdmin_GetSessionActivitiesResponse, Activities) == 0x000060, "Member 'FConcertAdmin_GetSessionActivitiesResponse::Activities' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_GetSessionActivitiesResponse, EndpointClientInfoMap) == 0x000070, "Member 'FConcertAdmin_GetSessionActivitiesResponse::EndpointClientInfoMap' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetSessionActivitiesRequest
// 0x0028 (0x0058 - 0x0030)
struct FConcertAdmin_GetSessionActivitiesRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FromActivityId;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ActivityCount;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDetails;                                   // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertAdmin_GetSessionActivitiesRequest) == 0x000008, "Wrong alignment on FConcertAdmin_GetSessionActivitiesRequest");
static_assert(sizeof(FConcertAdmin_GetSessionActivitiesRequest) == 0x000058, "Wrong size on FConcertAdmin_GetSessionActivitiesRequest");
static_assert(offsetof(FConcertAdmin_GetSessionActivitiesRequest, SessionId) == 0x000030, "Member 'FConcertAdmin_GetSessionActivitiesRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_GetSessionActivitiesRequest, FromActivityId) == 0x000040, "Member 'FConcertAdmin_GetSessionActivitiesRequest::FromActivityId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_GetSessionActivitiesRequest, ActivityCount) == 0x000048, "Member 'FConcertAdmin_GetSessionActivitiesRequest::ActivityCount' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_GetSessionActivitiesRequest, bIncludeDetails) == 0x000050, "Member 'FConcertAdmin_GetSessionActivitiesRequest::bIncludeDetails' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetSessionClientsResponse
// 0x0010 (0x0070 - 0x0060)
struct FConcertAdmin_GetSessionClientsResponse final : public FConcertResponseData
{
public:
	TArray<struct FConcertSessionClientInfo>      SessionClients;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_GetSessionClientsResponse) == 0x000008, "Wrong alignment on FConcertAdmin_GetSessionClientsResponse");
static_assert(sizeof(FConcertAdmin_GetSessionClientsResponse) == 0x000070, "Wrong size on FConcertAdmin_GetSessionClientsResponse");
static_assert(offsetof(FConcertAdmin_GetSessionClientsResponse, SessionClients) == 0x000060, "Member 'FConcertAdmin_GetSessionClientsResponse::SessionClients' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetSessionClientsRequest
// 0x0010 (0x0040 - 0x0030)
struct FConcertAdmin_GetSessionClientsRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_GetSessionClientsRequest) == 0x000008, "Wrong alignment on FConcertAdmin_GetSessionClientsRequest");
static_assert(sizeof(FConcertAdmin_GetSessionClientsRequest) == 0x000040, "Wrong size on FConcertAdmin_GetSessionClientsRequest");
static_assert(offsetof(FConcertAdmin_GetSessionClientsRequest, SessionId) == 0x000030, "Member 'FConcertAdmin_GetSessionClientsRequest::SessionId' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_DeleteSessionResponse
// 0x0020 (0x0080 - 0x0060)
struct FConcertAdmin_DeleteSessionResponse final : public FConcertResponseData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_DeleteSessionResponse) == 0x000008, "Wrong alignment on FConcertAdmin_DeleteSessionResponse");
static_assert(sizeof(FConcertAdmin_DeleteSessionResponse) == 0x000080, "Wrong size on FConcertAdmin_DeleteSessionResponse");
static_assert(offsetof(FConcertAdmin_DeleteSessionResponse, SessionId) == 0x000060, "Member 'FConcertAdmin_DeleteSessionResponse::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_DeleteSessionResponse, SessionName) == 0x000070, "Member 'FConcertAdmin_DeleteSessionResponse::SessionName' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_MountSessionRepositoryResponse
// 0x0008 (0x0068 - 0x0060)
struct FConcertAdmin_MountSessionRepositoryResponse final : public FConcertResponseData
{
public:
	EConcertSessionRepositoryMountResponseCode    MountStatus;                                       // 0x0060(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertAdmin_MountSessionRepositoryResponse) == 0x000008, "Wrong alignment on FConcertAdmin_MountSessionRepositoryResponse");
static_assert(sizeof(FConcertAdmin_MountSessionRepositoryResponse) == 0x000068, "Wrong size on FConcertAdmin_MountSessionRepositoryResponse");
static_assert(offsetof(FConcertAdmin_MountSessionRepositoryResponse, MountStatus) == 0x000060, "Member 'FConcertAdmin_MountSessionRepositoryResponse::MountStatus' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_DeleteSessionRequest
// 0x0030 (0x0060 - 0x0030)
struct FConcertAdmin_DeleteSessionRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_DeleteSessionRequest) == 0x000008, "Wrong alignment on FConcertAdmin_DeleteSessionRequest");
static_assert(sizeof(FConcertAdmin_DeleteSessionRequest) == 0x000060, "Wrong size on FConcertAdmin_DeleteSessionRequest");
static_assert(offsetof(FConcertAdmin_DeleteSessionRequest, SessionId) == 0x000030, "Member 'FConcertAdmin_DeleteSessionRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_DeleteSessionRequest, UserName) == 0x000040, "Member 'FConcertAdmin_DeleteSessionRequest::UserName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_DeleteSessionRequest, DeviceName) == 0x000050, "Member 'FConcertAdmin_DeleteSessionRequest::DeviceName' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_RenameSessionResponse
// 0x0020 (0x0080 - 0x0060)
struct FConcertAdmin_RenameSessionResponse final : public FConcertResponseData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldName;                                           // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_RenameSessionResponse) == 0x000008, "Wrong alignment on FConcertAdmin_RenameSessionResponse");
static_assert(sizeof(FConcertAdmin_RenameSessionResponse) == 0x000080, "Wrong size on FConcertAdmin_RenameSessionResponse");
static_assert(offsetof(FConcertAdmin_RenameSessionResponse, SessionId) == 0x000060, "Member 'FConcertAdmin_RenameSessionResponse::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_RenameSessionResponse, OldName) == 0x000070, "Member 'FConcertAdmin_RenameSessionResponse::OldName' has a wrong offset!");

// ScriptStruct Concert.ConcertSourceControlSettings
// 0x0001 (0x0001 - 0x0000)
struct FConcertSourceControlSettings final
{
public:
	EConcertSourceValidationMode                  ValidationMode;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSourceControlSettings) == 0x000001, "Wrong alignment on FConcertSourceControlSettings");
static_assert(sizeof(FConcertSourceControlSettings) == 0x000001, "Wrong size on FConcertSourceControlSettings");
static_assert(offsetof(FConcertSourceControlSettings, ValidationMode) == 0x000000, "Member 'FConcertSourceControlSettings::ValidationMode' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_RenameSessionRequest
// 0x0040 (0x0070 - 0x0030)
struct FConcertAdmin_RenameSessionRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_RenameSessionRequest) == 0x000008, "Wrong alignment on FConcertAdmin_RenameSessionRequest");
static_assert(sizeof(FConcertAdmin_RenameSessionRequest) == 0x000070, "Wrong size on FConcertAdmin_RenameSessionRequest");
static_assert(offsetof(FConcertAdmin_RenameSessionRequest, SessionId) == 0x000030, "Member 'FConcertAdmin_RenameSessionRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_RenameSessionRequest, NewName) == 0x000040, "Member 'FConcertAdmin_RenameSessionRequest::NewName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_RenameSessionRequest, UserName) == 0x000050, "Member 'FConcertAdmin_RenameSessionRequest::UserName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_RenameSessionRequest, DeviceName) == 0x000060, "Member 'FConcertAdmin_RenameSessionRequest::DeviceName' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_ArchiveSessionResponse
// 0x0040 (0x00A0 - 0x0060)
struct FConcertAdmin_ArchiveSessionResponse final : public FConcertResponseData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ArchiveId;                                         // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ArchiveName;                                       // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_ArchiveSessionResponse) == 0x000008, "Wrong alignment on FConcertAdmin_ArchiveSessionResponse");
static_assert(sizeof(FConcertAdmin_ArchiveSessionResponse) == 0x0000A0, "Wrong size on FConcertAdmin_ArchiveSessionResponse");
static_assert(offsetof(FConcertAdmin_ArchiveSessionResponse, SessionId) == 0x000060, "Member 'FConcertAdmin_ArchiveSessionResponse::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ArchiveSessionResponse, SessionName) == 0x000070, "Member 'FConcertAdmin_ArchiveSessionResponse::SessionName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ArchiveSessionResponse, ArchiveId) == 0x000080, "Member 'FConcertAdmin_ArchiveSessionResponse::ArchiveId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ArchiveSessionResponse, ArchiveName) == 0x000090, "Member 'FConcertAdmin_ArchiveSessionResponse::ArchiveName' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_ArchiveSessionRequest
// 0x0078 (0x00A8 - 0x0030)
struct FConcertAdmin_ArchiveSessionRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ArchiveNameOverride;                               // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertSessionFilter                  SessionFilter;                                     // 0x0070(0x0038)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_ArchiveSessionRequest) == 0x000008, "Wrong alignment on FConcertAdmin_ArchiveSessionRequest");
static_assert(sizeof(FConcertAdmin_ArchiveSessionRequest) == 0x0000A8, "Wrong size on FConcertAdmin_ArchiveSessionRequest");
static_assert(offsetof(FConcertAdmin_ArchiveSessionRequest, SessionId) == 0x000030, "Member 'FConcertAdmin_ArchiveSessionRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ArchiveSessionRequest, ArchiveNameOverride) == 0x000040, "Member 'FConcertAdmin_ArchiveSessionRequest::ArchiveNameOverride' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ArchiveSessionRequest, UserName) == 0x000050, "Member 'FConcertAdmin_ArchiveSessionRequest::UserName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ArchiveSessionRequest, DeviceName) == 0x000060, "Member 'FConcertAdmin_ArchiveSessionRequest::DeviceName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_ArchiveSessionRequest, SessionFilter) == 0x000070, "Member 'FConcertAdmin_ArchiveSessionRequest::SessionFilter' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_DiscoverServersEvent
// 0x0030 (0x0060 - 0x0030)
struct FConcertAdmin_DiscoverServersEvent final : public FConcertEndpointDiscoveryEvent
{
public:
	class FString                                 RequiredRole;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredVersion;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientAuthenticationKey;                           // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_DiscoverServersEvent) == 0x000008, "Wrong alignment on FConcertAdmin_DiscoverServersEvent");
static_assert(sizeof(FConcertAdmin_DiscoverServersEvent) == 0x000060, "Wrong size on FConcertAdmin_DiscoverServersEvent");
static_assert(offsetof(FConcertAdmin_DiscoverServersEvent, RequiredRole) == 0x000030, "Member 'FConcertAdmin_DiscoverServersEvent::RequiredRole' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_DiscoverServersEvent, RequiredVersion) == 0x000040, "Member 'FConcertAdmin_DiscoverServersEvent::RequiredVersion' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_DiscoverServersEvent, ClientAuthenticationKey) == 0x000050, "Member 'FConcertAdmin_DiscoverServersEvent::ClientAuthenticationKey' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_SessionInfoResponse
// 0x00A8 (0x0108 - 0x0060)
struct FConcertAdmin_SessionInfoResponse final : public FConcertResponseData
{
public:
	struct FConcertSessionInfo                    SessionInfo;                                       // 0x0060(0x00A8)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_SessionInfoResponse) == 0x000008, "Wrong alignment on FConcertAdmin_SessionInfoResponse");
static_assert(sizeof(FConcertAdmin_SessionInfoResponse) == 0x000108, "Wrong size on FConcertAdmin_SessionInfoResponse");
static_assert(offsetof(FConcertAdmin_SessionInfoResponse, SessionInfo) == 0x000060, "Member 'FConcertAdmin_SessionInfoResponse::SessionInfo' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_CopySessionRequest
// 0x0168 (0x0198 - 0x0030)
struct FConcertAdmin_CopySessionRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertClientInfo                     OwnerClientInfo;                                   // 0x0050(0x00B8)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionSettings                SessionSettings;                                   // 0x0108(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionVersionInfo             VersionInfo;                                       // 0x0130(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionFilter                  SessionFilter;                                     // 0x0158(0x0038)(Edit, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x8];                                      // 0x0190(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertAdmin_CopySessionRequest) == 0x000008, "Wrong alignment on FConcertAdmin_CopySessionRequest");
static_assert(sizeof(FConcertAdmin_CopySessionRequest) == 0x000198, "Wrong size on FConcertAdmin_CopySessionRequest");
static_assert(offsetof(FConcertAdmin_CopySessionRequest, SessionId) == 0x000030, "Member 'FConcertAdmin_CopySessionRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CopySessionRequest, SessionName) == 0x000040, "Member 'FConcertAdmin_CopySessionRequest::SessionName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CopySessionRequest, OwnerClientInfo) == 0x000050, "Member 'FConcertAdmin_CopySessionRequest::OwnerClientInfo' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CopySessionRequest, SessionSettings) == 0x000108, "Member 'FConcertAdmin_CopySessionRequest::SessionSettings' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CopySessionRequest, VersionInfo) == 0x000130, "Member 'FConcertAdmin_CopySessionRequest::VersionInfo' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CopySessionRequest, SessionFilter) == 0x000158, "Member 'FConcertAdmin_CopySessionRequest::SessionFilter' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_FindSessionRequest
// 0x0118 (0x0148 - 0x0030)
struct FConcertAdmin_FindSessionRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertClientInfo                     OwnerClientInfo;                                   // 0x0040(0x00B8)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionSettings                SessionSettings;                                   // 0x00F8(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionVersionInfo             VersionInfo;                                       // 0x0120(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_FindSessionRequest) == 0x000008, "Wrong alignment on FConcertAdmin_FindSessionRequest");
static_assert(sizeof(FConcertAdmin_FindSessionRequest) == 0x000148, "Wrong size on FConcertAdmin_FindSessionRequest");
static_assert(offsetof(FConcertAdmin_FindSessionRequest, SessionId) == 0x000030, "Member 'FConcertAdmin_FindSessionRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_FindSessionRequest, OwnerClientInfo) == 0x000040, "Member 'FConcertAdmin_FindSessionRequest::OwnerClientInfo' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_FindSessionRequest, SessionSettings) == 0x0000F8, "Member 'FConcertAdmin_FindSessionRequest::SessionSettings' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_FindSessionRequest, VersionInfo) == 0x000120, "Member 'FConcertAdmin_FindSessionRequest::VersionInfo' has a wrong offset!");

// ScriptStruct Concert.ConcertServerSettings
// 0x0008 (0x0008 - 0x0000)
struct FConcertServerSettings final
{
public:
	bool                                          bIgnoreSessionSettingsRestriction;                 // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SessionTickFrequencySeconds;                       // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertServerSettings) == 0x000004, "Wrong alignment on FConcertServerSettings");
static_assert(sizeof(FConcertServerSettings) == 0x000008, "Wrong size on FConcertServerSettings");
static_assert(offsetof(FConcertServerSettings, bIgnoreSessionSettingsRestriction) == 0x000000, "Member 'FConcertServerSettings::bIgnoreSessionSettingsRestriction' has a wrong offset!");
static_assert(offsetof(FConcertServerSettings, SessionTickFrequencySeconds) == 0x000004, "Member 'FConcertServerSettings::SessionTickFrequencySeconds' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_CreateSessionRequest
// 0x0118 (0x0148 - 0x0030)
struct FConcertAdmin_CreateSessionRequest final : public FConcertRequestData
{
public:
	class FString                                 SessionName;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConcertClientInfo                     OwnerClientInfo;                                   // 0x0040(0x00B8)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionSettings                SessionSettings;                                   // 0x00F8(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FConcertSessionVersionInfo             VersionInfo;                                       // 0x0120(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_CreateSessionRequest) == 0x000008, "Wrong alignment on FConcertAdmin_CreateSessionRequest");
static_assert(sizeof(FConcertAdmin_CreateSessionRequest) == 0x000148, "Wrong size on FConcertAdmin_CreateSessionRequest");
static_assert(offsetof(FConcertAdmin_CreateSessionRequest, SessionName) == 0x000030, "Member 'FConcertAdmin_CreateSessionRequest::SessionName' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CreateSessionRequest, OwnerClientInfo) == 0x000040, "Member 'FConcertAdmin_CreateSessionRequest::OwnerClientInfo' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CreateSessionRequest, SessionSettings) == 0x0000F8, "Member 'FConcertAdmin_CreateSessionRequest::SessionSettings' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_CreateSessionRequest, VersionInfo) == 0x000120, "Member 'FConcertAdmin_CreateSessionRequest::VersionInfo' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetSessionsResponse
// 0x0010 (0x0070 - 0x0060)
struct FConcertAdmin_GetSessionsResponse final : public FConcertResponseData
{
public:
	TArray<struct FConcertSessionInfo>            Sessions;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_GetSessionsResponse) == 0x000008, "Wrong alignment on FConcertAdmin_GetSessionsResponse");
static_assert(sizeof(FConcertAdmin_GetSessionsResponse) == 0x000070, "Wrong size on FConcertAdmin_GetSessionsResponse");
static_assert(offsetof(FConcertAdmin_GetSessionsResponse, Sessions) == 0x000060, "Member 'FConcertAdmin_GetSessionsResponse::Sessions' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetArchivedSessionsRequest
// 0x0000 (0x0030 - 0x0030)
struct FConcertAdmin_GetArchivedSessionsRequest final : public FConcertRequestData
{
};
static_assert(alignof(FConcertAdmin_GetArchivedSessionsRequest) == 0x000008, "Wrong alignment on FConcertAdmin_GetArchivedSessionsRequest");
static_assert(sizeof(FConcertAdmin_GetArchivedSessionsRequest) == 0x000030, "Wrong size on FConcertAdmin_GetArchivedSessionsRequest");

// ScriptStruct Concert.ConcertAdmin_GetLiveSessionsRequest
// 0x0000 (0x0030 - 0x0030)
struct FConcertAdmin_GetLiveSessionsRequest final : public FConcertRequestData
{
};
static_assert(alignof(FConcertAdmin_GetLiveSessionsRequest) == 0x000008, "Wrong alignment on FConcertAdmin_GetLiveSessionsRequest");
static_assert(sizeof(FConcertAdmin_GetLiveSessionsRequest) == 0x000030, "Wrong size on FConcertAdmin_GetLiveSessionsRequest");

// ScriptStruct Concert.ConcertServerSessionRepositoryDatabase
// 0x0010 (0x0010 - 0x0000)
struct FConcertServerSessionRepositoryDatabase final
{
public:
	TArray<struct FConcertServerSessionRepository> Repositories;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertServerSessionRepositoryDatabase) == 0x000008, "Wrong alignment on FConcertServerSessionRepositoryDatabase");
static_assert(sizeof(FConcertServerSessionRepositoryDatabase) == 0x000010, "Wrong size on FConcertServerSessionRepositoryDatabase");
static_assert(offsetof(FConcertServerSessionRepositoryDatabase, Repositories) == 0x000000, "Member 'FConcertServerSessionRepositoryDatabase::Repositories' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetAllSessionsResponse
// 0x0020 (0x0080 - 0x0060)
struct FConcertAdmin_GetAllSessionsResponse final : public FConcertResponseData
{
public:
	TArray<struct FConcertSessionInfo>            LiveSessions;                                      // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConcertSessionInfo>            ArchivedSessions;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_GetAllSessionsResponse) == 0x000008, "Wrong alignment on FConcertAdmin_GetAllSessionsResponse");
static_assert(sizeof(FConcertAdmin_GetAllSessionsResponse) == 0x000080, "Wrong size on FConcertAdmin_GetAllSessionsResponse");
static_assert(offsetof(FConcertAdmin_GetAllSessionsResponse, LiveSessions) == 0x000060, "Member 'FConcertAdmin_GetAllSessionsResponse::LiveSessions' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_GetAllSessionsResponse, ArchivedSessions) == 0x000070, "Member 'FConcertAdmin_GetAllSessionsResponse::ArchivedSessions' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetAllSessionsRequest
// 0x0000 (0x0030 - 0x0030)
struct FConcertAdmin_GetAllSessionsRequest final : public FConcertRequestData
{
};
static_assert(alignof(FConcertAdmin_GetAllSessionsRequest) == 0x000008, "Wrong alignment on FConcertAdmin_GetAllSessionsRequest");
static_assert(sizeof(FConcertAdmin_GetAllSessionsRequest) == 0x000030, "Wrong size on FConcertAdmin_GetAllSessionsRequest");

// ScriptStruct Concert.ConcertAdmin_DropSessionRepositoriesResponse
// 0x0010 (0x0070 - 0x0060)
struct FConcertAdmin_DropSessionRepositoriesResponse final : public FConcertResponseData
{
public:
	TArray<struct FGuid>                          DroppedRepositoryIds;                              // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_DropSessionRepositoriesResponse) == 0x000008, "Wrong alignment on FConcertAdmin_DropSessionRepositoriesResponse");
static_assert(sizeof(FConcertAdmin_DropSessionRepositoriesResponse) == 0x000070, "Wrong size on FConcertAdmin_DropSessionRepositoriesResponse");
static_assert(offsetof(FConcertAdmin_DropSessionRepositoriesResponse, DroppedRepositoryIds) == 0x000060, "Member 'FConcertAdmin_DropSessionRepositoriesResponse::DroppedRepositoryIds' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_DropSessionRepositoriesRequest
// 0x0010 (0x0040 - 0x0030)
struct FConcertAdmin_DropSessionRepositoriesRequest final : public FConcertRequestData
{
public:
	TArray<struct FGuid>                          RepositoryIds;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_DropSessionRepositoriesRequest) == 0x000008, "Wrong alignment on FConcertAdmin_DropSessionRepositoriesRequest");
static_assert(sizeof(FConcertAdmin_DropSessionRepositoriesRequest) == 0x000040, "Wrong size on FConcertAdmin_DropSessionRepositoriesRequest");
static_assert(offsetof(FConcertAdmin_DropSessionRepositoriesRequest, RepositoryIds) == 0x000030, "Member 'FConcertAdmin_DropSessionRepositoriesRequest::RepositoryIds' has a wrong offset!");

// ScriptStruct Concert.ConcertSessionRepositoryInfo
// 0x0014 (0x0014 - 0x0000)
struct FConcertSessionRepositoryInfo final
{
public:
	struct FGuid                                  RepositoryId;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMounted;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertSessionRepositoryInfo) == 0x000004, "Wrong alignment on FConcertSessionRepositoryInfo");
static_assert(sizeof(FConcertSessionRepositoryInfo) == 0x000014, "Wrong size on FConcertSessionRepositoryInfo");
static_assert(offsetof(FConcertSessionRepositoryInfo, RepositoryId) == 0x000000, "Member 'FConcertSessionRepositoryInfo::RepositoryId' has a wrong offset!");
static_assert(offsetof(FConcertSessionRepositoryInfo, bMounted) == 0x000010, "Member 'FConcertSessionRepositoryInfo::bMounted' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetSessionRepositoriesResponse
// 0x0010 (0x0070 - 0x0060)
struct FConcertAdmin_GetSessionRepositoriesResponse final : public FConcertResponseData
{
public:
	TArray<struct FConcertSessionRepositoryInfo>  SessionRepositories;                               // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertAdmin_GetSessionRepositoriesResponse) == 0x000008, "Wrong alignment on FConcertAdmin_GetSessionRepositoriesResponse");
static_assert(sizeof(FConcertAdmin_GetSessionRepositoriesResponse) == 0x000070, "Wrong size on FConcertAdmin_GetSessionRepositoriesResponse");
static_assert(offsetof(FConcertAdmin_GetSessionRepositoriesResponse, SessionRepositories) == 0x000060, "Member 'FConcertAdmin_GetSessionRepositoriesResponse::SessionRepositories' has a wrong offset!");

// ScriptStruct Concert.ConcertAdmin_GetSessionRepositoriesRequest
// 0x0000 (0x0030 - 0x0030)
struct FConcertAdmin_GetSessionRepositoriesRequest final : public FConcertRequestData
{
};
static_assert(alignof(FConcertAdmin_GetSessionRepositoriesRequest) == 0x000008, "Wrong alignment on FConcertAdmin_GetSessionRepositoriesRequest");
static_assert(sizeof(FConcertAdmin_GetSessionRepositoriesRequest) == 0x000030, "Wrong size on FConcertAdmin_GetSessionRepositoriesRequest");

// ScriptStruct Concert.ConcertAdmin_MountSessionRepositoryRequest
// 0x0028 (0x0058 - 0x0030)
struct FConcertAdmin_MountSessionRepositoryRequest final : public FConcertRequestData
{
public:
	struct FGuid                                  RepositoryId;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RepositoryRootDir;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsServerDefault;                                  // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateIfNotExist;                                 // 0x0051(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcertAdmin_MountSessionRepositoryRequest) == 0x000008, "Wrong alignment on FConcertAdmin_MountSessionRepositoryRequest");
static_assert(sizeof(FConcertAdmin_MountSessionRepositoryRequest) == 0x000058, "Wrong size on FConcertAdmin_MountSessionRepositoryRequest");
static_assert(offsetof(FConcertAdmin_MountSessionRepositoryRequest, RepositoryId) == 0x000030, "Member 'FConcertAdmin_MountSessionRepositoryRequest::RepositoryId' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_MountSessionRepositoryRequest, RepositoryRootDir) == 0x000040, "Member 'FConcertAdmin_MountSessionRepositoryRequest::RepositoryRootDir' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_MountSessionRepositoryRequest, bAsServerDefault) == 0x000050, "Member 'FConcertAdmin_MountSessionRepositoryRequest::bAsServerDefault' has a wrong offset!");
static_assert(offsetof(FConcertAdmin_MountSessionRepositoryRequest, bCreateIfNotExist) == 0x000051, "Member 'FConcertAdmin_MountSessionRepositoryRequest::bCreateIfNotExist' has a wrong offset!");

}

