#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPawn_NonParticipant

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "BP_PlayerPawn_Athena_Phoebe_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerPawn_NonParticipant.BP_PlayerPawn_NonParticipant_C
// 0x01A0 (0x4560 - 0x43C0)
class ABP_PlayerPawn_NonParticipant_C : public ABP_PlayerPawn_Athena_Phoebe_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerPawn_NonParticipant_C;     // 0x43B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortAthenaAlertStateComponent*         FortAthenaAlertState;                              // 0x43C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VOAudioComponent;                                  // 0x43C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAlertness;                                      // 0x43D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseVO;                                             // 0x43D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseIdleVO;                                         // 0x43D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseDropExtraLootOnDeath;                           // 0x43D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseFullBodyHitReact;                               // 0x43D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EAlertLevel                                   AlertLevel;                                        // 0x43D5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   OldAlertLevel;                                     // 0x43D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43D7[0x1];                                     // 0x43D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCueAlertState;                             // 0x43D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_Status_Stressed_Infinite;                   // 0x43E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_Status_Stressed_Cooldown;                   // 0x43E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistanceToTargetToPlayCombatAlertAnimation;     // 0x43F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43F4[0x4];                                     // 0x43F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class USoundBase*>  AlertSFXMap;                                       // 0x43F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MinIdleVODelay;                                    // 0x4448(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxIdleVODelay;                                    // 0x4470(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   LootTierNameToSpawnWhenDead;                       // 0x4498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Medium;                                   // 0x44A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Shell;                                    // 0x44A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Heavy;                                    // 0x44B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Light;                                    // 0x44B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Rockets;                                  // 0x44C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayDataTrackerComponentManager* DataTrackerComponentManager;                     // 0x44C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelUnawareTag;                              // 0x44D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelAlertedTag;                              // 0x44D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelAggressiveTag;                           // 0x44E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_DisguiseTag;                                    // 0x44E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RemoveDisguise;                                 // 0x44F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortAbilitySet*                        HitReactAbilitySet;                                // 0x44F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DefaultFullbodyHitReactionMontage;                 // 0x4500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortPatrolAnimAsset*                   CurrentPatrolAnimAsset;                            // 0x4508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PatrolLayerAnimBP;                                 // 0x4510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFortPatrolAnimSetWeaponPair>   PatrolAnimSetPairs;                                // 0x4518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bShouldDoFullAnimationUpdate;                      // 0x4528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4529[0x3];                                     // 0x4529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TAG_DuelTagToValidate;                             // 0x452C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GEDuelHandle;                                      // 0x4534(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_453C[0x4];                                     // 0x453C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_DuelTag;                                        // 0x4540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        Challenger;                                        // 0x4548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TAG_CanBeChallenged;                               // 0x4550(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OverrideLayerAnimBP;                               // 0x4558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerPawn_NonParticipant(int32 EntryPoint);
	void PlayVoiceSoundByTag(const struct FGameplayTag& SoundBankTag);
	void ReLinkAnimLayer();
	void OnAnimInputEvent(const class UFortAnimInputEvent* AnimInputEvent);
	void LinkOverrideAnimLayer();
	void LinkPatrolAnimLayer();
	void SetChallenger(class AFortPlayerPawn* Challenger_0);
	void ChallengerDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnWeaponAttachmentChangedDelegate_Event_0(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void GameplayCue_Player_Interrogation_Voice_PickedUp(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnCharacterCustomizationCompleted(class AFortPlayerPawn* Pawn);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void TriggerIdleVO();
	void OnAlertLEvelCHangedEvent(class AFortAthenaAIBotController* BotController, EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);
	void ActivateAlertDBNOCleanUp();
	void ReceiveBeginPlay();
	void OnDBNOStateChanged_Event(class AFortPawn* FortPawn, bool bInIsDBNO);
	void UserConstructionScript();
	void OnRep_AlertLevel();
	void SetAlertedStateGameplayCue(bool Alerted, bool Combat);
	void PlayVoiceComponentSoundByTag(const struct FGameplayTag& SoundBankTag);
	void AlertLevelChanged(EAlertLevel OldAlertLevel_0, EAlertLevel InputPin);
	void SetupLootTierNameWithWeapon();
	void DataTrackerSetup(bool Is_Registering);
	void SetDataTrackerActorStateFromAlertLevel(EAlertLevel AlertLevel_0);
	void GetCurrentFullbodyHitReactionMontage(class UAnimMontage** CurrentMontage);
	void UpdatePatrolAnimSet(class AFortWeapon* NewWeapon);
	void InitializeAnimInstanceSettings();
	void ClientOnAlertLevelChanged(EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerPawn_NonParticipant_C">();
	}
	static class ABP_PlayerPawn_NonParticipant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerPawn_NonParticipant_C>();
	}
};
static_assert(alignof(ABP_PlayerPawn_NonParticipant_C) == 0x000010, "Wrong alignment on ABP_PlayerPawn_NonParticipant_C");
static_assert(sizeof(ABP_PlayerPawn_NonParticipant_C) == 0x004560, "Wrong size on ABP_PlayerPawn_NonParticipant_C");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UberGraphFrame_BP_PlayerPawn_NonParticipant_C) == 0x0043B8, "Member 'ABP_PlayerPawn_NonParticipant_C::UberGraphFrame_BP_PlayerPawn_NonParticipant_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, FortAthenaAlertState) == 0x0043C0, "Member 'ABP_PlayerPawn_NonParticipant_C::FortAthenaAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, VOAudioComponent) == 0x0043C8, "Member 'ABP_PlayerPawn_NonParticipant_C::VOAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseAlertness) == 0x0043D0, "Member 'ABP_PlayerPawn_NonParticipant_C::UseAlertness' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseVO) == 0x0043D1, "Member 'ABP_PlayerPawn_NonParticipant_C::UseVO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseIdleVO) == 0x0043D2, "Member 'ABP_PlayerPawn_NonParticipant_C::UseIdleVO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseDropExtraLootOnDeath) == 0x0043D3, "Member 'ABP_PlayerPawn_NonParticipant_C::UseDropExtraLootOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseFullBodyHitReact) == 0x0043D4, "Member 'ABP_PlayerPawn_NonParticipant_C::UseFullBodyHitReact' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevel) == 0x0043D5, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OldAlertLevel) == 0x0043D6, "Member 'ABP_PlayerPawn_NonParticipant_C::OldAlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GameplayCueAlertState) == 0x0043D8, "Member 'ABP_PlayerPawn_NonParticipant_C::GameplayCueAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_NPC_Status_Stressed_Infinite) == 0x0043E0, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_NPC_Status_Stressed_Infinite' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_NPC_Status_Stressed_Cooldown) == 0x0043E8, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_NPC_Status_Stressed_Cooldown' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MinDistanceToTargetToPlayCombatAlertAnimation) == 0x0043F0, "Member 'ABP_PlayerPawn_NonParticipant_C::MinDistanceToTargetToPlayCombatAlertAnimation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertSFXMap) == 0x0043F8, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertSFXMap' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MinIdleVODelay) == 0x004448, "Member 'ABP_PlayerPawn_NonParticipant_C::MinIdleVODelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MaxIdleVODelay) == 0x004470, "Member 'ABP_PlayerPawn_NonParticipant_C::MaxIdleVODelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTierNameToSpawnWhenDead) == 0x004498, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTierNameToSpawnWhenDead' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Medium) == 0x0044A0, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Medium' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Shell) == 0x0044A8, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Shell' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Heavy) == 0x0044B0, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Heavy' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Light) == 0x0044B8, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Light' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Rockets) == 0x0044C0, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Rockets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DataTrackerComponentManager) == 0x0044C8, "Member 'ABP_PlayerPawn_NonParticipant_C::DataTrackerComponentManager' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelUnawareTag) == 0x0044D0, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelUnawareTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelAlertedTag) == 0x0044D8, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelAlertedTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelAggressiveTag) == 0x0044E0, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelAggressiveTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, TC_DisguiseTag) == 0x0044E8, "Member 'ABP_PlayerPawn_NonParticipant_C::TC_DisguiseTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_RemoveDisguise) == 0x0044F0, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_RemoveDisguise' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, HitReactAbilitySet) == 0x0044F8, "Member 'ABP_PlayerPawn_NonParticipant_C::HitReactAbilitySet' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DefaultFullbodyHitReactionMontage) == 0x004500, "Member 'ABP_PlayerPawn_NonParticipant_C::DefaultFullbodyHitReactionMontage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, CurrentPatrolAnimAsset) == 0x004508, "Member 'ABP_PlayerPawn_NonParticipant_C::CurrentPatrolAnimAsset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PatrolLayerAnimBP) == 0x004510, "Member 'ABP_PlayerPawn_NonParticipant_C::PatrolLayerAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PatrolAnimSetPairs) == 0x004518, "Member 'ABP_PlayerPawn_NonParticipant_C::PatrolAnimSetPairs' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, bShouldDoFullAnimationUpdate) == 0x004528, "Member 'ABP_PlayerPawn_NonParticipant_C::bShouldDoFullAnimationUpdate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, TAG_DuelTagToValidate) == 0x00452C, "Member 'ABP_PlayerPawn_NonParticipant_C::TAG_DuelTagToValidate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GEDuelHandle) == 0x004534, "Member 'ABP_PlayerPawn_NonParticipant_C::GEDuelHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_DuelTag) == 0x004540, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_DuelTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, Challenger) == 0x004548, "Member 'ABP_PlayerPawn_NonParticipant_C::Challenger' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, TAG_CanBeChallenged) == 0x004550, "Member 'ABP_PlayerPawn_NonParticipant_C::TAG_CanBeChallenged' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OverrideLayerAnimBP) == 0x004558, "Member 'ABP_PlayerPawn_NonParticipant_C::OverrideLayerAnimBP' has a wrong offset!");

}

