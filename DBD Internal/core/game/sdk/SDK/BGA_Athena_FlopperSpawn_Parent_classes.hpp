#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_FlopperSpawn_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_FlopperSpawn_Parent.BGA_Athena_FlopperSpawn_Parent_C
// 0x0428 (0x0BF0 - 0x07C8)
class ABGA_Athena_FlopperSpawn_Parent_C : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          OverlapVolume;                                     // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_MaxUses;                                       // 0x07E0(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         Row_MinUses;                                       // 0x0808(0x0028)(Edit, BlueprintVisible)
	int32                                         Uses;                                              // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AfterHideLifeSpan;                                 // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemsToDrop;                                       // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Spawn;                                          // 0x0840(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_SpawnChanceMax;                                // 0x0848(0x0028)(Edit, BlueprintVisible)
	bool                                          IsWorldSpawner;                                    // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_871[0x7];                                      // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_SpawnChanceMin;                                // 0x0878(0x0028)(Edit, BlueprintVisible)
	TMap<struct FGameplayTag, class FName>        TagToLoot_FishingSpotTier;                         // 0x08A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AlreadySpawnChecked;                               // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_8F1[0x7];                                      // 0x08F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class FName>        TagToLoot_DefaultTier;                             // 0x08F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, class FName>        TagToLoot_ToUse;                                   // 0x0948(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, class FName>        TagToLoot_HighTier_FishingRod;                     // 0x0998(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasTypeTag;                                        // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E9[0x7];                                      // 0x09E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x09F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTagContainer                  LootTags;                                          // 0x0A00(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MaxUses;                                           // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Debug;                                             // 0x0A21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A22[0x6];                                      // 0x0A22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_AddedBobChanceOnOverlapMin;                    // 0x0A28(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_AddedBobChanceOnOverlapMax;                    // 0x0A50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPickup*                            SpawnedItem;                                       // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_HighTierPoolSpawn;                           // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  QuestTag_DefaultSpawn;                             // 0x0A88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  QuestTag_WorldSpawn;                               // 0x0AA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APrj_Athena_FloppingRabbit_C*           Projectile;                                        // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FishSizeCurve;                                     // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UFortItemDefinition*, struct FScalableFloat> FishSizeMap;                             // 0x0AD8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MiniGameFishSizeThreshold;                         // 0x0B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2C[0x4];                                      // 0x0B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MiniGameFishSizePercentileThreshold;               // 0x0B30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AlwaysStartMiniGame;                               // 0x0B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B59[0x3];                                      // 0x0B59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HighTierFishingRod;                                // 0x0B5C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   HighTierLootData;                                  // 0x0B64(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DefaultLootTag;                                    // 0x0B6C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B74[0x4];                                      // 0x0B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Fish_Variant_String;                               // 0x0B78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          New_Best_Fish;                                     // 0x0B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B89[0x3];                                      // 0x0B89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fish_Length;                                       // 0x0B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnDelay;                                      // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B94[0x4];                                      // 0x0B94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_RespawnDelayMin;                               // 0x0B98(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         Row_RespawnDelayMax;                               // 0x0BC0(0x0028)(Edit, BlueprintVisible)
	float                                         ForcedRespawnDelay;                                // 0x0BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_Athena_FlopperSpawn_Parent(int32 EntryPoint);
	void HideAndDelayForRespawn(float TimeToDelay);
	void Clear_Saved_Collection_Data();
	void UpdateCollectionsComponent(bool bCaughtFish, class AActor* Player, class UFortItemDefinition* ItemDefinition, class AFortPickup* Pickup, float Length);
	void SpawnItem(class AActor* Target, bool Hooked, class USceneComponent* HookComponent, const struct FVector& SpawnLoc, class AActor* Player, float ItemSpawnDelay, bool CaughtWithFishingRod, bool CaughtWithHappyGhost, class AActor* ItemUsedToFish, class APrj_Athena_FloppingRabbit_C* Projectile_0, const struct FGameplayTagContainer& Required_Tags);
	void ReceiveBeginPlay();
	void FishingComplete();
	void PlaySpawnItemHightier(const struct FVector& Location);
	void BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HideAndKill();
	void OnReady_5804F209455A50B3EE64E3AED087DE64(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void UserConstructionScript();
	void SetBalanceValues();
	void HandleUseTracking();
	void ShouldKill();
	void GetLootTier(bool IsExplosion, bool IsProFishingRod, class FName* Output_Get);
	void SetRespawnDelay();
	bool Can_Respawn();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_FlopperSpawn_Parent_C">();
	}
	static class ABGA_Athena_FlopperSpawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_FlopperSpawn_Parent_C>();
	}
};
static_assert(alignof(ABGA_Athena_FlopperSpawn_Parent_C) == 0x000008, "Wrong alignment on ABGA_Athena_FlopperSpawn_Parent_C");
static_assert(sizeof(ABGA_Athena_FlopperSpawn_Parent_C) == 0x000BF0, "Wrong size on ABGA_Athena_FlopperSpawn_Parent_C");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, UberGraphFrame) == 0x0007C8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, OverlapVolume) == 0x0007D0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, DefaultSceneRoot) == 0x0007D8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_MaxUses) == 0x0007E0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_MaxUses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_MinUses) == 0x000808, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_MinUses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Uses) == 0x000830, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Uses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, AfterHideLifeSpan) == 0x000834, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::AfterHideLifeSpan' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, ItemsToDrop) == 0x000838, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::ItemsToDrop' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, GC_Spawn) == 0x000840, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::GC_Spawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_SpawnChanceMax) == 0x000848, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_SpawnChanceMax' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, IsWorldSpawner) == 0x000870, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::IsWorldSpawner' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_SpawnChanceMin) == 0x000878, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_SpawnChanceMin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_FishingSpotTier) == 0x0008A0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_FishingSpotTier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, AlreadySpawnChecked) == 0x0008F0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::AlreadySpawnChecked' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_DefaultTier) == 0x0008F8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_DefaultTier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_ToUse) == 0x000948, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_ToUse' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_HighTier_FishingRod) == 0x000998, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_HighTier_FishingRod' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, HasTypeTag) == 0x0009E8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::HasTypeTag' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, ObjectTypes) == 0x0009F0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::ObjectTypes' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, LootTags) == 0x000A00, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::LootTags' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, MaxUses) == 0x000A20, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::MaxUses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Debug) == 0x000A21, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Debug' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_AddedBobChanceOnOverlapMin) == 0x000A28, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_AddedBobChanceOnOverlapMin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_AddedBobChanceOnOverlapMax) == 0x000A50, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_AddedBobChanceOnOverlapMax' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, SpawnedItem) == 0x000A78, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::SpawnedItem' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Sound_HighTierPoolSpawn) == 0x000A80, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Sound_HighTierPoolSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, QuestTag_DefaultSpawn) == 0x000A88, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::QuestTag_DefaultSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, QuestTag_WorldSpawn) == 0x000AA8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::QuestTag_WorldSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Projectile) == 0x000AC8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Projectile' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, FishSizeCurve) == 0x000AD0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::FishSizeCurve' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, FishSizeMap) == 0x000AD8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::FishSizeMap' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, MiniGameFishSizeThreshold) == 0x000B28, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::MiniGameFishSizeThreshold' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, MiniGameFishSizePercentileThreshold) == 0x000B30, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::MiniGameFishSizePercentileThreshold' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, AlwaysStartMiniGame) == 0x000B58, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::AlwaysStartMiniGame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, HighTierFishingRod) == 0x000B5C, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::HighTierFishingRod' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, HighTierLootData) == 0x000B64, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::HighTierLootData' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, DefaultLootTag) == 0x000B6C, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::DefaultLootTag' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Fish_Variant_String) == 0x000B78, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Fish_Variant_String' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, New_Best_Fish) == 0x000B88, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::New_Best_Fish' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Fish_Length) == 0x000B8C, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Fish_Length' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, RespawnDelay) == 0x000B90, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::RespawnDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_RespawnDelayMin) == 0x000B98, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_RespawnDelayMin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_RespawnDelayMax) == 0x000BC0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_RespawnDelayMax' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, ForcedRespawnDelay) == 0x000BE8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::ForcedRespawnDelay' has a wrong offset!");

}

