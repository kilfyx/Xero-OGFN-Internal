#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttachableWheelsRuntime

#include "Basic.hpp"

#include "AttachableWheelsRuntime_classes.hpp"
#include "AttachableWheelsRuntime_parameters.hpp"


namespace SDK
{

// Function AttachableWheelsRuntime.AttachableWheel.AttachInPlace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAttachableWheel::AttachInPlace(class UPrimitiveComponent* InComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AttachInPlace");

	Params::AttachableWheel_AttachInPlace Parms{};

	Parms.InComponent = InComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheel.AttachTo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AxleDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAttachableWheel::AttachTo(class UPrimitiveComponent* InComponent, const struct FVector& WorldLocation, const struct FVector& AxleDirection)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AttachTo");

	Params::AttachableWheel_AttachTo Parms{};

	Parms.InComponent = InComponent;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.AxleDirection = std::move(AxleDirection);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheel.Detach
// (Final, Native, Public, BlueprintCallable)

void AAttachableWheel::Detach()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Detach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttachableWheelsRuntime.AttachableWheel.DetachFrom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAttachableWheel::DetachFrom(class UPrimitiveComponent* InComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DetachFrom");

	Params::AttachableWheel_DetachFrom Parms{};

	Parms.InComponent = InComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheel.OnAttached
// (Event, Public, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              AttachedComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAttachableWheel::OnAttached(class UPrimitiveComponent* AttachedComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAttached");

	Params::AttachableWheel_OnAttached Parms{};

	Parms.AttachedComponent = AttachedComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttachableWheelsRuntime.AttachableWheel.OnDetached
// (Event, Public, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              DetachedComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAttachableWheel::OnDetached(class UPrimitiveComponent* DetachedComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDetached");

	Params::AttachableWheel_OnDetached Parms{};

	Parms.DetachedComponent = DetachedComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttachableWheelsRuntime.AttachableWheel.OnPhysicsStateChanged
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComponentPhysicsStateChange            StateChange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAttachableWheel::OnPhysicsStateChanged(class UPrimitiveComponent* PrimitiveComponent, EComponentPhysicsStateChange StateChange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPhysicsStateChanged");

	Params::AttachableWheel_OnPhysicsStateChanged Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.StateChange = StateChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttachableWheelsRuntime.AttachableWheel.OnRep_AttachData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FAttachableWheelAttachData       AttachDataPrev                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AAttachableWheel::OnRep_AttachData(const struct FAttachableWheelAttachData& AttachDataPrev)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_AttachData");

	Params::AttachableWheel_OnRep_AttachData Parms{};

	Parms.AttachDataPrev = std::move(AttachDataPrev);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttachableWheelsRuntime.AttachableWheel.DrawDebug
// (Final, Native, Public, BlueprintCallable, Const)

void AAttachableWheel::DrawDebug() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DrawDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttachableWheelsRuntime.AttachableWheel.GetAttachedComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* AAttachableWheel::GetAttachedComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAttachedComponent");

	Params::AttachableWheel_GetAttachedComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheel.GetWorldSpaceAttachData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FAttachableWheelAttachData       OutAttachData                                          (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BodyName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAttachableWheel::GetWorldSpaceAttachData(struct FAttachableWheelAttachData* OutAttachData, class UPrimitiveComponent* PrimitiveComponent, const class FName BodyName) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetWorldSpaceAttachData");

	Params::AttachableWheel_GetWorldSpaceAttachData Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.BodyName = BodyName;

	UObject::ProcessEvent(Func, &Parms);

	if (OutAttachData != nullptr)
		*OutAttachData = std::move(Parms.OutAttachData);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.DetachAllWheels
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAttachableWheelsComponent::DetachAllWheels()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DetachAllWheels");

	Params::AttachableWheelsComponent_DetachAllWheels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.HandleWheelAttached_Internal
// (Final, Native, Protected)
// Parameters:
// class AAttachableWheel*                 AttachedWheel                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAttachableWheelsComponent::HandleWheelAttached_Internal(class AAttachableWheel* AttachedWheel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWheelAttached_Internal");

	Params::AttachableWheelsComponent_HandleWheelAttached_Internal Parms{};

	Parms.AttachedWheel = AttachedWheel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.HandleWheelDetached_Internal
// (Final, Native, Protected)
// Parameters:
// class AAttachableWheel*                 AttachedWheel                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAttachableWheelsComponent::HandleWheelDetached_Internal(class AAttachableWheel* AttachedWheel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWheelDetached_Internal");

	Params::AttachableWheelsComponent_HandleWheelDetached_Internal Parms{};

	Parms.AttachedWheel = AttachedWheel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.OnWheelAttached
// (RequiredAPI, Event, Public, BlueprintEvent)
// Parameters:
// class AAttachableWheel*                 AttachedWheel                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAttachableWheelsComponent::OnWheelAttached(class AAttachableWheel* AttachedWheel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWheelAttached");

	Params::AttachableWheelsComponent_OnWheelAttached Parms{};

	Parms.AttachedWheel = AttachedWheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.OnWheelDetached
// (RequiredAPI, Event, Public, BlueprintEvent)
// Parameters:
// class AAttachableWheel*                 AttachedWheel                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAttachableWheelsComponent::OnWheelDetached(class AAttachableWheel* AttachedWheel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWheelDetached");

	Params::AttachableWheelsComponent_OnWheelDetached Parms{};

	Parms.AttachedWheel = AttachedWheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.DrawDebug
// (Final, RequiredAPI, Native, Public, BlueprintCallable, Const)

void UAttachableWheelsComponent::DrawDebug() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DrawDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.GetAttachedWheelClosestOnAxis
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutClosetDistanceToAxis                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutClosestPointOnAxis                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutClosestAxis                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AAttachableWheel*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AAttachableWheel* UAttachableWheelsComponent::GetAttachedWheelClosestOnAxis(const struct FVector& Point, float* OutClosetDistanceToAxis, struct FVector* OutClosestPointOnAxis, struct FVector* OutClosestAxis) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAttachedWheelClosestOnAxis");

	Params::AttachableWheelsComponent_GetAttachedWheelClosestOnAxis Parms{};

	Parms.Point = std::move(Point);

	UObject::ProcessEvent(Func, &Parms);

	if (OutClosetDistanceToAxis != nullptr)
		*OutClosetDistanceToAxis = Parms.OutClosetDistanceToAxis;

	if (OutClosestPointOnAxis != nullptr)
		*OutClosestPointOnAxis = std::move(Parms.OutClosestPointOnAxis);

	if (OutClosestAxis != nullptr)
		*OutClosestAxis = std::move(Parms.OutClosestAxis);

	return Parms.ReturnValue;
}


// Function AttachableWheelsRuntime.AttachableWheelsComponent.GetAttachedWheels
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AAttachableWheel*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AAttachableWheel*> UAttachableWheelsComponent::GetAttachedWheels() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAttachedWheels");

	Params::AttachableWheelsComponent_GetAttachedWheels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

