#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_Apply_SneakySnowmanV2

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_Apply_SneakySnowmanV2.GA_Athena_Apply_SneakySnowmanV2_C
// 0x0138 (0x0BF0 - 0x0AB8)
class UGA_Athena_Apply_SneakySnowmanV2_C : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerDuration;                                   // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ACC[0x4];                                      // 0x0ACC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAthena_Player_SneakySnowmanV2_C*       PlayerSnowman;                                     // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SnowmanHolsterSelf;                                // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  SnowmanTag;                                        // 0x0AE0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EquippingCue;                                      // 0x0B00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SnowmanCue;                                        // 0x0B08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnimFirst;                                     // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Instant;                                           // 0x0B11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B12[0x6];                                      // 0x0B12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayAbilityMontageInfo        HideMontage;                                       // 0x0B18(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EquipCue;                                          // 0x0B70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x0B78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B79[0x7];                                      // 0x0B79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               SnowmanItemDef;                                    // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFortItem*>                      SnowmanItemInstances;                              // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 GrantedGunClass;                                   // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHolster;                                     // 0x0BA0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA1[0x7];                                      // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UpdateHolsterTimer;                                // 0x0BA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CostumeClass;                                      // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttachmentOffset;                                  // 0x0BB8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeCameraMode;                                  // 0x0BC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC5[0x3];                                      // 0x0BC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ParticlesTime;                                     // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowConsumables;                                  // 0x0BCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AllowReload;                                       // 0x0BCD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BCE[0x2];                                      // 0x0BCE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  QuestTags;                                         // 0x0BD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_Athena_Apply_SneakySnowmanV2(int32 EntryPoint);
	void SetPlayerSnowman(class AAthena_Player_SneakySnowmanV2_C* PlayerSnowman_0);
	void SetMatInt();
	void UpdatePropRef(class AAthena_Player_SneakySnowmanV2_C* PlayerSnowman_0);
	void UpdateHolster();
	void UnholsterWeapon_();
	void HolsterWeapon_();
	void OnFInishedJumpingIn();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void EventReceived_46D1CDD34CE2F1ED61BFEC8ED3490CB8(const struct FGameplayEventData& Payload);
	void EventReceived_7FDF769A4D03D913013F08BD0D869056(const struct FGameplayEventData& Payload);
	void Triggered_ACD4F56F4B8982FA9DEBFE80654DED8C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_ACD4F56F4B8982FA9DEBFE80654DED8C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_ACD4F56F4B8982FA9DEBFE80654DED8C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Triggered_CE7C38B64BB38F782A7B5C9AA8EC9A22(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_CE7C38B64BB38F782A7B5C9AA8EC9A22(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_CE7C38B64BB38F782A7B5C9AA8EC9A22(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void QuestUpdate(class AFortPlayerController* FortPC);
	void CheckForExistingSnowman();

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_Apply_SneakySnowmanV2_C">();
	}
	static class UGA_Athena_Apply_SneakySnowmanV2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_Apply_SneakySnowmanV2_C>();
	}
};
static_assert(alignof(UGA_Athena_Apply_SneakySnowmanV2_C) == 0x000008, "Wrong alignment on UGA_Athena_Apply_SneakySnowmanV2_C");
static_assert(sizeof(UGA_Athena_Apply_SneakySnowmanV2_C) == 0x000BF0, "Wrong size on UGA_Athena_Apply_SneakySnowmanV2_C");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, UberGraphFrame) == 0x000AB8, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, PlayerPawn) == 0x000AC0, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, TriggerDuration) == 0x000AC8, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::TriggerDuration' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, PlayerSnowman) == 0x000AD0, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::PlayerSnowman' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, SnowmanHolsterSelf) == 0x000AD8, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::SnowmanHolsterSelf' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, SnowmanTag) == 0x000AE0, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::SnowmanTag' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, EquippingCue) == 0x000B00, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::EquippingCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, SnowmanCue) == 0x000B08, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::SnowmanCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, PlayAnimFirst) == 0x000B10, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::PlayAnimFirst' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, Instant) == 0x000B11, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::Instant' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, HideMontage) == 0x000B18, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::HideMontage' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, EquipCue) == 0x000B70, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::EquipCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, Equipped) == 0x000B78, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::Equipped' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, SnowmanItemDef) == 0x000B80, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::SnowmanItemDef' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, SnowmanItemInstances) == 0x000B88, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::SnowmanItemInstances' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, GrantedGunClass) == 0x000B98, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::GrantedGunClass' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, ShouldHolster) == 0x000BA0, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::ShouldHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, UpdateHolsterTimer) == 0x000BA8, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::UpdateHolsterTimer' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, CostumeClass) == 0x000BB0, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::CostumeClass' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, AttachmentOffset) == 0x000BB8, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::AttachmentOffset' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, ChangeCameraMode) == 0x000BC4, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::ChangeCameraMode' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, ParticlesTime) == 0x000BC8, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::ParticlesTime' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, AllowConsumables) == 0x000BCC, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::AllowConsumables' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, AllowReload) == 0x000BCD, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::AllowReload' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Apply_SneakySnowmanV2_C, QuestTags) == 0x000BD0, "Member 'UGA_Athena_Apply_SneakySnowmanV2_C::QuestTags' has a wrong offset!");

}

