#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Quat4

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Quat4.Quat4.calcTangents
// 0x0028 (0x0028 - 0x0000)
struct Quat4_calcTangents final
{
public:
	class UQuat4*                                 __verse_0x07BDAE31_prevQ;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xC170DC03_nextQ;                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x35918A51_tension;                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_calcTangents) == 0x000008, "Wrong alignment on Quat4_calcTangents");
static_assert(sizeof(Quat4_calcTangents) == 0x000028, "Wrong size on Quat4_calcTangents");
static_assert(offsetof(Quat4_calcTangents, __verse_0x07BDAE31_prevQ) == 0x000000, "Member 'Quat4_calcTangents::__verse_0x07BDAE31_prevQ' has a wrong offset!");
static_assert(offsetof(Quat4_calcTangents, __verse_0xE518C7F2_q) == 0x000008, "Member 'Quat4_calcTangents::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_calcTangents, __verse_0xC170DC03_nextQ) == 0x000010, "Member 'Quat4_calcTangents::__verse_0xC170DC03_nextQ' has a wrong offset!");
static_assert(offsetof(Quat4_calcTangents, __verse_0x35918A51_tension) == 0x000018, "Member 'Quat4_calcTangents::__verse_0x35918A51_tension' has a wrong offset!");
static_assert(offsetof(Quat4_calcTangents, RetVal) == 0x000020, "Member 'Quat4_calcTangents::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Create
// 0x0018 (0x0018 - 0x0000)
struct Quat4_Create final
{
public:
	class UVector3*                               __verse_0xAB14FAEF_axis;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x8ADC6410_radians;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Create) == 0x000008, "Wrong alignment on Quat4_Create");
static_assert(sizeof(Quat4_Create) == 0x000018, "Wrong size on Quat4_Create");
static_assert(offsetof(Quat4_Create, __verse_0xAB14FAEF_axis) == 0x000000, "Member 'Quat4_Create::__verse_0xAB14FAEF_axis' has a wrong offset!");
static_assert(offsetof(Quat4_Create, __verse_0x8ADC6410_radians) == 0x000008, "Member 'Quat4_Create::__verse_0x8ADC6410_radians' has a wrong offset!");
static_assert(offsetof(Quat4_Create, RetVal) == 0x000010, "Member 'Quat4_Create::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.createFromRotation
// 0x0010 (0x0010 - 0x0000)
struct Quat4_createFromRotation final
{
public:
	class URotation3*                             __verse_0xAA1ABDC9_rotation;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_createFromRotation) == 0x000008, "Wrong alignment on Quat4_createFromRotation");
static_assert(sizeof(Quat4_createFromRotation) == 0x000010, "Wrong size on Quat4_createFromRotation");
static_assert(offsetof(Quat4_createFromRotation, __verse_0xAA1ABDC9_rotation) == 0x000000, "Member 'Quat4_createFromRotation::__verse_0xAA1ABDC9_rotation' has a wrong offset!");
static_assert(offsetof(Quat4_createFromRotation, RetVal) == 0x000008, "Member 'Quat4_createFromRotation::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.createIdentity
// 0x0008 (0x0008 - 0x0000)
struct Quat4_createIdentity final
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_createIdentity) == 0x000008, "Wrong alignment on Quat4_createIdentity");
static_assert(sizeof(Quat4_createIdentity) == 0x000008, "Wrong size on Quat4_createIdentity");
static_assert(offsetof(Quat4_createIdentity, RetVal) == 0x000000, "Member 'Quat4_createIdentity::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.createZero
// 0x0008 (0x0008 - 0x0000)
struct Quat4_createZero final
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_createZero) == 0x000008, "Wrong alignment on Quat4_createZero");
static_assert(sizeof(Quat4_createZero) == 0x000008, "Wrong size on Quat4_createZero");
static_assert(offsetof(Quat4_createZero, RetVal) == 0x000000, "Member 'Quat4_createZero::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Error
// 0x0018 (0x0018 - 0x0000)
struct Quat4_Error final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Error) == 0x000008, "Wrong alignment on Quat4_Error");
static_assert(sizeof(Quat4_Error) == 0x000018, "Wrong size on Quat4_Error");
static_assert(offsetof(Quat4_Error, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_Error::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_Error, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_Error::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_Error, RetVal) == 0x000010, "Member 'Quat4_Error::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.fastBilerp
// 0x0030 (0x0030 - 0x0000)
struct Quat4_fastBilerp final
{
public:
	class UQuat4*                                 __verse_0x47EC792A_p00;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xD9ECD3E6_p10;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x228BC592_p01;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xBC8B6F5E_p11;                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x4DC01E1F_fracX;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x28A7A2A7_fracY;                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_fastBilerp) == 0x000008, "Wrong alignment on Quat4_fastBilerp");
static_assert(sizeof(Quat4_fastBilerp) == 0x000030, "Wrong size on Quat4_fastBilerp");
static_assert(offsetof(Quat4_fastBilerp, __verse_0x47EC792A_p00) == 0x000000, "Member 'Quat4_fastBilerp::__verse_0x47EC792A_p00' has a wrong offset!");
static_assert(offsetof(Quat4_fastBilerp, __verse_0xD9ECD3E6_p10) == 0x000008, "Member 'Quat4_fastBilerp::__verse_0xD9ECD3E6_p10' has a wrong offset!");
static_assert(offsetof(Quat4_fastBilerp, __verse_0x228BC592_p01) == 0x000010, "Member 'Quat4_fastBilerp::__verse_0x228BC592_p01' has a wrong offset!");
static_assert(offsetof(Quat4_fastBilerp, __verse_0xBC8B6F5E_p11) == 0x000018, "Member 'Quat4_fastBilerp::__verse_0xBC8B6F5E_p11' has a wrong offset!");
static_assert(offsetof(Quat4_fastBilerp, __verse_0x4DC01E1F_fracX) == 0x000020, "Member 'Quat4_fastBilerp::__verse_0x4DC01E1F_fracX' has a wrong offset!");
static_assert(offsetof(Quat4_fastBilerp, __verse_0x28A7A2A7_fracY) == 0x000024, "Member 'Quat4_fastBilerp::__verse_0x28A7A2A7_fracY' has a wrong offset!");
static_assert(offsetof(Quat4_fastBilerp, RetVal) == 0x000028, "Member 'Quat4_fastBilerp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.fastLerp
// 0x0020 (0x0020 - 0x0000)
struct Quat4_fastLerp final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_fastLerp) == 0x000008, "Wrong alignment on Quat4_fastLerp");
static_assert(sizeof(Quat4_fastLerp) == 0x000020, "Wrong size on Quat4_fastLerp");
static_assert(offsetof(Quat4_fastLerp, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_fastLerp::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_fastLerp, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_fastLerp::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_fastLerp, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_fastLerp::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_fastLerp, RetVal) == 0x000018, "Member 'Quat4_fastLerp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.findBetween
// 0x0018 (0x0018 - 0x0000)
struct Quat4_findBetween final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_findBetween) == 0x000008, "Wrong alignment on Quat4_findBetween");
static_assert(sizeof(Quat4_findBetween) == 0x000018, "Wrong size on Quat4_findBetween");
static_assert(offsetof(Quat4_findBetween, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Quat4_findBetween::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Quat4_findBetween, __verse_0x54773F55_v2) == 0x000008, "Member 'Quat4_findBetween::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Quat4_findBetween, RetVal) == 0x000010, "Member 'Quat4_findBetween::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.findBetweenNormals
// 0x0018 (0x0018 - 0x0000)
struct Quat4_findBetweenNormals final
{
public:
	class UVector3*                               __verse_0x24F2D4E8_n1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0xCA5D61FA_n2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_findBetweenNormals) == 0x000008, "Wrong alignment on Quat4_findBetweenNormals");
static_assert(sizeof(Quat4_findBetweenNormals) == 0x000018, "Wrong size on Quat4_findBetweenNormals");
static_assert(offsetof(Quat4_findBetweenNormals, __verse_0x24F2D4E8_n1) == 0x000000, "Member 'Quat4_findBetweenNormals::__verse_0x24F2D4E8_n1' has a wrong offset!");
static_assert(offsetof(Quat4_findBetweenNormals, __verse_0xCA5D61FA_n2) == 0x000008, "Member 'Quat4_findBetweenNormals::__verse_0xCA5D61FA_n2' has a wrong offset!");
static_assert(offsetof(Quat4_findBetweenNormals, RetVal) == 0x000010, "Member 'Quat4_findBetweenNormals::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.findBetweenVectors
// 0x0018 (0x0018 - 0x0000)
struct Quat4_findBetweenVectors final
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_findBetweenVectors) == 0x000008, "Wrong alignment on Quat4_findBetweenVectors");
static_assert(sizeof(Quat4_findBetweenVectors) == 0x000018, "Wrong size on Quat4_findBetweenVectors");
static_assert(offsetof(Quat4_findBetweenVectors, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Quat4_findBetweenVectors::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Quat4_findBetweenVectors, __verse_0x54773F55_v2) == 0x000008, "Member 'Quat4_findBetweenVectors::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Quat4_findBetweenVectors, RetVal) == 0x000010, "Member 'Quat4_findBetweenVectors::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.safeError
// 0x0018 (0x0018 - 0x0000)
struct Quat4_safeError final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_safeError) == 0x000008, "Wrong alignment on Quat4_safeError");
static_assert(sizeof(Quat4_safeError) == 0x000018, "Wrong size on Quat4_safeError");
static_assert(offsetof(Quat4_safeError, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_safeError::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_safeError, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_safeError::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_safeError, RetVal) == 0x000010, "Member 'Quat4_safeError::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerp
// 0x0020 (0x0020 - 0x0000)
struct Quat4_slerp final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_slerp) == 0x000008, "Wrong alignment on Quat4_slerp");
static_assert(sizeof(Quat4_slerp) == 0x000020, "Wrong size on Quat4_slerp");
static_assert(offsetof(Quat4_slerp, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_slerp::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_slerp, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_slerp::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_slerp, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_slerp::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_slerp, RetVal) == 0x000018, "Member 'Quat4_slerp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerpFullPath
// 0x0020 (0x0020 - 0x0000)
struct Quat4_slerpFullPath final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_slerpFullPath) == 0x000008, "Wrong alignment on Quat4_slerpFullPath");
static_assert(sizeof(Quat4_slerpFullPath) == 0x000020, "Wrong size on Quat4_slerpFullPath");
static_assert(offsetof(Quat4_slerpFullPath, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_slerpFullPath::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_slerpFullPath, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_slerpFullPath::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_slerpFullPath, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_slerpFullPath::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_slerpFullPath, RetVal) == 0x000018, "Member 'Quat4_slerpFullPath::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerpFullPathNotNormalized
// 0x0020 (0x0020 - 0x0000)
struct Quat4_slerpFullPathNotNormalized final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_slerpFullPathNotNormalized) == 0x000008, "Wrong alignment on Quat4_slerpFullPathNotNormalized");
static_assert(sizeof(Quat4_slerpFullPathNotNormalized) == 0x000020, "Wrong size on Quat4_slerpFullPathNotNormalized");
static_assert(offsetof(Quat4_slerpFullPathNotNormalized, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_slerpFullPathNotNormalized::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_slerpFullPathNotNormalized, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_slerpFullPathNotNormalized::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_slerpFullPathNotNormalized, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_slerpFullPathNotNormalized::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_slerpFullPathNotNormalized, RetVal) == 0x000018, "Member 'Quat4_slerpFullPathNotNormalized::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerpNotNormalized
// 0x0020 (0x0020 - 0x0000)
struct Quat4_slerpNotNormalized final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_slerpNotNormalized) == 0x000008, "Wrong alignment on Quat4_slerpNotNormalized");
static_assert(sizeof(Quat4_slerpNotNormalized) == 0x000020, "Wrong size on Quat4_slerpNotNormalized");
static_assert(offsetof(Quat4_slerpNotNormalized, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_slerpNotNormalized::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_slerpNotNormalized, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_slerpNotNormalized::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_slerpNotNormalized, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_slerpNotNormalized::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_slerpNotNormalized, RetVal) == 0x000018, "Member 'Quat4_slerpNotNormalized::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Squad
// 0x0030 (0x0030 - 0x0000)
struct Quat4_Squad final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xC7DFAF05_t1;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x29701A17_t2;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Squad) == 0x000008, "Wrong alignment on Quat4_Squad");
static_assert(sizeof(Quat4_Squad) == 0x000030, "Wrong size on Quat4_Squad");
static_assert(offsetof(Quat4_Squad, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_Squad::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0xC7DFAF05_t1) == 0x000008, "Member 'Quat4_Squad::__verse_0xC7DFAF05_t1' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0x4D7EFA5F_q2) == 0x000010, "Member 'Quat4_Squad::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0x29701A17_t2) == 0x000018, "Member 'Quat4_Squad::__verse_0x29701A17_t2' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0x05A40B7F_alpha) == 0x000020, "Member 'Quat4_Squad::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, RetVal) == 0x000028, "Member 'Quat4_Squad::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.squadFullPath
// 0x0030 (0x0030 - 0x0000)
struct Quat4_squadFullPath final
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xC7DFAF05_t1;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x29701A17_t2;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_squadFullPath) == 0x000008, "Wrong alignment on Quat4_squadFullPath");
static_assert(sizeof(Quat4_squadFullPath) == 0x000030, "Wrong size on Quat4_squadFullPath");
static_assert(offsetof(Quat4_squadFullPath, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_squadFullPath::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_squadFullPath, __verse_0xC7DFAF05_t1) == 0x000008, "Member 'Quat4_squadFullPath::__verse_0xC7DFAF05_t1' has a wrong offset!");
static_assert(offsetof(Quat4_squadFullPath, __verse_0x4D7EFA5F_q2) == 0x000010, "Member 'Quat4_squadFullPath::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_squadFullPath, __verse_0x29701A17_t2) == 0x000018, "Member 'Quat4_squadFullPath::__verse_0x29701A17_t2' has a wrong offset!");
static_assert(offsetof(Quat4_squadFullPath, __verse_0x05A40B7F_alpha) == 0x000020, "Member 'Quat4_squadFullPath::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_squadFullPath, RetVal) == 0x000028, "Member 'Quat4_squadFullPath::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Add
// 0x0010 (0x0010 - 0x0000)
struct Quat4_Add final
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Add) == 0x000008, "Wrong alignment on Quat4_Add");
static_assert(sizeof(Quat4_Add) == 0x000010, "Wrong size on Quat4_Add");
static_assert(offsetof(Quat4_Add, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_Add::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_Add, RetVal) == 0x000008, "Member 'Quat4_Add::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.angularRadianDistance
// 0x0010 (0x0010 - 0x0000)
struct Quat4_angularRadianDistance final
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_angularRadianDistance) == 0x000008, "Wrong alignment on Quat4_angularRadianDistance");
static_assert(sizeof(Quat4_angularRadianDistance) == 0x000010, "Wrong size on Quat4_angularRadianDistance");
static_assert(offsetof(Quat4_angularRadianDistance, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_angularRadianDistance::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_angularRadianDistance, RetVal) == 0x000008, "Member 'Quat4_angularRadianDistance::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.divideByScalar
// 0x0018 (0x0018 - 0x0000)
struct Quat4_divideByScalar final
{
public:
	float                                         __verse_0x6ED0CE58_s;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x0FA0AFBE_reciprocal_0;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_divideByScalar) == 0x000008, "Wrong alignment on Quat4_divideByScalar");
static_assert(sizeof(Quat4_divideByScalar) == 0x000018, "Wrong size on Quat4_divideByScalar");
static_assert(offsetof(Quat4_divideByScalar, __verse_0x6ED0CE58_s) == 0x000000, "Member 'Quat4_divideByScalar::__verse_0x6ED0CE58_s' has a wrong offset!");
static_assert(offsetof(Quat4_divideByScalar, RetVal) == 0x000008, "Member 'Quat4_divideByScalar::RetVal' has a wrong offset!");
static_assert(offsetof(Quat4_divideByScalar, __verse_0x0FA0AFBE_reciprocal_0) == 0x000010, "Member 'Quat4_divideByScalar::__verse_0x0FA0AFBE_reciprocal_0' has a wrong offset!");

// Function Math_Quat4.Quat4.DoT
// 0x0010 (0x0010 - 0x0000)
struct Quat4_DoT final
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_DoT) == 0x000008, "Wrong alignment on Quat4_DoT");
static_assert(sizeof(Quat4_DoT) == 0x000010, "Wrong size on Quat4_DoT");
static_assert(offsetof(Quat4_DoT, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_DoT::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_DoT, RetVal) == 0x000008, "Member 'Quat4_DoT::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.enforceShortestArcWith
// 0x0008 (0x0008 - 0x0000)
struct Quat4_enforceShortestArcWith final
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_enforceShortestArcWith) == 0x000008, "Wrong alignment on Quat4_enforceShortestArcWith");
static_assert(sizeof(Quat4_enforceShortestArcWith) == 0x000008, "Wrong size on Quat4_enforceShortestArcWith");
static_assert(offsetof(Quat4_enforceShortestArcWith, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_enforceShortestArcWith::__verse_0xE518C7F2_q' has a wrong offset!");

// Function Math_Quat4.Quat4.Equals
// 0x0010 (0x0010 - 0x0000)
struct Quat4_Equals final
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_Equals) == 0x000008, "Wrong alignment on Quat4_Equals");
static_assert(sizeof(Quat4_Equals) == 0x000010, "Wrong size on Quat4_Equals");
static_assert(offsetof(Quat4_Equals, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_Equals::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_Equals, __verse_0xB4A6AEEC_tolerance) == 0x000008, "Member 'Quat4_Equals::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Quat4.Quat4.Exp
// 0x0008 (0x0008 - 0x0000)
struct Quat4_Exp final
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Exp) == 0x000008, "Wrong alignment on Quat4_Exp");
static_assert(sizeof(Quat4_Exp) == 0x000008, "Wrong size on Quat4_Exp");
static_assert(offsetof(Quat4_Exp, RetVal) == 0x000000, "Member 'Quat4_Exp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAngle
// 0x0004 (0x0004 - 0x0000)
struct Quat4_getAngle final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getAngle) == 0x000004, "Wrong alignment on Quat4_getAngle");
static_assert(sizeof(Quat4_getAngle) == 0x000004, "Wrong size on Quat4_getAngle");
static_assert(offsetof(Quat4_getAngle, RetVal) == 0x000000, "Member 'Quat4_getAngle::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAxisX
// 0x0008 (0x0008 - 0x0000)
struct Quat4_getAxisX final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getAxisX) == 0x000008, "Wrong alignment on Quat4_getAxisX");
static_assert(sizeof(Quat4_getAxisX) == 0x000008, "Wrong size on Quat4_getAxisX");
static_assert(offsetof(Quat4_getAxisX, RetVal) == 0x000000, "Member 'Quat4_getAxisX::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAxisY
// 0x0008 (0x0008 - 0x0000)
struct Quat4_getAxisY final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getAxisY) == 0x000008, "Wrong alignment on Quat4_getAxisY");
static_assert(sizeof(Quat4_getAxisY) == 0x000008, "Wrong size on Quat4_getAxisY");
static_assert(offsetof(Quat4_getAxisY, RetVal) == 0x000000, "Member 'Quat4_getAxisY::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAxisZ
// 0x0008 (0x0008 - 0x0000)
struct Quat4_getAxisZ final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getAxisZ) == 0x000008, "Wrong alignment on Quat4_getAxisZ");
static_assert(sizeof(Quat4_getAxisZ) == 0x000008, "Wrong size on Quat4_getAxisZ");
static_assert(offsetof(Quat4_getAxisZ, RetVal) == 0x000000, "Member 'Quat4_getAxisZ::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getNormalized
// 0x0010 (0x0010 - 0x0000)
struct Quat4_getNormalized final
{
public:
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getNormalized) == 0x000008, "Wrong alignment on Quat4_getNormalized");
static_assert(sizeof(Quat4_getNormalized) == 0x000010, "Wrong size on Quat4_getNormalized");
static_assert(offsetof(Quat4_getNormalized, __verse_0xB4A6AEEC_tolerance) == 0x000000, "Member 'Quat4_getNormalized::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");
static_assert(offsetof(Quat4_getNormalized, RetVal) == 0x000008, "Member 'Quat4_getNormalized::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.GetRotationAxis
// 0x0008 (0x0008 - 0x0000)
struct Quat4_GetRotationAxis final
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetRotationAxis) == 0x000008, "Wrong alignment on Quat4_GetRotationAxis");
static_assert(sizeof(Quat4_GetRotationAxis) == 0x000008, "Wrong size on Quat4_GetRotationAxis");
static_assert(offsetof(Quat4_GetRotationAxis, RetVal) == 0x000000, "Member 'Quat4_GetRotationAxis::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getSwing
// 0x0010 (0x0010 - 0x0000)
struct Quat4_getSwing final
{
public:
	class UVector3*                               __verse_0x32625C4E_twistAxis;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getSwing) == 0x000008, "Wrong alignment on Quat4_getSwing");
static_assert(sizeof(Quat4_getSwing) == 0x000010, "Wrong size on Quat4_getSwing");
static_assert(offsetof(Quat4_getSwing, __verse_0x32625C4E_twistAxis) == 0x000000, "Member 'Quat4_getSwing::__verse_0x32625C4E_twistAxis' has a wrong offset!");
static_assert(offsetof(Quat4_getSwing, RetVal) == 0x000008, "Member 'Quat4_getSwing::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getTwist
// 0x0010 (0x0010 - 0x0000)
struct Quat4_getTwist final
{
public:
	class UVector3*                               __verse_0x32625C4E_twistAxis;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getTwist) == 0x000008, "Wrong alignment on Quat4_getTwist");
static_assert(sizeof(Quat4_getTwist) == 0x000010, "Wrong size on Quat4_getTwist");
static_assert(offsetof(Quat4_getTwist, __verse_0x32625C4E_twistAxis) == 0x000000, "Member 'Quat4_getTwist::__verse_0x32625C4E_twistAxis' has a wrong offset!");
static_assert(offsetof(Quat4_getTwist, RetVal) == 0x000008, "Member 'Quat4_getTwist::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getTwistRadianAngle
// 0x0010 (0x0010 - 0x0000)
struct Quat4_getTwistRadianAngle final
{
public:
	class UVector3*                               __verse_0x32625C4E_twistAxis;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_getTwistRadianAngle) == 0x000008, "Wrong alignment on Quat4_getTwistRadianAngle");
static_assert(sizeof(Quat4_getTwistRadianAngle) == 0x000010, "Wrong size on Quat4_getTwistRadianAngle");
static_assert(offsetof(Quat4_getTwistRadianAngle, __verse_0x32625C4E_twistAxis) == 0x000000, "Member 'Quat4_getTwistRadianAngle::__verse_0x32625C4E_twistAxis' has a wrong offset!");
static_assert(offsetof(Quat4_getTwistRadianAngle, RetVal) == 0x000008, "Member 'Quat4_getTwistRadianAngle::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.inverse
// 0x0008 (0x0008 - 0x0000)
struct Quat4_inverse final
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_inverse) == 0x000008, "Wrong alignment on Quat4_inverse");
static_assert(sizeof(Quat4_inverse) == 0x000008, "Wrong size on Quat4_inverse");
static_assert(offsetof(Quat4_inverse, RetVal) == 0x000000, "Member 'Quat4_inverse::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.isIdentity
// 0x0008 (0x0008 - 0x0000)
struct Quat4_isIdentity final
{
public:
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_isIdentity) == 0x000004, "Wrong alignment on Quat4_isIdentity");
static_assert(sizeof(Quat4_isIdentity) == 0x000008, "Wrong size on Quat4_isIdentity");
static_assert(offsetof(Quat4_isIdentity, __verse_0xB4A6AEEC_tolerance) == 0x000000, "Member 'Quat4_isIdentity::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Quat4.Quat4.isNormalized
// 0x0001 (0x0001 - 0x0000)
struct Quat4_isNormalized final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_isNormalized) == 0x000001, "Wrong alignment on Quat4_isNormalized");
static_assert(sizeof(Quat4_isNormalized) == 0x000001, "Wrong size on Quat4_isNormalized");

// Function Math_Quat4.Quat4.IsValid
// 0x0001 (0x0001 - 0x0000)
struct Quat4_IsValid final
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_IsValid) == 0x000001, "Wrong alignment on Quat4_IsValid");
static_assert(sizeof(Quat4_IsValid) == 0x000001, "Wrong size on Quat4_IsValid");

// Function Math_Quat4.Quat4.Log
// 0x0008 (0x0008 - 0x0000)
struct Quat4_Log final
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Log) == 0x000008, "Wrong alignment on Quat4_Log");
static_assert(sizeof(Quat4_Log) == 0x000008, "Wrong size on Quat4_Log");
static_assert(offsetof(Quat4_Log, RetVal) == 0x000000, "Member 'Quat4_Log::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.multiplyByScalar
// 0x0010 (0x0010 - 0x0000)
struct Quat4_multiplyByScalar final
{
public:
	float                                         __verse_0x6ED0CE58_s;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_multiplyByScalar) == 0x000008, "Wrong alignment on Quat4_multiplyByScalar");
static_assert(sizeof(Quat4_multiplyByScalar) == 0x000010, "Wrong size on Quat4_multiplyByScalar");
static_assert(offsetof(Quat4_multiplyByScalar, __verse_0x6ED0CE58_s) == 0x000000, "Member 'Quat4_multiplyByScalar::__verse_0x6ED0CE58_s' has a wrong offset!");
static_assert(offsetof(Quat4_multiplyByScalar, RetVal) == 0x000008, "Member 'Quat4_multiplyByScalar::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.normalize
// 0x0004 (0x0004 - 0x0000)
struct Quat4_normalize final
{
public:
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_normalize) == 0x000004, "Wrong alignment on Quat4_normalize");
static_assert(sizeof(Quat4_normalize) == 0x000004, "Wrong size on Quat4_normalize");
static_assert(offsetof(Quat4_normalize, __verse_0xB4A6AEEC_tolerance) == 0x000000, "Member 'Quat4_normalize::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Quat4.Quat4.RotateVector
// 0x0010 (0x0010 - 0x0000)
struct Quat4_RotateVector final
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_RotateVector) == 0x000008, "Wrong alignment on Quat4_RotateVector");
static_assert(sizeof(Quat4_RotateVector) == 0x000010, "Wrong size on Quat4_RotateVector");
static_assert(offsetof(Quat4_RotateVector, __verse_0x5C20106F_v) == 0x000000, "Member 'Quat4_RotateVector::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Quat4_RotateVector, RetVal) == 0x000008, "Member 'Quat4_RotateVector::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Size
// 0x0004 (0x0004 - 0x0000)
struct Quat4_Size final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Size) == 0x000004, "Wrong alignment on Quat4_Size");
static_assert(sizeof(Quat4_Size) == 0x000004, "Wrong size on Quat4_Size");
static_assert(offsetof(Quat4_Size, RetVal) == 0x000000, "Member 'Quat4_Size::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.sizeSquared
// 0x0004 (0x0004 - 0x0000)
struct Quat4_sizeSquared final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_sizeSquared) == 0x000004, "Wrong alignment on Quat4_sizeSquared");
static_assert(sizeof(Quat4_sizeSquared) == 0x000004, "Wrong size on Quat4_sizeSquared");
static_assert(offsetof(Quat4_sizeSquared, RetVal) == 0x000000, "Member 'Quat4_sizeSquared::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Subtract
// 0x0010 (0x0010 - 0x0000)
struct Quat4_Subtract final
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Subtract) == 0x000008, "Wrong alignment on Quat4_Subtract");
static_assert(sizeof(Quat4_Subtract) == 0x000010, "Wrong size on Quat4_Subtract");
static_assert(offsetof(Quat4_Subtract, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_Subtract::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_Subtract, RetVal) == 0x000008, "Member 'Quat4_Subtract::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.toEulerRotation3
// 0x0008 (0x0008 - 0x0000)
struct Quat4_toEulerRotation3 final
{
public:
	class URotation3*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_toEulerRotation3) == 0x000008, "Wrong alignment on Quat4_toEulerRotation3");
static_assert(sizeof(Quat4_toEulerRotation3) == 0x000008, "Wrong size on Quat4_toEulerRotation3");
static_assert(offsetof(Quat4_toEulerRotation3, RetVal) == 0x000000, "Member 'Quat4_toEulerRotation3::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.ToRotation3
// 0x0008 (0x0008 - 0x0000)
struct Quat4_ToRotation3 final
{
public:
	class URotation3*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_ToRotation3) == 0x000008, "Wrong alignment on Quat4_ToRotation3");
static_assert(sizeof(Quat4_ToRotation3) == 0x000008, "Wrong size on Quat4_ToRotation3");
static_assert(offsetof(Quat4_ToRotation3, RetVal) == 0x000000, "Member 'Quat4_ToRotation3::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.ToString
// 0x0010 (0x0010 - 0x0000)
struct Quat4_ToString final
{
public:
	class FString                                 RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_ToString) == 0x000008, "Wrong alignment on Quat4_ToString");
static_assert(sizeof(Quat4_ToString) == 0x000010, "Wrong size on Quat4_ToString");
static_assert(offsetof(Quat4_ToString, RetVal) == 0x000000, "Member 'Quat4_ToString::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.unrotateVector
// 0x0010 (0x0010 - 0x0000)
struct Quat4_unrotateVector final
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_unrotateVector) == 0x000008, "Wrong alignment on Quat4_unrotateVector");
static_assert(sizeof(Quat4_unrotateVector) == 0x000010, "Wrong size on Quat4_unrotateVector");
static_assert(offsetof(Quat4_unrotateVector, __verse_0x5C20106F_v) == 0x000000, "Member 'Quat4_unrotateVector::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Quat4_unrotateVector, RetVal) == 0x000008, "Member 'Quat4_unrotateVector::RetVal' has a wrong offset!");

}

