#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhosphorusWipeoutRuntime

#include "Basic.hpp"

#include "PhosphorusWipeoutRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PhosphorusWipeoutRuntime.FortAthenaMutator_PhosphorusWipeout.HandleBlockedCharacterMovement
// 0x0098 (0x0098 - 0x0000)
struct FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement final
{
public:
	struct FHitResult                             InOutImpact;                                       // 0x0000(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              FortPawn;                                          // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement) == 0x000008, "Wrong alignment on FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement");
static_assert(sizeof(FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement) == 0x000098, "Wrong size on FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement");
static_assert(offsetof(FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement, InOutImpact) == 0x000000, "Member 'FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement::InOutImpact' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement, FortPawn) == 0x000090, "Member 'FortAthenaMutator_PhosphorusWipeout_HandleBlockedCharacterMovement::FortPawn' has a wrong offset!");

// Function PhosphorusWipeoutRuntime.FortAthenaMutator_PhosphorusWipeout.OnRep_KnockBackDataChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_PhosphorusWipeout_OnRep_KnockBackDataChanged final
{
public:
	TArray<struct FPhosphorusWipeoutKnockBackData> OldValue;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_PhosphorusWipeout_OnRep_KnockBackDataChanged) == 0x000008, "Wrong alignment on FortAthenaMutator_PhosphorusWipeout_OnRep_KnockBackDataChanged");
static_assert(sizeof(FortAthenaMutator_PhosphorusWipeout_OnRep_KnockBackDataChanged) == 0x000010, "Wrong size on FortAthenaMutator_PhosphorusWipeout_OnRep_KnockBackDataChanged");
static_assert(offsetof(FortAthenaMutator_PhosphorusWipeout_OnRep_KnockBackDataChanged, OldValue) == 0x000000, "Member 'FortAthenaMutator_PhosphorusWipeout_OnRep_KnockBackDataChanged::OldValue' has a wrong offset!");

// Function PhosphorusWipeoutRuntime.FortAthenaMutator_PhosphorusWipeout.SetPlayersShouldBreakThroughStructures
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures) == 0x000008, "Wrong alignment on FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures");
static_assert(sizeof(FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures) == 0x000010, "Wrong size on FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures");
static_assert(offsetof(FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures, bActive) == 0x000000, "Member 'FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures::bActive' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures, PlayerPawn) == 0x000008, "Member 'FortAthenaMutator_PhosphorusWipeout_SetPlayersShouldBreakThroughStructures::PlayerPawn' has a wrong offset!");

// Function PhosphorusWipeoutRuntime.GA_Wipeout_PlayerKnockBackNative.SaveKnockBackData
// 0x0010 (0x0010 - 0x0000)
struct GA_Wipeout_PlayerKnockBackNative_SaveKnockBackData final
{
public:
	struct FPhosphorusWipeoutKnockBackData        InKnockBackData;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GA_Wipeout_PlayerKnockBackNative_SaveKnockBackData) == 0x000008, "Wrong alignment on GA_Wipeout_PlayerKnockBackNative_SaveKnockBackData");
static_assert(sizeof(GA_Wipeout_PlayerKnockBackNative_SaveKnockBackData) == 0x000010, "Wrong size on GA_Wipeout_PlayerKnockBackNative_SaveKnockBackData");
static_assert(offsetof(GA_Wipeout_PlayerKnockBackNative_SaveKnockBackData, InKnockBackData) == 0x000000, "Member 'GA_Wipeout_PlayerKnockBackNative_SaveKnockBackData::InKnockBackData' has a wrong offset!");

}

